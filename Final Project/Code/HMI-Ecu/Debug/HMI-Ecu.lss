
HMI-Ecu.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002cf0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000aa  00800060  00002cf0  00002d84  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  0080010a  0080010a  00002e2e  2**0
                  ALLOC
  3 .stab         00002c28  00000000  00000000  00002e30  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001589  00000000  00000000  00005a58  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006fe1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007121  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007291  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008eda  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009dc5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000ab74  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000acd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000af61  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b72f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 e3 08 	jmp	0x11c6	; 0x11c6 <__vector_1>
       8:	0c 94 16 09 	jmp	0x122c	; 0x122c <__vector_2>
       c:	0c 94 79 11 	jmp	0x22f2	; 0x22f2 <__vector_3>
      10:	0c 94 ac 11 	jmp	0x2358	; 0x2358 <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 13 11 	jmp	0x2226	; 0x2226 <__vector_6>
      1c:	0c 94 46 11 	jmp	0x228c	; 0x228c <__vector_7>
      20:	0c 94 e0 10 	jmp	0x21c0	; 0x21c0 <__vector_8>
      24:	0c 94 7a 10 	jmp	0x20f4	; 0x20f4 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 49 09 	jmp	0x1292	; 0x1292 <__vector_18>
      4c:	0c 94 ad 10 	jmp	0x215a	; 0x215a <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ef       	ldi	r30, 0xF0	; 240
      68:	fc e2       	ldi	r31, 0x2C	; 44
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 30       	cpi	r26, 0x0A	; 10
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e0       	ldi	r26, 0x0A	; 10
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 31       	cpi	r26, 0x1B	; 27
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 06 	call	0xd46	; 0xd46 <main>
      8a:	0c 94 76 16 	jmp	0x2cec	; 0x2cec <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 fa 15 	jmp	0x2bf4	; 0x2bf4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ac ef       	ldi	r26, 0xFC	; 252
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 16 16 	jmp	0x2c2c	; 0x2c2c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 06 16 	jmp	0x2c0c	; 0x2c0c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 22 16 	jmp	0x2c44	; 0x2c44 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 06 16 	jmp	0x2c0c	; 0x2c0c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 22 16 	jmp	0x2c44	; 0x2c44 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 fa 15 	jmp	0x2bf4	; 0x2bf4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8c ef       	ldi	r24, 0xFC	; 252
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 16 16 	jmp	0x2c2c	; 0x2c2c <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 06 16 	jmp	0x2c0c	; 0x2c0c <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 22 16 	jmp	0x2c44	; 0x2c44 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 06 16 	jmp	0x2c0c	; 0x2c0c <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 22 16 	jmp	0x2c44	; 0x2c44 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 06 16 	jmp	0x2c0c	; 0x2c0c <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 22 16 	jmp	0x2c44	; 0x2c44 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 0a 16 	jmp	0x2c14	; 0x2c14 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 26 16 	jmp	0x2c4c	; 0x2c4c <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <getUserPass>:
 * [Returns] : No Returns
 *
 *
 */
void getUserPass(uint8* ptr)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	62 97       	sbiw	r28, 0x12	; 18
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	9a 8b       	std	Y+18, r25	; 0x12
     b5c:	89 8b       	std	Y+17, r24	; 0x11

	uint8 index=0;
     b5e:	18 8a       	std	Y+16, r1	; 0x10
	uint8 digit ;
	LCD_goToRowColumn(1,0);
     b60:	81 e0       	ldi	r24, 0x01	; 1
     b62:	60 e0       	ldi	r22, 0x00	; 0
     b64:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <LCD_goToRowColumn>
	digit = KeyPad_getPressedKey();
     b68:	0e 94 b8 0a 	call	0x1570	; 0x1570 <KeyPad_getPressedKey>
     b6c:	8f 87       	std	Y+15, r24	; 0x0f
     b6e:	85 c0       	rjmp	.+266    	; 0xc7a <getUserPass+0x134>
	while(digit != '=')
	{
		ptr[index] = digit;//keypad response time
     b70:	88 89       	ldd	r24, Y+16	; 0x10
     b72:	28 2f       	mov	r18, r24
     b74:	30 e0       	ldi	r19, 0x00	; 0
     b76:	89 89       	ldd	r24, Y+17	; 0x11
     b78:	9a 89       	ldd	r25, Y+18	; 0x12
     b7a:	fc 01       	movw	r30, r24
     b7c:	e2 0f       	add	r30, r18
     b7e:	f3 1f       	adc	r31, r19
     b80:	8f 85       	ldd	r24, Y+15	; 0x0f
     b82:	80 83       	st	Z, r24
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	a8 e4       	ldi	r26, 0x48	; 72
     b8a:	b2 e4       	ldi	r27, 0x42	; 66
     b8c:	8b 87       	std	Y+11, r24	; 0x0b
     b8e:	9c 87       	std	Y+12, r25	; 0x0c
     b90:	ad 87       	std	Y+13, r26	; 0x0d
     b92:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b94:	6b 85       	ldd	r22, Y+11	; 0x0b
     b96:	7c 85       	ldd	r23, Y+12	; 0x0c
     b98:	8d 85       	ldd	r24, Y+13	; 0x0d
     b9a:	9e 85       	ldd	r25, Y+14	; 0x0e
     b9c:	20 e0       	ldi	r18, 0x00	; 0
     b9e:	30 e0       	ldi	r19, 0x00	; 0
     ba0:	4a ef       	ldi	r20, 0xFA	; 250
     ba2:	54 e4       	ldi	r21, 0x44	; 68
     ba4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ba8:	dc 01       	movw	r26, r24
     baa:	cb 01       	movw	r24, r22
     bac:	8f 83       	std	Y+7, r24	; 0x07
     bae:	98 87       	std	Y+8, r25	; 0x08
     bb0:	a9 87       	std	Y+9, r26	; 0x09
     bb2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     bb4:	6f 81       	ldd	r22, Y+7	; 0x07
     bb6:	78 85       	ldd	r23, Y+8	; 0x08
     bb8:	89 85       	ldd	r24, Y+9	; 0x09
     bba:	9a 85       	ldd	r25, Y+10	; 0x0a
     bbc:	20 e0       	ldi	r18, 0x00	; 0
     bbe:	30 e0       	ldi	r19, 0x00	; 0
     bc0:	40 e8       	ldi	r20, 0x80	; 128
     bc2:	5f e3       	ldi	r21, 0x3F	; 63
     bc4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bc8:	88 23       	and	r24, r24
     bca:	2c f4       	brge	.+10     	; 0xbd6 <getUserPass+0x90>
		__ticks = 1;
     bcc:	81 e0       	ldi	r24, 0x01	; 1
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	9e 83       	std	Y+6, r25	; 0x06
     bd2:	8d 83       	std	Y+5, r24	; 0x05
     bd4:	3f c0       	rjmp	.+126    	; 0xc54 <getUserPass+0x10e>
	else if (__tmp > 65535)
     bd6:	6f 81       	ldd	r22, Y+7	; 0x07
     bd8:	78 85       	ldd	r23, Y+8	; 0x08
     bda:	89 85       	ldd	r24, Y+9	; 0x09
     bdc:	9a 85       	ldd	r25, Y+10	; 0x0a
     bde:	20 e0       	ldi	r18, 0x00	; 0
     be0:	3f ef       	ldi	r19, 0xFF	; 255
     be2:	4f e7       	ldi	r20, 0x7F	; 127
     be4:	57 e4       	ldi	r21, 0x47	; 71
     be6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     bea:	18 16       	cp	r1, r24
     bec:	4c f5       	brge	.+82     	; 0xc40 <getUserPass+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bee:	6b 85       	ldd	r22, Y+11	; 0x0b
     bf0:	7c 85       	ldd	r23, Y+12	; 0x0c
     bf2:	8d 85       	ldd	r24, Y+13	; 0x0d
     bf4:	9e 85       	ldd	r25, Y+14	; 0x0e
     bf6:	20 e0       	ldi	r18, 0x00	; 0
     bf8:	30 e0       	ldi	r19, 0x00	; 0
     bfa:	40 e2       	ldi	r20, 0x20	; 32
     bfc:	51 e4       	ldi	r21, 0x41	; 65
     bfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c02:	dc 01       	movw	r26, r24
     c04:	cb 01       	movw	r24, r22
     c06:	bc 01       	movw	r22, r24
     c08:	cd 01       	movw	r24, r26
     c0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c0e:	dc 01       	movw	r26, r24
     c10:	cb 01       	movw	r24, r22
     c12:	9e 83       	std	Y+6, r25	; 0x06
     c14:	8d 83       	std	Y+5, r24	; 0x05
     c16:	0f c0       	rjmp	.+30     	; 0xc36 <getUserPass+0xf0>
     c18:	88 ec       	ldi	r24, 0xC8	; 200
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	9c 83       	std	Y+4, r25	; 0x04
     c1e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c20:	8b 81       	ldd	r24, Y+3	; 0x03
     c22:	9c 81       	ldd	r25, Y+4	; 0x04
     c24:	01 97       	sbiw	r24, 0x01	; 1
     c26:	f1 f7       	brne	.-4      	; 0xc24 <getUserPass+0xde>
     c28:	9c 83       	std	Y+4, r25	; 0x04
     c2a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c2c:	8d 81       	ldd	r24, Y+5	; 0x05
     c2e:	9e 81       	ldd	r25, Y+6	; 0x06
     c30:	01 97       	sbiw	r24, 0x01	; 1
     c32:	9e 83       	std	Y+6, r25	; 0x06
     c34:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c36:	8d 81       	ldd	r24, Y+5	; 0x05
     c38:	9e 81       	ldd	r25, Y+6	; 0x06
     c3a:	00 97       	sbiw	r24, 0x00	; 0
     c3c:	69 f7       	brne	.-38     	; 0xc18 <getUserPass+0xd2>
     c3e:	14 c0       	rjmp	.+40     	; 0xc68 <getUserPass+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c40:	6f 81       	ldd	r22, Y+7	; 0x07
     c42:	78 85       	ldd	r23, Y+8	; 0x08
     c44:	89 85       	ldd	r24, Y+9	; 0x09
     c46:	9a 85       	ldd	r25, Y+10	; 0x0a
     c48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c4c:	dc 01       	movw	r26, r24
     c4e:	cb 01       	movw	r24, r22
     c50:	9e 83       	std	Y+6, r25	; 0x06
     c52:	8d 83       	std	Y+5, r24	; 0x05
     c54:	8d 81       	ldd	r24, Y+5	; 0x05
     c56:	9e 81       	ldd	r25, Y+6	; 0x06
     c58:	9a 83       	std	Y+2, r25	; 0x02
     c5a:	89 83       	std	Y+1, r24	; 0x01
     c5c:	89 81       	ldd	r24, Y+1	; 0x01
     c5e:	9a 81       	ldd	r25, Y+2	; 0x02
     c60:	01 97       	sbiw	r24, 0x01	; 1
     c62:	f1 f7       	brne	.-4      	; 0xc60 <getUserPass+0x11a>
     c64:	9a 83       	std	Y+2, r25	; 0x02
     c66:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(50);
		LCD_displayCharacter('*');
     c68:	8a e2       	ldi	r24, 0x2A	; 42
     c6a:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <LCD_displayCharacter>
		index++;
     c6e:	88 89       	ldd	r24, Y+16	; 0x10
     c70:	8f 5f       	subi	r24, 0xFF	; 255
     c72:	88 8b       	std	Y+16, r24	; 0x10
		digit = KeyPad_getPressedKey();
     c74:	0e 94 b8 0a 	call	0x1570	; 0x1570 <KeyPad_getPressedKey>
     c78:	8f 87       	std	Y+15, r24	; 0x0f

	uint8 index=0;
	uint8 digit ;
	LCD_goToRowColumn(1,0);
	digit = KeyPad_getPressedKey();
	while(digit != '=')
     c7a:	8f 85       	ldd	r24, Y+15	; 0x0f
     c7c:	8d 33       	cpi	r24, 0x3D	; 61
     c7e:	09 f0       	breq	.+2      	; 0xc82 <getUserPass+0x13c>
     c80:	77 cf       	rjmp	.-274    	; 0xb70 <getUserPass+0x2a>
		index++;
		digit = KeyPad_getPressedKey();
	}
	//ptr[i] = '/';
	//ptr[i+1] = '#';
	LCD_clearScreen();
     c82:	0e 94 70 10 	call	0x20e0	; 0x20e0 <LCD_clearScreen>

}
     c86:	62 96       	adiw	r28, 0x12	; 18
     c88:	0f b6       	in	r0, 0x3f	; 63
     c8a:	f8 94       	cli
     c8c:	de bf       	out	0x3e, r29	; 62
     c8e:	0f be       	out	0x3f, r0	; 63
     c90:	cd bf       	out	0x3d, r28	; 61
     c92:	cf 91       	pop	r28
     c94:	df 91       	pop	r29
     c96:	08 95       	ret

00000c98 <sendPassToMaster>:
 *                    return 0 if password is not correct
 *
 *
 */
uint8 sendPassToMaster(uint8* pass)
{
     c98:	df 93       	push	r29
     c9a:	cf 93       	push	r28
     c9c:	00 d0       	rcall	.+0      	; 0xc9e <sendPassToMaster+0x6>
     c9e:	0f 92       	push	r0
     ca0:	cd b7       	in	r28, 0x3d	; 61
     ca2:	de b7       	in	r29, 0x3e	; 62
     ca4:	9b 83       	std	Y+3, r25	; 0x03
     ca6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 index=0;
     ca8:	19 82       	std	Y+1, r1	; 0x01
	for(index = 0 ; index < PASSWORDDIGITS ; index++)
     caa:	19 82       	std	Y+1, r1	; 0x01
     cac:	0e c0       	rjmp	.+28     	; 0xcca <sendPassToMaster+0x32>
	{
		UART_SendByte(pass[index]);
     cae:	89 81       	ldd	r24, Y+1	; 0x01
     cb0:	28 2f       	mov	r18, r24
     cb2:	30 e0       	ldi	r19, 0x00	; 0
     cb4:	8a 81       	ldd	r24, Y+2	; 0x02
     cb6:	9b 81       	ldd	r25, Y+3	; 0x03
     cb8:	fc 01       	movw	r30, r24
     cba:	e2 0f       	add	r30, r18
     cbc:	f3 1f       	adc	r31, r19
     cbe:	80 81       	ld	r24, Z
     cc0:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <UART_SendByte>
 *
 */
uint8 sendPassToMaster(uint8* pass)
{
	uint8 index=0;
	for(index = 0 ; index < PASSWORDDIGITS ; index++)
     cc4:	89 81       	ldd	r24, Y+1	; 0x01
     cc6:	8f 5f       	subi	r24, 0xFF	; 255
     cc8:	89 83       	std	Y+1, r24	; 0x01
     cca:	89 81       	ldd	r24, Y+1	; 0x01
     ccc:	84 30       	cpi	r24, 0x04	; 4
     cce:	78 f3       	brcs	.-34     	; 0xcae <sendPassToMaster+0x16>
	{
		UART_SendByte(pass[index]);
	}
	return UART_ReceiveByte();
     cd0:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <UART_ReceiveByte>
}
     cd4:	0f 90       	pop	r0
     cd6:	0f 90       	pop	r0
     cd8:	0f 90       	pop	r0
     cda:	cf 91       	pop	r28
     cdc:	df 91       	pop	r29
     cde:	08 95       	ret

00000ce0 <timer_handler>:
 * [Returns] : No Returns
 *
 *
 */
void timer_handler(void)
{
     ce0:	df 93       	push	r29
     ce2:	cf 93       	push	r28
     ce4:	cd b7       	in	r28, 0x3d	; 61
     ce6:	de b7       	in	r29, 0x3e	; 62

	g_tick++;
     ce8:	80 91 0a 01 	lds	r24, 0x010A
     cec:	8f 5f       	subi	r24, 0xFF	; 255
     cee:	80 93 0a 01 	sts	0x010A, r24
	//after 12 timer overflow(interrupt) equal 1 Second in real time
	if(g_tick == 12)
     cf2:	80 91 0a 01 	lds	r24, 0x010A
     cf6:	8c 30       	cpi	r24, 0x0C	; 12
     cf8:	19 f5       	brne	.+70     	; 0xd40 <timer_handler+0x60>
	{
		g_tick = 0;
     cfa:	10 92 0a 01 	sts	0x010A, r1
		g_timerCounter++;
     cfe:	80 91 0b 01 	lds	r24, 0x010B
     d02:	8f 5f       	subi	r24, 0xFF	; 255
     d04:	80 93 0b 01 	sts	0x010B, r24
		LCD_goToRowColumn(1,0);
     d08:	81 e0       	ldi	r24, 0x01	; 1
     d0a:	60 e0       	ldi	r22, 0x00	; 0
     d0c:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <LCD_goToRowColumn>
		//show the time to the user in HMI Screen
		LCD_intgerToString(10-g_timerCounter);
     d10:	80 91 0b 01 	lds	r24, 0x010B
     d14:	28 2f       	mov	r18, r24
     d16:	30 e0       	ldi	r19, 0x00	; 0
     d18:	8a e0       	ldi	r24, 0x0A	; 10
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	82 1b       	sub	r24, r18
     d1e:	93 0b       	sbc	r25, r19
     d20:	0e 94 4d 10 	call	0x209a	; 0x209a <LCD_intgerToString>
		//after 10 seconds
		if(g_timerCounter == 10)
     d24:	80 91 0b 01 	lds	r24, 0x010B
     d28:	8a 30       	cpi	r24, 0x0A	; 10
     d2a:	51 f4       	brne	.+20     	; 0xd40 <timer_handler+0x60>
		{
			//reset the counter
			g_timerCounter = 0;
     d2c:	10 92 0b 01 	sts	0x010B, r1
			//stop the timer(no clock connected)
			Timer_stop(Timer0);
     d30:	80 e0       	ldi	r24, 0x00	; 0
     d32:	0e 94 26 13 	call	0x264c	; 0x264c <Timer_stop>
			//clear HMI screen
			LCD_clearScreen();
     d36:	0e 94 70 10 	call	0x20e0	; 0x20e0 <LCD_clearScreen>
			//rise flag for resume HMI ECU code flow
			g_timerFlag = 1;
     d3a:	81 e0       	ldi	r24, 0x01	; 1
     d3c:	80 93 0c 01 	sts	0x010C, r24
		}
	}

}
     d40:	cf 91       	pop	r28
     d42:	df 91       	pop	r29
     d44:	08 95       	ret

00000d46 <main>:
/**************************************Main Function***************************************/
int main()
{
     d46:	df 93       	push	r29
     d48:	cf 93       	push	r28
     d4a:	cd b7       	in	r28, 0x3d	; 61
     d4c:	de b7       	in	r29, 0x3e	; 62
     d4e:	c9 54       	subi	r28, 0x49	; 73
     d50:	d0 40       	sbci	r29, 0x00	; 0
     d52:	0f b6       	in	r0, 0x3f	; 63
     d54:	f8 94       	cli
     d56:	de bf       	out	0x3e, r29	; 62
     d58:	0f be       	out	0x3f, r0	; 63
     d5a:	cd bf       	out	0x3d, r28	; 61
	 *index     -> loop index for array check or array saving
	 *flag      -> used to hold the flow until opening the door process done
	 *counter   ->unsigned 8 bit variable hold Thief counter
	 *
	 */
	uint8 pass[10],pass2[10],Time,index,flag=0,counter=0;
     d5c:	1e 8e       	std	Y+30, r1	; 0x1e
     d5e:	1d 8e       	std	Y+29, r1	; 0x1d
	 * UART Asynchronous Mode
	 * Eight bit Mode transfer
	 * parityBitMode is disabled
	 * 9600 kilobyte per second bit rate
	 */
	UART_configType uart_config = {Asynchronous,Eight,Disabled,9600};
     d60:	ce 01       	movw	r24, r28
     d62:	c5 96       	adiw	r24, 0x35	; 53
     d64:	27 96       	adiw	r28, 0x07	; 7
     d66:	9f af       	std	Y+63, r25	; 0x3f
     d68:	8e af       	std	Y+62, r24	; 0x3e
     d6a:	27 97       	sbiw	r28, 0x07	; 7
     d6c:	a4 e0       	ldi	r26, 0x04	; 4
     d6e:	b1 e0       	ldi	r27, 0x01	; 1
     d70:	29 96       	adiw	r28, 0x09	; 9
     d72:	bf af       	std	Y+63, r27	; 0x3f
     d74:	ae af       	std	Y+62, r26	; 0x3e
     d76:	29 97       	sbiw	r28, 0x09	; 9
     d78:	b5 e0       	ldi	r27, 0x05	; 5
     d7a:	2a 96       	adiw	r28, 0x0a	; 10
     d7c:	bf af       	std	Y+63, r27	; 0x3f
     d7e:	2a 97       	sbiw	r28, 0x0a	; 10
     d80:	29 96       	adiw	r28, 0x09	; 9
     d82:	ee ad       	ldd	r30, Y+62	; 0x3e
     d84:	ff ad       	ldd	r31, Y+63	; 0x3f
     d86:	29 97       	sbiw	r28, 0x09	; 9
     d88:	00 80       	ld	r0, Z
     d8a:	29 96       	adiw	r28, 0x09	; 9
     d8c:	8e ad       	ldd	r24, Y+62	; 0x3e
     d8e:	9f ad       	ldd	r25, Y+63	; 0x3f
     d90:	29 97       	sbiw	r28, 0x09	; 9
     d92:	01 96       	adiw	r24, 0x01	; 1
     d94:	29 96       	adiw	r28, 0x09	; 9
     d96:	9f af       	std	Y+63, r25	; 0x3f
     d98:	8e af       	std	Y+62, r24	; 0x3e
     d9a:	29 97       	sbiw	r28, 0x09	; 9
     d9c:	27 96       	adiw	r28, 0x07	; 7
     d9e:	ae ad       	ldd	r26, Y+62	; 0x3e
     da0:	bf ad       	ldd	r27, Y+63	; 0x3f
     da2:	27 97       	sbiw	r28, 0x07	; 7
     da4:	0c 92       	st	X, r0
     da6:	27 96       	adiw	r28, 0x07	; 7
     da8:	ee ad       	ldd	r30, Y+62	; 0x3e
     daa:	ff ad       	ldd	r31, Y+63	; 0x3f
     dac:	27 97       	sbiw	r28, 0x07	; 7
     dae:	31 96       	adiw	r30, 0x01	; 1
     db0:	27 96       	adiw	r28, 0x07	; 7
     db2:	ff af       	std	Y+63, r31	; 0x3f
     db4:	ee af       	std	Y+62, r30	; 0x3e
     db6:	27 97       	sbiw	r28, 0x07	; 7
     db8:	2a 96       	adiw	r28, 0x0a	; 10
     dba:	ff ad       	ldd	r31, Y+63	; 0x3f
     dbc:	2a 97       	sbiw	r28, 0x0a	; 10
     dbe:	f1 50       	subi	r31, 0x01	; 1
     dc0:	2a 96       	adiw	r28, 0x0a	; 10
     dc2:	ff af       	std	Y+63, r31	; 0x3f
     dc4:	2a 97       	sbiw	r28, 0x0a	; 10
     dc6:	2a 96       	adiw	r28, 0x0a	; 10
     dc8:	8f ad       	ldd	r24, Y+63	; 0x3f
     dca:	2a 97       	sbiw	r28, 0x0a	; 10
     dcc:	88 23       	and	r24, r24
     dce:	c1 f6       	brne	.-80     	; 0xd80 <main+0x3a>
	//function to initialize the LCD
	LCD_init();
     dd0:	0e 94 b6 0b 	call	0x176c	; 0x176c <LCD_init>
	//function to initialize the UART and pass the address of Structure holds the configuration for UART module
	UART_init(&uart_config);
     dd4:	ce 01       	movw	r24, r28
     dd6:	c5 96       	adiw	r24, 0x35	; 53
     dd8:	0e 94 64 14 	call	0x28c8	; 0x28c8 <UART_init>
	 * compare value = 0
	 * initial value = 0
	 * compare A value = 0
	 * Compare B value = 0
	 */
	Timer_configType timer0_config = {Timer0,FCPU256,Normal,disconnected,0,0,0,0};
     ddc:	8b e0       	ldi	r24, 0x0B	; 11
     dde:	fe 01       	movw	r30, r28
     de0:	fa 96       	adiw	r30, 0x3a	; 58
     de2:	df 01       	movw	r26, r30
     de4:	98 2f       	mov	r25, r24
     de6:	1d 92       	st	X+, r1
     de8:	9a 95       	dec	r25
     dea:	e9 f7       	brne	.-6      	; 0xde6 <main+0xa0>
     dec:	84 e0       	ldi	r24, 0x04	; 4
     dee:	8b af       	std	Y+59, r24	; 0x3b
	//function to initialize the Timer and pass the address of Structure holds the configuration for Timer module
	Timer_init(&timer0_config);
     df0:	ce 01       	movw	r24, r28
     df2:	ca 96       	adiw	r24, 0x3a	; 58
     df4:	0e 94 df 11 	call	0x23be	; 0x23be <Timer_init>
	/*function set the call back function
	 * every interrupt the CPU will execute (timer_handler) function
	 */
	Timer_setCallBack(Timer0,Normal,timer_handler);
     df8:	20 e7       	ldi	r18, 0x70	; 112
     dfa:	36 e0       	ldi	r19, 0x06	; 6
     dfc:	80 e0       	ldi	r24, 0x00	; 0
     dfe:	60 e0       	ldi	r22, 0x00	; 0
     e00:	a9 01       	movw	r20, r18
     e02:	0e 94 23 14 	call	0x2846	; 0x2846 <Timer_setCallBack>
	//enable I-bit in Status register(global interrupt enable)
	SREG |= (1<<7);
     e06:	af e5       	ldi	r26, 0x5F	; 95
     e08:	b0 e0       	ldi	r27, 0x00	; 0
     e0a:	ef e5       	ldi	r30, 0x5F	; 95
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	80 81       	ld	r24, Z
     e10:	80 68       	ori	r24, 0x80	; 128
     e12:	8c 93       	st	X, r24
	//check from the master is this first time this Application runs or not
	Time = UART_ReceiveByte();
     e14:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <UART_ReceiveByte>
     e18:	88 a3       	std	Y+32, r24	; 0x20
	//if master told HMI ECU that us the first time ever app runs
	if(Time == FIRSTTIME)
     e1a:	88 a1       	ldd	r24, Y+32	; 0x20
     e1c:	83 32       	cpi	r24, 0x23	; 35
     e1e:	09 f0       	breq	.+2      	; 0xe22 <main+0xdc>
     e20:	43 c0       	rjmp	.+134    	; 0xea8 <main+0x162>
	{
		//ask the user to enter the new password
		do
		{
			UART_SendByte(AGAIN);
     e22:	81 e4       	ldi	r24, 0x41	; 65
     e24:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <UART_SendByte>
			flag = 0;
     e28:	1e 8e       	std	Y+30, r1	; 0x1e
			LCD_displayString("Enter New Pass");
     e2a:	80 e6       	ldi	r24, 0x60	; 96
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <LCD_displayString>
			getUserPass(pass);
     e32:	ce 01       	movw	r24, r28
     e34:	81 96       	adiw	r24, 0x21	; 33
     e36:	0e 94 a3 05 	call	0xb46	; 0xb46 <getUserPass>

			//send the pass to the master
			sendPassToMaster(pass);
     e3a:	ce 01       	movw	r24, r28
     e3c:	81 96       	adiw	r24, 0x21	; 33
     e3e:	0e 94 4c 06 	call	0xc98	; 0xc98 <sendPassToMaster>
			//confirm the pass
			LCD_displayString("Re Enter Pass");
     e42:	8f e6       	ldi	r24, 0x6F	; 111
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <LCD_displayString>
			getUserPass(pass2);
     e4a:	ce 01       	movw	r24, r28
     e4c:	8b 96       	adiw	r24, 0x2b	; 43
     e4e:	0e 94 a3 05 	call	0xb46	; 0xb46 <getUserPass>
			//if confirm password failed
			for(index = 0 ; index < PASSWORDDIGITS ; index++)
     e52:	1f 8e       	std	Y+31, r1	; 0x1f
     e54:	19 c0       	rjmp	.+50     	; 0xe88 <main+0x142>
			{
				if(!(pass[index] == pass2[index]))
     e56:	8f 8d       	ldd	r24, Y+31	; 0x1f
     e58:	28 2f       	mov	r18, r24
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	ce 01       	movw	r24, r28
     e5e:	81 96       	adiw	r24, 0x21	; 33
     e60:	fc 01       	movw	r30, r24
     e62:	e2 0f       	add	r30, r18
     e64:	f3 1f       	adc	r31, r19
     e66:	40 81       	ld	r20, Z
     e68:	8f 8d       	ldd	r24, Y+31	; 0x1f
     e6a:	28 2f       	mov	r18, r24
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	ce 01       	movw	r24, r28
     e70:	8b 96       	adiw	r24, 0x2b	; 43
     e72:	fc 01       	movw	r30, r24
     e74:	e2 0f       	add	r30, r18
     e76:	f3 1f       	adc	r31, r19
     e78:	80 81       	ld	r24, Z
     e7a:	48 17       	cp	r20, r24
     e7c:	11 f0       	breq	.+4      	; 0xe82 <main+0x13c>
					flag =1;
     e7e:	81 e0       	ldi	r24, 0x01	; 1
     e80:	8e 8f       	std	Y+30, r24	; 0x1e
			sendPassToMaster(pass);
			//confirm the pass
			LCD_displayString("Re Enter Pass");
			getUserPass(pass2);
			//if confirm password failed
			for(index = 0 ; index < PASSWORDDIGITS ; index++)
     e82:	8f 8d       	ldd	r24, Y+31	; 0x1f
     e84:	8f 5f       	subi	r24, 0xFF	; 255
     e86:	8f 8f       	std	Y+31, r24	; 0x1f
     e88:	8f 8d       	ldd	r24, Y+31	; 0x1f
     e8a:	84 30       	cpi	r24, 0x04	; 4
     e8c:	20 f3       	brcs	.-56     	; 0xe56 <main+0x110>
			{
				if(!(pass[index] == pass2[index]))
					flag =1;
			}
			//re ask the user again for the new password
		}while(flag);
     e8e:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e90:	88 23       	and	r24, r24
     e92:	39 f6       	brne	.-114    	; 0xe22 <main+0xdc>
		//if new password entered correctly send to master it is done
		UART_SendByte(DONE);
     e94:	8b e3       	ldi	r24, 0x3B	; 59
     e96:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <UART_SendByte>
		//and send the pass to master to save it
		sendPassToMaster(pass);
     e9a:	ce 01       	movw	r24, r28
     e9c:	81 96       	adiw	r24, 0x21	; 33
     e9e:	0e 94 4c 06 	call	0xc98	; 0xc98 <sendPassToMaster>
		 * if master runs for the first time then send this is the first time
		 * and save the password
		 * master will send this is second time
		 * and slave must response to the UART request or Control ECU(master) will stuck and wait for the response
		 */
		Time = UART_ReceiveByte();
     ea2:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <UART_ReceiveByte>
     ea6:	88 a3       	std	Y+32, r24	; 0x20
	}
		//super loop(infinity loop)
		while(1){

			//if thief counter reached 3 make a noise by buzzer and wait for 10 second
			if(counter == 3)
     ea8:	8d 8d       	ldd	r24, Y+29	; 0x1d
     eaa:	83 30       	cpi	r24, 0x03	; 3
     eac:	09 f0       	breq	.+2      	; 0xeb0 <main+0x16a>
     eae:	81 c0       	rjmp	.+258    	; 0xfb2 <main+0x26c>
			{
				//reset the counter to count three wrong password entry again
				counter = 0;
     eb0:	1d 8e       	std	Y+29, r1	; 0x1d
				LCD_clearScreen();
     eb2:	0e 94 70 10 	call	0x20e0	; 0x20e0 <LCD_clearScreen>
				LCD_displayString("You are a thief");
     eb6:	8d e7       	ldi	r24, 0x7D	; 125
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <LCD_displayString>
				LCD_goToRowColumn(1,0);
     ebe:	81 e0       	ldi	r24, 0x01	; 1
     ec0:	60 e0       	ldi	r22, 0x00	; 0
     ec2:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <LCD_goToRowColumn>
				LCD_displayString("I will call 911");
     ec6:	8d e8       	ldi	r24, 0x8D	; 141
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <LCD_displayString>
     ece:	80 e0       	ldi	r24, 0x00	; 0
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	aa e7       	ldi	r26, 0x7A	; 122
     ed4:	b4 e4       	ldi	r27, 0x44	; 68
     ed6:	89 8f       	std	Y+25, r24	; 0x19
     ed8:	9a 8f       	std	Y+26, r25	; 0x1a
     eda:	ab 8f       	std	Y+27, r26	; 0x1b
     edc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ede:	69 8d       	ldd	r22, Y+25	; 0x19
     ee0:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ee2:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ee4:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ee6:	20 e0       	ldi	r18, 0x00	; 0
     ee8:	30 e0       	ldi	r19, 0x00	; 0
     eea:	4a ef       	ldi	r20, 0xFA	; 250
     eec:	54 e4       	ldi	r21, 0x44	; 68
     eee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ef2:	dc 01       	movw	r26, r24
     ef4:	cb 01       	movw	r24, r22
     ef6:	8d 8b       	std	Y+21, r24	; 0x15
     ef8:	9e 8b       	std	Y+22, r25	; 0x16
     efa:	af 8b       	std	Y+23, r26	; 0x17
     efc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     efe:	6d 89       	ldd	r22, Y+21	; 0x15
     f00:	7e 89       	ldd	r23, Y+22	; 0x16
     f02:	8f 89       	ldd	r24, Y+23	; 0x17
     f04:	98 8d       	ldd	r25, Y+24	; 0x18
     f06:	20 e0       	ldi	r18, 0x00	; 0
     f08:	30 e0       	ldi	r19, 0x00	; 0
     f0a:	40 e8       	ldi	r20, 0x80	; 128
     f0c:	5f e3       	ldi	r21, 0x3F	; 63
     f0e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f12:	88 23       	and	r24, r24
     f14:	2c f4       	brge	.+10     	; 0xf20 <main+0x1da>
		__ticks = 1;
     f16:	81 e0       	ldi	r24, 0x01	; 1
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	9c 8b       	std	Y+20, r25	; 0x14
     f1c:	8b 8b       	std	Y+19, r24	; 0x13
     f1e:	3f c0       	rjmp	.+126    	; 0xf9e <main+0x258>
	else if (__tmp > 65535)
     f20:	6d 89       	ldd	r22, Y+21	; 0x15
     f22:	7e 89       	ldd	r23, Y+22	; 0x16
     f24:	8f 89       	ldd	r24, Y+23	; 0x17
     f26:	98 8d       	ldd	r25, Y+24	; 0x18
     f28:	20 e0       	ldi	r18, 0x00	; 0
     f2a:	3f ef       	ldi	r19, 0xFF	; 255
     f2c:	4f e7       	ldi	r20, 0x7F	; 127
     f2e:	57 e4       	ldi	r21, 0x47	; 71
     f30:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f34:	18 16       	cp	r1, r24
     f36:	4c f5       	brge	.+82     	; 0xf8a <main+0x244>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f38:	69 8d       	ldd	r22, Y+25	; 0x19
     f3a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f3c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f3e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f40:	20 e0       	ldi	r18, 0x00	; 0
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	40 e2       	ldi	r20, 0x20	; 32
     f46:	51 e4       	ldi	r21, 0x41	; 65
     f48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f4c:	dc 01       	movw	r26, r24
     f4e:	cb 01       	movw	r24, r22
     f50:	bc 01       	movw	r22, r24
     f52:	cd 01       	movw	r24, r26
     f54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f58:	dc 01       	movw	r26, r24
     f5a:	cb 01       	movw	r24, r22
     f5c:	9c 8b       	std	Y+20, r25	; 0x14
     f5e:	8b 8b       	std	Y+19, r24	; 0x13
     f60:	0f c0       	rjmp	.+30     	; 0xf80 <main+0x23a>
     f62:	88 ec       	ldi	r24, 0xC8	; 200
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	9a 8b       	std	Y+18, r25	; 0x12
     f68:	89 8b       	std	Y+17, r24	; 0x11
     f6a:	89 89       	ldd	r24, Y+17	; 0x11
     f6c:	9a 89       	ldd	r25, Y+18	; 0x12
     f6e:	01 97       	sbiw	r24, 0x01	; 1
     f70:	f1 f7       	brne	.-4      	; 0xf6e <main+0x228>
     f72:	9a 8b       	std	Y+18, r25	; 0x12
     f74:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f76:	8b 89       	ldd	r24, Y+19	; 0x13
     f78:	9c 89       	ldd	r25, Y+20	; 0x14
     f7a:	01 97       	sbiw	r24, 0x01	; 1
     f7c:	9c 8b       	std	Y+20, r25	; 0x14
     f7e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f80:	8b 89       	ldd	r24, Y+19	; 0x13
     f82:	9c 89       	ldd	r25, Y+20	; 0x14
     f84:	00 97       	sbiw	r24, 0x00	; 0
     f86:	69 f7       	brne	.-38     	; 0xf62 <main+0x21c>
     f88:	14 c0       	rjmp	.+40     	; 0xfb2 <main+0x26c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f8a:	6d 89       	ldd	r22, Y+21	; 0x15
     f8c:	7e 89       	ldd	r23, Y+22	; 0x16
     f8e:	8f 89       	ldd	r24, Y+23	; 0x17
     f90:	98 8d       	ldd	r25, Y+24	; 0x18
     f92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f96:	dc 01       	movw	r26, r24
     f98:	cb 01       	movw	r24, r22
     f9a:	9c 8b       	std	Y+20, r25	; 0x14
     f9c:	8b 8b       	std	Y+19, r24	; 0x13
     f9e:	8b 89       	ldd	r24, Y+19	; 0x13
     fa0:	9c 89       	ldd	r25, Y+20	; 0x14
     fa2:	98 8b       	std	Y+16, r25	; 0x10
     fa4:	8f 87       	std	Y+15, r24	; 0x0f
     fa6:	8f 85       	ldd	r24, Y+15	; 0x0f
     fa8:	98 89       	ldd	r25, Y+16	; 0x10
     faa:	01 97       	sbiw	r24, 0x01	; 1
     fac:	f1 f7       	brne	.-4      	; 0xfaa <main+0x264>
     fae:	98 8b       	std	Y+16, r25	; 0x10
     fb0:	8f 87       	std	Y+15, r24	; 0x0f
				//use delay not timer because we need to stuck the HMI
				_delay_ms(1000);
			}
			//clear LCD screen
			LCD_clearScreen();
     fb2:	0e 94 70 10 	call	0x20e0	; 0x20e0 <LCD_clearScreen>
			/*Main Screen
			 * ask user to enter + for change the password
			 * or - for open the door the close it
			 */
			LCD_displayString("+ : Change pass");
     fb6:	8d e9       	ldi	r24, 0x9D	; 157
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <LCD_displayString>
			LCD_goToRowColumn(1,0);
     fbe:	81 e0       	ldi	r24, 0x01	; 1
     fc0:	60 e0       	ldi	r22, 0x00	; 0
     fc2:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <LCD_goToRowColumn>
			LCD_displayString("- : Open door");
     fc6:	8d ea       	ldi	r24, 0xAD	; 173
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <LCD_displayString>
			/*get the user interact with keypad
			 *if user enter -
			 */
			if(KeyPad_getPressedKey() == '-')
     fce:	0e 94 b8 0a 	call	0x1570	; 0x1570 <KeyPad_getPressedKey>
     fd2:	8d 32       	cpi	r24, 0x2D	; 45
     fd4:	09 f0       	breq	.+2      	; 0xfd8 <main+0x292>
     fd6:	46 c0       	rjmp	.+140    	; 0x1064 <main+0x31e>
			{
				//send to the master to open the door but the master will wait until password entered correctly
				UART_SendByte(OPEN);
     fd8:	8f e6       	ldi	r24, 0x6F	; 111
     fda:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <UART_SendByte>
				LCD_clearScreen();
     fde:	0e 94 70 10 	call	0x20e0	; 0x20e0 <LCD_clearScreen>
				//ask the user to enter the password
				LCD_displayString("Enter Pass");
     fe2:	8b eb       	ldi	r24, 0xBB	; 187
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <LCD_displayString>
				getUserPass(pass);
     fea:	ce 01       	movw	r24, r28
     fec:	81 96       	adiw	r24, 0x21	; 33
     fee:	0e 94 a3 05 	call	0xb46	; 0xb46 <getUserPass>
				//if master response that entered password is correct
				if(sendPassToMaster(pass) == CORRECT)
     ff2:	ce 01       	movw	r24, r28
     ff4:	81 96       	adiw	r24, 0x21	; 33
     ff6:	0e 94 4c 06 	call	0xc98	; 0xc98 <sendPassToMaster>
     ffa:	81 33       	cpi	r24, 0x31	; 49
     ffc:	79 f5       	brne	.+94     	; 0x105c <main+0x316>
				{
					//reset the password array for the next time
					for(index = 0 ; index < PASSWORDDIGITS ; index++)
     ffe:	1f 8e       	std	Y+31, r1	; 0x1f
    1000:	0c c0       	rjmp	.+24     	; 0x101a <main+0x2d4>
					{
						pass[index] = 0;
    1002:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1004:	28 2f       	mov	r18, r24
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	ce 01       	movw	r24, r28
    100a:	81 96       	adiw	r24, 0x21	; 33
    100c:	fc 01       	movw	r30, r24
    100e:	e2 0f       	add	r30, r18
    1010:	f3 1f       	adc	r31, r19
    1012:	10 82       	st	Z, r1
				getUserPass(pass);
				//if master response that entered password is correct
				if(sendPassToMaster(pass) == CORRECT)
				{
					//reset the password array for the next time
					for(index = 0 ; index < PASSWORDDIGITS ; index++)
    1014:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1016:	8f 5f       	subi	r24, 0xFF	; 255
    1018:	8f 8f       	std	Y+31, r24	; 0x1f
    101a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    101c:	84 30       	cpi	r24, 0x04	; 4
    101e:	88 f3       	brcs	.-30     	; 0x1002 <main+0x2bc>
					{
						pass[index] = 0;
					}
					//reset the thief counter
					counter = 0;
    1020:	1d 8e       	std	Y+29, r1	; 0x1d
					LCD_displayString("Opening");
    1022:	86 ec       	ldi	r24, 0xC6	; 198
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <LCD_displayString>
					//start timer 0 for 10 seconds and show this counter on LCD
					Timer_start(&timer0_config);
    102a:	ce 01       	movw	r24, r28
    102c:	ca 96       	adiw	r24, 0x3a	; 58
    102e:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <Timer_start>
					//wait until timer finish
					while(!g_timerFlag);
    1032:	80 91 0c 01 	lds	r24, 0x010C
    1036:	88 23       	and	r24, r24
    1038:	e1 f3       	breq	.-8      	; 0x1032 <main+0x2ec>
					//reset the flag for next timer
					g_timerFlag = 0;
    103a:	10 92 0c 01 	sts	0x010C, r1
					//re process same sequence but now is closing the door
					LCD_displayString("Closing");
    103e:	8e ec       	ldi	r24, 0xCE	; 206
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <LCD_displayString>
					Timer_start(&timer0_config);
    1046:	ce 01       	movw	r24, r28
    1048:	ca 96       	adiw	r24, 0x3a	; 58
    104a:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <Timer_start>
					while(!g_timerFlag);
    104e:	80 91 0c 01 	lds	r24, 0x010C
    1052:	88 23       	and	r24, r24
    1054:	e1 f3       	breq	.-8      	; 0x104e <main+0x308>
					g_timerFlag = 0;
    1056:	10 92 0c 01 	sts	0x010C, r1
    105a:	26 cf       	rjmp	.-436    	; 0xea8 <main+0x162>
				}
				//if password entered wrong increment thief counter
				else
				{
					counter++;
    105c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    105e:	8f 5f       	subi	r24, 0xFF	; 255
    1060:	8d 8f       	std	Y+29, r24	; 0x1d
    1062:	22 cf       	rjmp	.-444    	; 0xea8 <main+0x162>
				}

			}
			//if user entered +
			else if(KeyPad_getPressedKey() == '+')
    1064:	0e 94 b8 0a 	call	0x1570	; 0x1570 <KeyPad_getPressedKey>
    1068:	8b 32       	cpi	r24, 0x2B	; 43
    106a:	09 f0       	breq	.+2      	; 0x106e <main+0x328>
    106c:	1d cf       	rjmp	.-454    	; 0xea8 <main+0x162>
			{
				//send to master change command by UART
				UART_SendByte(CHANGE);
    106e:	83 e6       	ldi	r24, 0x63	; 99
    1070:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <UART_SendByte>
				LCD_clearScreen();
    1074:	0e 94 70 10 	call	0x20e0	; 0x20e0 <LCD_clearScreen>
				//ask the user to enter the old password
				LCD_displayString("Enter old Pass");
    1078:	86 ed       	ldi	r24, 0xD6	; 214
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <LCD_displayString>
				getUserPass(pass);
    1080:	ce 01       	movw	r24, r28
    1082:	81 96       	adiw	r24, 0x21	; 33
    1084:	0e 94 a3 05 	call	0xb46	; 0xb46 <getUserPass>
				//if password is correct
				if(sendPassToMaster(pass) == CORRECT)
    1088:	ce 01       	movw	r24, r28
    108a:	81 96       	adiw	r24, 0x21	; 33
    108c:	0e 94 4c 06 	call	0xc98	; 0xc98 <sendPassToMaster>
    1090:	81 33       	cpi	r24, 0x31	; 49
    1092:	09 f0       	breq	.+2      	; 0x1096 <main+0x350>
    1094:	09 cf       	rjmp	.-494    	; 0xea8 <main+0x162>
				{
					//send change again to make master change the password saved in external EEPROM
					UART_SendByte(CHANGE);
    1096:	83 e6       	ldi	r24, 0x63	; 99
    1098:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <UART_SendByte>
					//enter the new pass
					LCD_displayString("Enter new Pass");
    109c:	85 ee       	ldi	r24, 0xE5	; 229
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <LCD_displayString>
					getUserPass(pass);
    10a4:	ce 01       	movw	r24, r28
    10a6:	81 96       	adiw	r24, 0x21	; 33
    10a8:	0e 94 a3 05 	call	0xb46	; 0xb46 <getUserPass>
					//send the new pass to master
					sendPassToMaster(pass);
    10ac:	ce 01       	movw	r24, r28
    10ae:	81 96       	adiw	r24, 0x21	; 33
    10b0:	0e 94 4c 06 	call	0xc98	; 0xc98 <sendPassToMaster>
					//reset the password array for the next time
					for(index = 0 ; index < PASSWORDDIGITS ; index++)
    10b4:	1f 8e       	std	Y+31, r1	; 0x1f
    10b6:	0c c0       	rjmp	.+24     	; 0x10d0 <main+0x38a>
					{
						pass[index] = 0;
    10b8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    10ba:	28 2f       	mov	r18, r24
    10bc:	30 e0       	ldi	r19, 0x00	; 0
    10be:	ce 01       	movw	r24, r28
    10c0:	81 96       	adiw	r24, 0x21	; 33
    10c2:	fc 01       	movw	r30, r24
    10c4:	e2 0f       	add	r30, r18
    10c6:	f3 1f       	adc	r31, r19
    10c8:	10 82       	st	Z, r1
					LCD_displayString("Enter new Pass");
					getUserPass(pass);
					//send the new pass to master
					sendPassToMaster(pass);
					//reset the password array for the next time
					for(index = 0 ; index < PASSWORDDIGITS ; index++)
    10ca:	8f 8d       	ldd	r24, Y+31	; 0x1f
    10cc:	8f 5f       	subi	r24, 0xFF	; 255
    10ce:	8f 8f       	std	Y+31, r24	; 0x1f
    10d0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    10d2:	84 30       	cpi	r24, 0x04	; 4
    10d4:	88 f3       	brcs	.-30     	; 0x10b8 <main+0x372>
					{
						pass[index] = 0;
					}
					//reset the thief counter
					counter = 0;
    10d6:	1d 8e       	std	Y+29, r1	; 0x1d
					//tell the user that password changed
					LCD_displayString("CHANGED");
    10d8:	84 ef       	ldi	r24, 0xF4	; 244
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <LCD_displayString>
    10e0:	80 e0       	ldi	r24, 0x00	; 0
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	a8 ec       	ldi	r26, 0xC8	; 200
    10e6:	b2 e4       	ldi	r27, 0x42	; 66
    10e8:	8b 87       	std	Y+11, r24	; 0x0b
    10ea:	9c 87       	std	Y+12, r25	; 0x0c
    10ec:	ad 87       	std	Y+13, r26	; 0x0d
    10ee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    10f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    10f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    10f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    10f8:	20 e0       	ldi	r18, 0x00	; 0
    10fa:	30 e0       	ldi	r19, 0x00	; 0
    10fc:	4a ef       	ldi	r20, 0xFA	; 250
    10fe:	54 e4       	ldi	r21, 0x44	; 68
    1100:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1104:	dc 01       	movw	r26, r24
    1106:	cb 01       	movw	r24, r22
    1108:	8f 83       	std	Y+7, r24	; 0x07
    110a:	98 87       	std	Y+8, r25	; 0x08
    110c:	a9 87       	std	Y+9, r26	; 0x09
    110e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1110:	6f 81       	ldd	r22, Y+7	; 0x07
    1112:	78 85       	ldd	r23, Y+8	; 0x08
    1114:	89 85       	ldd	r24, Y+9	; 0x09
    1116:	9a 85       	ldd	r25, Y+10	; 0x0a
    1118:	20 e0       	ldi	r18, 0x00	; 0
    111a:	30 e0       	ldi	r19, 0x00	; 0
    111c:	40 e8       	ldi	r20, 0x80	; 128
    111e:	5f e3       	ldi	r21, 0x3F	; 63
    1120:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1124:	88 23       	and	r24, r24
    1126:	2c f4       	brge	.+10     	; 0x1132 <main+0x3ec>
		__ticks = 1;
    1128:	81 e0       	ldi	r24, 0x01	; 1
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	9e 83       	std	Y+6, r25	; 0x06
    112e:	8d 83       	std	Y+5, r24	; 0x05
    1130:	3f c0       	rjmp	.+126    	; 0x11b0 <main+0x46a>
	else if (__tmp > 65535)
    1132:	6f 81       	ldd	r22, Y+7	; 0x07
    1134:	78 85       	ldd	r23, Y+8	; 0x08
    1136:	89 85       	ldd	r24, Y+9	; 0x09
    1138:	9a 85       	ldd	r25, Y+10	; 0x0a
    113a:	20 e0       	ldi	r18, 0x00	; 0
    113c:	3f ef       	ldi	r19, 0xFF	; 255
    113e:	4f e7       	ldi	r20, 0x7F	; 127
    1140:	57 e4       	ldi	r21, 0x47	; 71
    1142:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1146:	18 16       	cp	r1, r24
    1148:	4c f5       	brge	.+82     	; 0x119c <main+0x456>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    114a:	6b 85       	ldd	r22, Y+11	; 0x0b
    114c:	7c 85       	ldd	r23, Y+12	; 0x0c
    114e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1150:	9e 85       	ldd	r25, Y+14	; 0x0e
    1152:	20 e0       	ldi	r18, 0x00	; 0
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	40 e2       	ldi	r20, 0x20	; 32
    1158:	51 e4       	ldi	r21, 0x41	; 65
    115a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    115e:	dc 01       	movw	r26, r24
    1160:	cb 01       	movw	r24, r22
    1162:	bc 01       	movw	r22, r24
    1164:	cd 01       	movw	r24, r26
    1166:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    116a:	dc 01       	movw	r26, r24
    116c:	cb 01       	movw	r24, r22
    116e:	9e 83       	std	Y+6, r25	; 0x06
    1170:	8d 83       	std	Y+5, r24	; 0x05
    1172:	0f c0       	rjmp	.+30     	; 0x1192 <main+0x44c>
    1174:	88 ec       	ldi	r24, 0xC8	; 200
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	9c 83       	std	Y+4, r25	; 0x04
    117a:	8b 83       	std	Y+3, r24	; 0x03
    117c:	8b 81       	ldd	r24, Y+3	; 0x03
    117e:	9c 81       	ldd	r25, Y+4	; 0x04
    1180:	01 97       	sbiw	r24, 0x01	; 1
    1182:	f1 f7       	brne	.-4      	; 0x1180 <main+0x43a>
    1184:	9c 83       	std	Y+4, r25	; 0x04
    1186:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1188:	8d 81       	ldd	r24, Y+5	; 0x05
    118a:	9e 81       	ldd	r25, Y+6	; 0x06
    118c:	01 97       	sbiw	r24, 0x01	; 1
    118e:	9e 83       	std	Y+6, r25	; 0x06
    1190:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1192:	8d 81       	ldd	r24, Y+5	; 0x05
    1194:	9e 81       	ldd	r25, Y+6	; 0x06
    1196:	00 97       	sbiw	r24, 0x00	; 0
    1198:	69 f7       	brne	.-38     	; 0x1174 <main+0x42e>
    119a:	86 ce       	rjmp	.-756    	; 0xea8 <main+0x162>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    119c:	6f 81       	ldd	r22, Y+7	; 0x07
    119e:	78 85       	ldd	r23, Y+8	; 0x08
    11a0:	89 85       	ldd	r24, Y+9	; 0x09
    11a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    11a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11a8:	dc 01       	movw	r26, r24
    11aa:	cb 01       	movw	r24, r22
    11ac:	9e 83       	std	Y+6, r25	; 0x06
    11ae:	8d 83       	std	Y+5, r24	; 0x05
    11b0:	8d 81       	ldd	r24, Y+5	; 0x05
    11b2:	9e 81       	ldd	r25, Y+6	; 0x06
    11b4:	9a 83       	std	Y+2, r25	; 0x02
    11b6:	89 83       	std	Y+1, r24	; 0x01
    11b8:	89 81       	ldd	r24, Y+1	; 0x01
    11ba:	9a 81       	ldd	r25, Y+2	; 0x02
    11bc:	01 97       	sbiw	r24, 0x01	; 1
    11be:	f1 f7       	brne	.-4      	; 0x11bc <main+0x476>
    11c0:	9a 83       	std	Y+2, r25	; 0x02
    11c2:	89 83       	std	Y+1, r24	; 0x01
    11c4:	71 ce       	rjmp	.-798    	; 0xea8 <main+0x162>

000011c6 <__vector_1>:
static volatile void (*g_INT0_callBackPtr)(void) = NULL_PTR;
static volatile void (*g_INT1_callBackPtr)(void) = NULL_PTR;
static volatile void (*g_INT2_callBackPtr)(void) = NULL_PTR;

ISR(INT0_vect)
{
    11c6:	1f 92       	push	r1
    11c8:	0f 92       	push	r0
    11ca:	0f b6       	in	r0, 0x3f	; 63
    11cc:	0f 92       	push	r0
    11ce:	11 24       	eor	r1, r1
    11d0:	2f 93       	push	r18
    11d2:	3f 93       	push	r19
    11d4:	4f 93       	push	r20
    11d6:	5f 93       	push	r21
    11d8:	6f 93       	push	r22
    11da:	7f 93       	push	r23
    11dc:	8f 93       	push	r24
    11de:	9f 93       	push	r25
    11e0:	af 93       	push	r26
    11e2:	bf 93       	push	r27
    11e4:	ef 93       	push	r30
    11e6:	ff 93       	push	r31
    11e8:	df 93       	push	r29
    11ea:	cf 93       	push	r28
    11ec:	cd b7       	in	r28, 0x3d	; 61
    11ee:	de b7       	in	r29, 0x3e	; 62
	if(g_INT0_callBackPtr != NULL_PTR)
    11f0:	80 91 0d 01 	lds	r24, 0x010D
    11f4:	90 91 0e 01 	lds	r25, 0x010E
    11f8:	00 97       	sbiw	r24, 0x00	; 0
    11fa:	29 f0       	breq	.+10     	; 0x1206 <__vector_1+0x40>
	{
		(*g_INT0_callBackPtr)();
    11fc:	e0 91 0d 01 	lds	r30, 0x010D
    1200:	f0 91 0e 01 	lds	r31, 0x010E
    1204:	09 95       	icall
	}

}
    1206:	cf 91       	pop	r28
    1208:	df 91       	pop	r29
    120a:	ff 91       	pop	r31
    120c:	ef 91       	pop	r30
    120e:	bf 91       	pop	r27
    1210:	af 91       	pop	r26
    1212:	9f 91       	pop	r25
    1214:	8f 91       	pop	r24
    1216:	7f 91       	pop	r23
    1218:	6f 91       	pop	r22
    121a:	5f 91       	pop	r21
    121c:	4f 91       	pop	r20
    121e:	3f 91       	pop	r19
    1220:	2f 91       	pop	r18
    1222:	0f 90       	pop	r0
    1224:	0f be       	out	0x3f, r0	; 63
    1226:	0f 90       	pop	r0
    1228:	1f 90       	pop	r1
    122a:	18 95       	reti

0000122c <__vector_2>:
ISR(INT1_vect)
{
    122c:	1f 92       	push	r1
    122e:	0f 92       	push	r0
    1230:	0f b6       	in	r0, 0x3f	; 63
    1232:	0f 92       	push	r0
    1234:	11 24       	eor	r1, r1
    1236:	2f 93       	push	r18
    1238:	3f 93       	push	r19
    123a:	4f 93       	push	r20
    123c:	5f 93       	push	r21
    123e:	6f 93       	push	r22
    1240:	7f 93       	push	r23
    1242:	8f 93       	push	r24
    1244:	9f 93       	push	r25
    1246:	af 93       	push	r26
    1248:	bf 93       	push	r27
    124a:	ef 93       	push	r30
    124c:	ff 93       	push	r31
    124e:	df 93       	push	r29
    1250:	cf 93       	push	r28
    1252:	cd b7       	in	r28, 0x3d	; 61
    1254:	de b7       	in	r29, 0x3e	; 62
	if(g_INT1_callBackPtr != NULL_PTR)
    1256:	80 91 0f 01 	lds	r24, 0x010F
    125a:	90 91 10 01 	lds	r25, 0x0110
    125e:	00 97       	sbiw	r24, 0x00	; 0
    1260:	29 f0       	breq	.+10     	; 0x126c <__vector_2+0x40>
	{
		(*g_INT1_callBackPtr)();
    1262:	e0 91 0f 01 	lds	r30, 0x010F
    1266:	f0 91 10 01 	lds	r31, 0x0110
    126a:	09 95       	icall
	}

}
    126c:	cf 91       	pop	r28
    126e:	df 91       	pop	r29
    1270:	ff 91       	pop	r31
    1272:	ef 91       	pop	r30
    1274:	bf 91       	pop	r27
    1276:	af 91       	pop	r26
    1278:	9f 91       	pop	r25
    127a:	8f 91       	pop	r24
    127c:	7f 91       	pop	r23
    127e:	6f 91       	pop	r22
    1280:	5f 91       	pop	r21
    1282:	4f 91       	pop	r20
    1284:	3f 91       	pop	r19
    1286:	2f 91       	pop	r18
    1288:	0f 90       	pop	r0
    128a:	0f be       	out	0x3f, r0	; 63
    128c:	0f 90       	pop	r0
    128e:	1f 90       	pop	r1
    1290:	18 95       	reti

00001292 <__vector_18>:
ISR(INT2_vect)
{
    1292:	1f 92       	push	r1
    1294:	0f 92       	push	r0
    1296:	0f b6       	in	r0, 0x3f	; 63
    1298:	0f 92       	push	r0
    129a:	11 24       	eor	r1, r1
    129c:	2f 93       	push	r18
    129e:	3f 93       	push	r19
    12a0:	4f 93       	push	r20
    12a2:	5f 93       	push	r21
    12a4:	6f 93       	push	r22
    12a6:	7f 93       	push	r23
    12a8:	8f 93       	push	r24
    12aa:	9f 93       	push	r25
    12ac:	af 93       	push	r26
    12ae:	bf 93       	push	r27
    12b0:	ef 93       	push	r30
    12b2:	ff 93       	push	r31
    12b4:	df 93       	push	r29
    12b6:	cf 93       	push	r28
    12b8:	cd b7       	in	r28, 0x3d	; 61
    12ba:	de b7       	in	r29, 0x3e	; 62
	if(g_INT2_callBackPtr != NULL_PTR)
    12bc:	80 91 11 01 	lds	r24, 0x0111
    12c0:	90 91 12 01 	lds	r25, 0x0112
    12c4:	00 97       	sbiw	r24, 0x00	; 0
    12c6:	29 f0       	breq	.+10     	; 0x12d2 <__vector_18+0x40>
	{
		(*g_INT2_callBackPtr)();
    12c8:	e0 91 11 01 	lds	r30, 0x0111
    12cc:	f0 91 12 01 	lds	r31, 0x0112
    12d0:	09 95       	icall
	}

}
    12d2:	cf 91       	pop	r28
    12d4:	df 91       	pop	r29
    12d6:	ff 91       	pop	r31
    12d8:	ef 91       	pop	r30
    12da:	bf 91       	pop	r27
    12dc:	af 91       	pop	r26
    12de:	9f 91       	pop	r25
    12e0:	8f 91       	pop	r24
    12e2:	7f 91       	pop	r23
    12e4:	6f 91       	pop	r22
    12e6:	5f 91       	pop	r21
    12e8:	4f 91       	pop	r20
    12ea:	3f 91       	pop	r19
    12ec:	2f 91       	pop	r18
    12ee:	0f 90       	pop	r0
    12f0:	0f be       	out	0x3f, r0	; 63
    12f2:	0f 90       	pop	r0
    12f4:	1f 90       	pop	r1
    12f6:	18 95       	reti

000012f8 <Interrupt_init>:

void Interrupt_init(INT_configType* INT_configTypePtr){
    12f8:	df 93       	push	r29
    12fa:	cf 93       	push	r28
    12fc:	00 d0       	rcall	.+0      	; 0x12fe <Interrupt_init+0x6>
    12fe:	cd b7       	in	r28, 0x3d	; 61
    1300:	de b7       	in	r29, 0x3e	; 62
    1302:	9a 83       	std	Y+2, r25	; 0x02
    1304:	89 83       	std	Y+1, r24	; 0x01
	GICR = (GICR & (0x2F))|( (INT_configTypePtr->number << 6) & (0xE0)) ;      /*insert the  value in MS 3 bits in GICR register*/
    1306:	ab e5       	ldi	r26, 0x5B	; 91
    1308:	b0 e0       	ldi	r27, 0x00	; 0
    130a:	eb e5       	ldi	r30, 0x5B	; 91
    130c:	f0 e0       	ldi	r31, 0x00	; 0
    130e:	80 81       	ld	r24, Z
    1310:	28 2f       	mov	r18, r24
    1312:	2f 72       	andi	r18, 0x2F	; 47
    1314:	e9 81       	ldd	r30, Y+1	; 0x01
    1316:	fa 81       	ldd	r31, Y+2	; 0x02
    1318:	80 81       	ld	r24, Z
    131a:	88 2f       	mov	r24, r24
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	00 24       	eor	r0, r0
    1320:	96 95       	lsr	r25
    1322:	87 95       	ror	r24
    1324:	07 94       	ror	r0
    1326:	96 95       	lsr	r25
    1328:	87 95       	ror	r24
    132a:	07 94       	ror	r0
    132c:	98 2f       	mov	r25, r24
    132e:	80 2d       	mov	r24, r0
    1330:	82 2b       	or	r24, r18
    1332:	8c 93       	st	X, r24
	if(INT_configTypePtr->number == INT_0)
    1334:	e9 81       	ldd	r30, Y+1	; 0x01
    1336:	fa 81       	ldd	r31, Y+2	; 0x02
    1338:	80 81       	ld	r24, Z
    133a:	81 30       	cpi	r24, 0x01	; 1
    133c:	a9 f4       	brne	.+42     	; 0x1368 <Interrupt_init+0x70>
	{
		CLEAR_BIT(DDRD,PD2);                                                 /*set PD2 as input pin*/
    133e:	a1 e3       	ldi	r26, 0x31	; 49
    1340:	b0 e0       	ldi	r27, 0x00	; 0
    1342:	e1 e3       	ldi	r30, 0x31	; 49
    1344:	f0 e0       	ldi	r31, 0x00	; 0
    1346:	80 81       	ld	r24, Z
    1348:	8b 7f       	andi	r24, 0xFB	; 251
    134a:	8c 93       	st	X, r24
		MCUCR = (MCUCR & (0xFC))|(INT_configTypePtr->edge  & (0x03)) ;       /*edge insert in LS 2 bits in MCUCR register*/
    134c:	a5 e5       	ldi	r26, 0x55	; 85
    134e:	b0 e0       	ldi	r27, 0x00	; 0
    1350:	e5 e5       	ldi	r30, 0x55	; 85
    1352:	f0 e0       	ldi	r31, 0x00	; 0
    1354:	80 81       	ld	r24, Z
    1356:	98 2f       	mov	r25, r24
    1358:	9c 7f       	andi	r25, 0xFC	; 252
    135a:	e9 81       	ldd	r30, Y+1	; 0x01
    135c:	fa 81       	ldd	r31, Y+2	; 0x02
    135e:	81 81       	ldd	r24, Z+1	; 0x01
    1360:	83 70       	andi	r24, 0x03	; 3
    1362:	89 2b       	or	r24, r25
    1364:	8c 93       	st	X, r24
    1366:	39 c0       	rjmp	.+114    	; 0x13da <Interrupt_init+0xe2>
	}
	else if(INT_configTypePtr->number == INT_1)
    1368:	e9 81       	ldd	r30, Y+1	; 0x01
    136a:	fa 81       	ldd	r31, Y+2	; 0x02
    136c:	80 81       	ld	r24, Z
    136e:	88 23       	and	r24, r24
    1370:	d9 f4       	brne	.+54     	; 0x13a8 <Interrupt_init+0xb0>
	{
		CLEAR_BIT(DDRD,PD3);                                                        /*set PD3 as input pin*/
    1372:	a1 e3       	ldi	r26, 0x31	; 49
    1374:	b0 e0       	ldi	r27, 0x00	; 0
    1376:	e1 e3       	ldi	r30, 0x31	; 49
    1378:	f0 e0       	ldi	r31, 0x00	; 0
    137a:	80 81       	ld	r24, Z
    137c:	87 7f       	andi	r24, 0xF7	; 247
    137e:	8c 93       	st	X, r24
		MCUCR = (MCUCR & (0xF3))|(((INT_configTypePtr->edge)<<2)  & (0x0C)) ;       /*edge insert in bit2,3 in MCUCR register*/
    1380:	a5 e5       	ldi	r26, 0x55	; 85
    1382:	b0 e0       	ldi	r27, 0x00	; 0
    1384:	e5 e5       	ldi	r30, 0x55	; 85
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	80 81       	ld	r24, Z
    138a:	28 2f       	mov	r18, r24
    138c:	23 7f       	andi	r18, 0xF3	; 243
    138e:	e9 81       	ldd	r30, Y+1	; 0x01
    1390:	fa 81       	ldd	r31, Y+2	; 0x02
    1392:	81 81       	ldd	r24, Z+1	; 0x01
    1394:	88 2f       	mov	r24, r24
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	88 0f       	add	r24, r24
    139a:	99 1f       	adc	r25, r25
    139c:	88 0f       	add	r24, r24
    139e:	99 1f       	adc	r25, r25
    13a0:	8c 70       	andi	r24, 0x0C	; 12
    13a2:	82 2b       	or	r24, r18
    13a4:	8c 93       	st	X, r24
    13a6:	19 c0       	rjmp	.+50     	; 0x13da <Interrupt_init+0xe2>
	}
	else if(INT_configTypePtr->number == INT_2)
    13a8:	e9 81       	ldd	r30, Y+1	; 0x01
    13aa:	fa 81       	ldd	r31, Y+2	; 0x02
    13ac:	80 81       	ld	r24, Z
    13ae:	82 30       	cpi	r24, 0x02	; 2
    13b0:	a1 f4       	brne	.+40     	; 0x13da <Interrupt_init+0xe2>
	{
		CLEAR_BIT(DDRB,PB2);                                                  /*set PB2 as input pin*/
    13b2:	a7 e3       	ldi	r26, 0x37	; 55
    13b4:	b0 e0       	ldi	r27, 0x00	; 0
    13b6:	e7 e3       	ldi	r30, 0x37	; 55
    13b8:	f0 e0       	ldi	r31, 0x00	; 0
    13ba:	80 81       	ld	r24, Z
    13bc:	8b 7f       	andi	r24, 0xFB	; 251
    13be:	8c 93       	st	X, r24
		MCUCSR = (MCUCSR & (0xFB))|(INT_configTypePtr->edge  & (0x40)) ;       /*edge insert in  bit 6 in MCUCSR register*/
    13c0:	a4 e5       	ldi	r26, 0x54	; 84
    13c2:	b0 e0       	ldi	r27, 0x00	; 0
    13c4:	e4 e5       	ldi	r30, 0x54	; 84
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	80 81       	ld	r24, Z
    13ca:	98 2f       	mov	r25, r24
    13cc:	9b 7f       	andi	r25, 0xFB	; 251
    13ce:	e9 81       	ldd	r30, Y+1	; 0x01
    13d0:	fa 81       	ldd	r31, Y+2	; 0x02
    13d2:	81 81       	ldd	r24, Z+1	; 0x01
    13d4:	80 74       	andi	r24, 0x40	; 64
    13d6:	89 2b       	or	r24, r25
    13d8:	8c 93       	st	X, r24
	}

}
    13da:	0f 90       	pop	r0
    13dc:	0f 90       	pop	r0
    13de:	cf 91       	pop	r28
    13e0:	df 91       	pop	r29
    13e2:	08 95       	ret

000013e4 <INT0_setEdge>:

void INT0_setEdge(Int_edge edge){
    13e4:	df 93       	push	r29
    13e6:	cf 93       	push	r28
    13e8:	0f 92       	push	r0
    13ea:	cd b7       	in	r28, 0x3d	; 61
    13ec:	de b7       	in	r29, 0x3e	; 62
    13ee:	89 83       	std	Y+1, r24	; 0x01
 MCUCR = (MCUCR & (0xFC))|(edge  & (0x03)) ;       /*edge insert in LS 2 bits in MCUCR register*/
    13f0:	a5 e5       	ldi	r26, 0x55	; 85
    13f2:	b0 e0       	ldi	r27, 0x00	; 0
    13f4:	e5 e5       	ldi	r30, 0x55	; 85
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	80 81       	ld	r24, Z
    13fa:	98 2f       	mov	r25, r24
    13fc:	9c 7f       	andi	r25, 0xFC	; 252
    13fe:	89 81       	ldd	r24, Y+1	; 0x01
    1400:	83 70       	andi	r24, 0x03	; 3
    1402:	89 2b       	or	r24, r25
    1404:	8c 93       	st	X, r24

}
    1406:	0f 90       	pop	r0
    1408:	cf 91       	pop	r28
    140a:	df 91       	pop	r29
    140c:	08 95       	ret

0000140e <INT1_setEdge>:

void INT1_setEdge(Int_edge edge){
    140e:	df 93       	push	r29
    1410:	cf 93       	push	r28
    1412:	0f 92       	push	r0
    1414:	cd b7       	in	r28, 0x3d	; 61
    1416:	de b7       	in	r29, 0x3e	; 62
    1418:	89 83       	std	Y+1, r24	; 0x01
	MCUCR |= (MCUCR & (0xFC))|( (edge<<2)  & (0x03)) ;       /*edge insert in bit2,3 in MCUCR register*/
    141a:	a5 e5       	ldi	r26, 0x55	; 85
    141c:	b0 e0       	ldi	r27, 0x00	; 0
    141e:	e5 e5       	ldi	r30, 0x55	; 85
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	80 81       	ld	r24, Z
    1424:	98 2f       	mov	r25, r24
    1426:	e5 e5       	ldi	r30, 0x55	; 85
    1428:	f0 e0       	ldi	r31, 0x00	; 0
    142a:	80 81       	ld	r24, Z
    142c:	8c 7f       	andi	r24, 0xFC	; 252
    142e:	89 2b       	or	r24, r25
    1430:	8c 93       	st	X, r24
}
    1432:	0f 90       	pop	r0
    1434:	cf 91       	pop	r28
    1436:	df 91       	pop	r29
    1438:	08 95       	ret

0000143a <INT2_setEdge>:


void INT2_setEdge(Int_edge edge){
    143a:	df 93       	push	r29
    143c:	cf 93       	push	r28
    143e:	0f 92       	push	r0
    1440:	cd b7       	in	r28, 0x3d	; 61
    1442:	de b7       	in	r29, 0x3e	; 62
    1444:	89 83       	std	Y+1, r24	; 0x01
	MCUCSR |= (MCUCSR & (0xBF))|( (edge-2)<<6  & (0x40)) ;       /*edge insert in bit6 in MCUCSR register*/
    1446:	a4 e5       	ldi	r26, 0x54	; 84
    1448:	b0 e0       	ldi	r27, 0x00	; 0
    144a:	e4 e5       	ldi	r30, 0x54	; 84
    144c:	f0 e0       	ldi	r31, 0x00	; 0
    144e:	80 81       	ld	r24, Z
    1450:	38 2f       	mov	r19, r24
    1452:	e4 e5       	ldi	r30, 0x54	; 84
    1454:	f0 e0       	ldi	r31, 0x00	; 0
    1456:	80 81       	ld	r24, Z
    1458:	28 2f       	mov	r18, r24
    145a:	2f 7b       	andi	r18, 0xBF	; 191
    145c:	89 81       	ldd	r24, Y+1	; 0x01
    145e:	88 2f       	mov	r24, r24
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	02 97       	sbiw	r24, 0x02	; 2
    1464:	00 24       	eor	r0, r0
    1466:	96 95       	lsr	r25
    1468:	87 95       	ror	r24
    146a:	07 94       	ror	r0
    146c:	96 95       	lsr	r25
    146e:	87 95       	ror	r24
    1470:	07 94       	ror	r0
    1472:	98 2f       	mov	r25, r24
    1474:	80 2d       	mov	r24, r0
    1476:	80 74       	andi	r24, 0x40	; 64
    1478:	82 2b       	or	r24, r18
    147a:	83 2b       	or	r24, r19
    147c:	8c 93       	st	X, r24
}
    147e:	0f 90       	pop	r0
    1480:	cf 91       	pop	r28
    1482:	df 91       	pop	r29
    1484:	08 95       	ret

00001486 <INT0_setCallBack>:


void INT0_setCallBack(void(*a_ptr)(void)){
    1486:	df 93       	push	r29
    1488:	cf 93       	push	r28
    148a:	00 d0       	rcall	.+0      	; 0x148c <INT0_setCallBack+0x6>
    148c:	cd b7       	in	r28, 0x3d	; 61
    148e:	de b7       	in	r29, 0x3e	; 62
    1490:	9a 83       	std	Y+2, r25	; 0x02
    1492:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_INT0_callBackPtr = a_ptr;
    1494:	89 81       	ldd	r24, Y+1	; 0x01
    1496:	9a 81       	ldd	r25, Y+2	; 0x02
    1498:	90 93 0e 01 	sts	0x010E, r25
    149c:	80 93 0d 01 	sts	0x010D, r24
}
    14a0:	0f 90       	pop	r0
    14a2:	0f 90       	pop	r0
    14a4:	cf 91       	pop	r28
    14a6:	df 91       	pop	r29
    14a8:	08 95       	ret

000014aa <INT1_setCallBack>:
void INT1_setCallBack(void(*a_ptr)(void)){
    14aa:	df 93       	push	r29
    14ac:	cf 93       	push	r28
    14ae:	00 d0       	rcall	.+0      	; 0x14b0 <INT1_setCallBack+0x6>
    14b0:	cd b7       	in	r28, 0x3d	; 61
    14b2:	de b7       	in	r29, 0x3e	; 62
    14b4:	9a 83       	std	Y+2, r25	; 0x02
    14b6:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_INT1_callBackPtr = a_ptr;
    14b8:	89 81       	ldd	r24, Y+1	; 0x01
    14ba:	9a 81       	ldd	r25, Y+2	; 0x02
    14bc:	90 93 10 01 	sts	0x0110, r25
    14c0:	80 93 0f 01 	sts	0x010F, r24
}
    14c4:	0f 90       	pop	r0
    14c6:	0f 90       	pop	r0
    14c8:	cf 91       	pop	r28
    14ca:	df 91       	pop	r29
    14cc:	08 95       	ret

000014ce <INT2_setCallBack>:
void INT2_setCallBack(void(*a_ptr)(void)){
    14ce:	df 93       	push	r29
    14d0:	cf 93       	push	r28
    14d2:	00 d0       	rcall	.+0      	; 0x14d4 <INT2_setCallBack+0x6>
    14d4:	cd b7       	in	r28, 0x3d	; 61
    14d6:	de b7       	in	r29, 0x3e	; 62
    14d8:	9a 83       	std	Y+2, r25	; 0x02
    14da:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_INT2_callBackPtr = a_ptr;
    14dc:	89 81       	ldd	r24, Y+1	; 0x01
    14de:	9a 81       	ldd	r25, Y+2	; 0x02
    14e0:	90 93 12 01 	sts	0x0112, r25
    14e4:	80 93 11 01 	sts	0x0111, r24
}
    14e8:	0f 90       	pop	r0
    14ea:	0f 90       	pop	r0
    14ec:	cf 91       	pop	r28
    14ee:	df 91       	pop	r29
    14f0:	08 95       	ret

000014f2 <INT_deinit>:

void INT_deinit(INTNumber number)
{
    14f2:	df 93       	push	r29
    14f4:	cf 93       	push	r28
    14f6:	0f 92       	push	r0
    14f8:	cd b7       	in	r28, 0x3d	; 61
    14fa:	de b7       	in	r29, 0x3e	; 62
    14fc:	89 83       	std	Y+1, r24	; 0x01
	if(number == INT_0)
    14fe:	89 81       	ldd	r24, Y+1	; 0x01
    1500:	81 30       	cpi	r24, 0x01	; 1
    1502:	79 f4       	brne	.+30     	; 0x1522 <INT_deinit+0x30>
	{
		CLEAR_BIT(GICR,INT0);
    1504:	ab e5       	ldi	r26, 0x5B	; 91
    1506:	b0 e0       	ldi	r27, 0x00	; 0
    1508:	eb e5       	ldi	r30, 0x5B	; 91
    150a:	f0 e0       	ldi	r31, 0x00	; 0
    150c:	80 81       	ld	r24, Z
    150e:	8f 7b       	andi	r24, 0xBF	; 191
    1510:	8c 93       	st	X, r24
		GICR &= ~ ((1<<ISC00) | (1<<ISC01));
    1512:	ab e5       	ldi	r26, 0x5B	; 91
    1514:	b0 e0       	ldi	r27, 0x00	; 0
    1516:	eb e5       	ldi	r30, 0x5B	; 91
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	80 81       	ld	r24, Z
    151c:	8c 7f       	andi	r24, 0xFC	; 252
    151e:	8c 93       	st	X, r24
    1520:	23 c0       	rjmp	.+70     	; 0x1568 <INT_deinit+0x76>
	}
	else if(number == INT_1)
    1522:	89 81       	ldd	r24, Y+1	; 0x01
    1524:	88 23       	and	r24, r24
    1526:	79 f4       	brne	.+30     	; 0x1546 <INT_deinit+0x54>
	{
		CLEAR_BIT(GICR,INT1);
    1528:	ab e5       	ldi	r26, 0x5B	; 91
    152a:	b0 e0       	ldi	r27, 0x00	; 0
    152c:	eb e5       	ldi	r30, 0x5B	; 91
    152e:	f0 e0       	ldi	r31, 0x00	; 0
    1530:	80 81       	ld	r24, Z
    1532:	8f 77       	andi	r24, 0x7F	; 127
    1534:	8c 93       	st	X, r24
		GICR &= ~ ((1<<ISC10) | (1<<ISC11));
    1536:	ab e5       	ldi	r26, 0x5B	; 91
    1538:	b0 e0       	ldi	r27, 0x00	; 0
    153a:	eb e5       	ldi	r30, 0x5B	; 91
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	80 81       	ld	r24, Z
    1540:	83 7f       	andi	r24, 0xF3	; 243
    1542:	8c 93       	st	X, r24
    1544:	11 c0       	rjmp	.+34     	; 0x1568 <INT_deinit+0x76>
	}
	else if(number == INT_2)
    1546:	89 81       	ldd	r24, Y+1	; 0x01
    1548:	82 30       	cpi	r24, 0x02	; 2
    154a:	71 f4       	brne	.+28     	; 0x1568 <INT_deinit+0x76>
	{
		CLEAR_BIT(GICR,INT2);
    154c:	ab e5       	ldi	r26, 0x5B	; 91
    154e:	b0 e0       	ldi	r27, 0x00	; 0
    1550:	eb e5       	ldi	r30, 0x5B	; 91
    1552:	f0 e0       	ldi	r31, 0x00	; 0
    1554:	80 81       	ld	r24, Z
    1556:	8f 7d       	andi	r24, 0xDF	; 223
    1558:	8c 93       	st	X, r24
		CLEAR_BIT(MCUCSR,ISC2);
    155a:	a4 e5       	ldi	r26, 0x54	; 84
    155c:	b0 e0       	ldi	r27, 0x00	; 0
    155e:	e4 e5       	ldi	r30, 0x54	; 84
    1560:	f0 e0       	ldi	r31, 0x00	; 0
    1562:	80 81       	ld	r24, Z
    1564:	8f 7b       	andi	r24, 0xBF	; 191
    1566:	8c 93       	st	X, r24
	}
}
    1568:	0f 90       	pop	r0
    156a:	cf 91       	pop	r28
    156c:	df 91       	pop	r29
    156e:	08 95       	ret

00001570 <KeyPad_getPressedKey>:
#endif

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void){
    1570:	df 93       	push	r29
    1572:	cf 93       	push	r28
    1574:	00 d0       	rcall	.+0      	; 0x1576 <KeyPad_getPressedKey+0x6>
    1576:	cd b7       	in	r28, 0x3d	; 61
    1578:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    157a:	1a 82       	std	Y+2, r1	; 0x02
    157c:	4c c0       	rjmp	.+152    	; 0x1616 <KeyPad_getPressedKey+0xa6>
		{
			/* 
			 * each time only one of the column pins will be output and 
			 * the rest will be input pins include the row pins 
			 */ 
			KEYPAD_PORT_DIR = (0b00010000<<col); 
    157e:	ea e3       	ldi	r30, 0x3A	; 58
    1580:	f0 e0       	ldi	r31, 0x00	; 0
    1582:	8a 81       	ldd	r24, Y+2	; 0x02
    1584:	28 2f       	mov	r18, r24
    1586:	30 e0       	ldi	r19, 0x00	; 0
    1588:	80 e1       	ldi	r24, 0x10	; 16
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	02 c0       	rjmp	.+4      	; 0x1592 <KeyPad_getPressedKey+0x22>
    158e:	88 0f       	add	r24, r24
    1590:	99 1f       	adc	r25, r25
    1592:	2a 95       	dec	r18
    1594:	e2 f7       	brpl	.-8      	; 0x158e <KeyPad_getPressedKey+0x1e>
    1596:	80 83       	st	Z, r24
			
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col)); 
    1598:	eb e3       	ldi	r30, 0x3B	; 59
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	8a 81       	ldd	r24, Y+2	; 0x02
    159e:	28 2f       	mov	r18, r24
    15a0:	30 e0       	ldi	r19, 0x00	; 0
    15a2:	80 e1       	ldi	r24, 0x10	; 16
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	02 2e       	mov	r0, r18
    15a8:	02 c0       	rjmp	.+4      	; 0x15ae <KeyPad_getPressedKey+0x3e>
    15aa:	88 0f       	add	r24, r24
    15ac:	99 1f       	adc	r25, r25
    15ae:	0a 94       	dec	r0
    15b0:	e2 f7       	brpl	.-8      	; 0x15aa <KeyPad_getPressedKey+0x3a>
    15b2:	80 95       	com	r24
    15b4:	80 83       	st	Z, r24
			for(row=0;row<N_row;row++) /* loop for rows */
    15b6:	19 82       	std	Y+1, r1	; 0x01
    15b8:	28 c0       	rjmp	.+80     	; 0x160a <KeyPad_getPressedKey+0x9a>
			{
				if(BIT_IS_CLEAR(KEYPAD_PORT_IN,row)) /* if the switch is press in this row */ 
    15ba:	e9 e3       	ldi	r30, 0x39	; 57
    15bc:	f0 e0       	ldi	r31, 0x00	; 0
    15be:	80 81       	ld	r24, Z
    15c0:	28 2f       	mov	r18, r24
    15c2:	30 e0       	ldi	r19, 0x00	; 0
    15c4:	89 81       	ldd	r24, Y+1	; 0x01
    15c6:	88 2f       	mov	r24, r24
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	a9 01       	movw	r20, r18
    15cc:	02 c0       	rjmp	.+4      	; 0x15d2 <KeyPad_getPressedKey+0x62>
    15ce:	55 95       	asr	r21
    15d0:	47 95       	ror	r20
    15d2:	8a 95       	dec	r24
    15d4:	e2 f7       	brpl	.-8      	; 0x15ce <KeyPad_getPressedKey+0x5e>
    15d6:	ca 01       	movw	r24, r20
    15d8:	81 70       	andi	r24, 0x01	; 1
    15da:	90 70       	andi	r25, 0x00	; 0
    15dc:	00 97       	sbiw	r24, 0x00	; 0
    15de:	91 f4       	brne	.+36     	; 0x1604 <KeyPad_getPressedKey+0x94>
				{
					#if (N_col == 3)  
						return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1); 
					#elif (N_col == 4)
						return KeyPad_4x4_adjustKeyNumber((row*N_col)+col+1);
    15e0:	89 81       	ldd	r24, Y+1	; 0x01
    15e2:	88 2f       	mov	r24, r24
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	88 0f       	add	r24, r24
    15e8:	99 1f       	adc	r25, r25
    15ea:	88 0f       	add	r24, r24
    15ec:	99 1f       	adc	r25, r25
    15ee:	98 2f       	mov	r25, r24
    15f0:	8a 81       	ldd	r24, Y+2	; 0x02
    15f2:	89 0f       	add	r24, r25
    15f4:	8f 5f       	subi	r24, 0xFF	; 255
    15f6:	0e 94 10 0b 	call	0x1620	; 0x1620 <KeyPad_4x4_adjustKeyNumber>
					#endif				
				}
			}
		}
	}	
}
    15fa:	0f 90       	pop	r0
    15fc:	0f 90       	pop	r0
    15fe:	cf 91       	pop	r28
    1600:	df 91       	pop	r29
    1602:	08 95       	ret
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col)); 
			for(row=0;row<N_row;row++) /* loop for rows */
    1604:	89 81       	ldd	r24, Y+1	; 0x01
    1606:	8f 5f       	subi	r24, 0xFF	; 255
    1608:	89 83       	std	Y+1, r24	; 0x01
    160a:	89 81       	ldd	r24, Y+1	; 0x01
    160c:	84 30       	cpi	r24, 0x04	; 4
    160e:	a8 f2       	brcs	.-86     	; 0x15ba <KeyPad_getPressedKey+0x4a>
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void){
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    1610:	8a 81       	ldd	r24, Y+2	; 0x02
    1612:	8f 5f       	subi	r24, 0xFF	; 255
    1614:	8a 83       	std	Y+2, r24	; 0x02
    1616:	8a 81       	ldd	r24, Y+2	; 0x02
    1618:	84 30       	cpi	r24, 0x04	; 4
    161a:	08 f4       	brcc	.+2      	; 0x161e <KeyPad_getPressedKey+0xae>
    161c:	b0 cf       	rjmp	.-160    	; 0x157e <KeyPad_getPressedKey+0xe>
    161e:	ad cf       	rjmp	.-166    	; 0x157a <KeyPad_getPressedKey+0xa>

00001620 <KeyPad_4x4_adjustKeyNumber>:
} 

#elif (N_col == 4)
 
static uint8 KeyPad_4x4_adjustKeyNumber(uint8 button_number)
{
    1620:	df 93       	push	r29
    1622:	cf 93       	push	r28
    1624:	00 d0       	rcall	.+0      	; 0x1626 <KeyPad_4x4_adjustKeyNumber+0x6>
    1626:	00 d0       	rcall	.+0      	; 0x1628 <KeyPad_4x4_adjustKeyNumber+0x8>
    1628:	cd b7       	in	r28, 0x3d	; 61
    162a:	de b7       	in	r29, 0x3e	; 62
    162c:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number)
    162e:	89 81       	ldd	r24, Y+1	; 0x01
    1630:	28 2f       	mov	r18, r24
    1632:	30 e0       	ldi	r19, 0x00	; 0
    1634:	3c 83       	std	Y+4, r19	; 0x04
    1636:	2b 83       	std	Y+3, r18	; 0x03
    1638:	8b 81       	ldd	r24, Y+3	; 0x03
    163a:	9c 81       	ldd	r25, Y+4	; 0x04
    163c:	88 30       	cpi	r24, 0x08	; 8
    163e:	91 05       	cpc	r25, r1
    1640:	09 f4       	brne	.+2      	; 0x1644 <KeyPad_4x4_adjustKeyNumber+0x24>
    1642:	70 c0       	rjmp	.+224    	; 0x1724 <KeyPad_4x4_adjustKeyNumber+0x104>
    1644:	2b 81       	ldd	r18, Y+3	; 0x03
    1646:	3c 81       	ldd	r19, Y+4	; 0x04
    1648:	29 30       	cpi	r18, 0x09	; 9
    164a:	31 05       	cpc	r19, r1
    164c:	5c f5       	brge	.+86     	; 0x16a4 <KeyPad_4x4_adjustKeyNumber+0x84>
    164e:	8b 81       	ldd	r24, Y+3	; 0x03
    1650:	9c 81       	ldd	r25, Y+4	; 0x04
    1652:	84 30       	cpi	r24, 0x04	; 4
    1654:	91 05       	cpc	r25, r1
    1656:	09 f4       	brne	.+2      	; 0x165a <KeyPad_4x4_adjustKeyNumber+0x3a>
    1658:	59 c0       	rjmp	.+178    	; 0x170c <KeyPad_4x4_adjustKeyNumber+0xec>
    165a:	2b 81       	ldd	r18, Y+3	; 0x03
    165c:	3c 81       	ldd	r19, Y+4	; 0x04
    165e:	25 30       	cpi	r18, 0x05	; 5
    1660:	31 05       	cpc	r19, r1
    1662:	9c f4       	brge	.+38     	; 0x168a <KeyPad_4x4_adjustKeyNumber+0x6a>
    1664:	8b 81       	ldd	r24, Y+3	; 0x03
    1666:	9c 81       	ldd	r25, Y+4	; 0x04
    1668:	82 30       	cpi	r24, 0x02	; 2
    166a:	91 05       	cpc	r25, r1
    166c:	09 f4       	brne	.+2      	; 0x1670 <KeyPad_4x4_adjustKeyNumber+0x50>
    166e:	48 c0       	rjmp	.+144    	; 0x1700 <KeyPad_4x4_adjustKeyNumber+0xe0>
    1670:	2b 81       	ldd	r18, Y+3	; 0x03
    1672:	3c 81       	ldd	r19, Y+4	; 0x04
    1674:	23 30       	cpi	r18, 0x03	; 3
    1676:	31 05       	cpc	r19, r1
    1678:	0c f0       	brlt	.+2      	; 0x167c <KeyPad_4x4_adjustKeyNumber+0x5c>
    167a:	45 c0       	rjmp	.+138    	; 0x1706 <KeyPad_4x4_adjustKeyNumber+0xe6>
    167c:	8b 81       	ldd	r24, Y+3	; 0x03
    167e:	9c 81       	ldd	r25, Y+4	; 0x04
    1680:	81 30       	cpi	r24, 0x01	; 1
    1682:	91 05       	cpc	r25, r1
    1684:	09 f4       	brne	.+2      	; 0x1688 <KeyPad_4x4_adjustKeyNumber+0x68>
    1686:	39 c0       	rjmp	.+114    	; 0x16fa <KeyPad_4x4_adjustKeyNumber+0xda>
    1688:	67 c0       	rjmp	.+206    	; 0x1758 <KeyPad_4x4_adjustKeyNumber+0x138>
    168a:	2b 81       	ldd	r18, Y+3	; 0x03
    168c:	3c 81       	ldd	r19, Y+4	; 0x04
    168e:	26 30       	cpi	r18, 0x06	; 6
    1690:	31 05       	cpc	r19, r1
    1692:	09 f4       	brne	.+2      	; 0x1696 <KeyPad_4x4_adjustKeyNumber+0x76>
    1694:	41 c0       	rjmp	.+130    	; 0x1718 <KeyPad_4x4_adjustKeyNumber+0xf8>
    1696:	8b 81       	ldd	r24, Y+3	; 0x03
    1698:	9c 81       	ldd	r25, Y+4	; 0x04
    169a:	87 30       	cpi	r24, 0x07	; 7
    169c:	91 05       	cpc	r25, r1
    169e:	0c f0       	brlt	.+2      	; 0x16a2 <KeyPad_4x4_adjustKeyNumber+0x82>
    16a0:	3e c0       	rjmp	.+124    	; 0x171e <KeyPad_4x4_adjustKeyNumber+0xfe>
    16a2:	37 c0       	rjmp	.+110    	; 0x1712 <KeyPad_4x4_adjustKeyNumber+0xf2>
    16a4:	2b 81       	ldd	r18, Y+3	; 0x03
    16a6:	3c 81       	ldd	r19, Y+4	; 0x04
    16a8:	2c 30       	cpi	r18, 0x0C	; 12
    16aa:	31 05       	cpc	r19, r1
    16ac:	09 f4       	brne	.+2      	; 0x16b0 <KeyPad_4x4_adjustKeyNumber+0x90>
    16ae:	46 c0       	rjmp	.+140    	; 0x173c <KeyPad_4x4_adjustKeyNumber+0x11c>
    16b0:	8b 81       	ldd	r24, Y+3	; 0x03
    16b2:	9c 81       	ldd	r25, Y+4	; 0x04
    16b4:	8d 30       	cpi	r24, 0x0D	; 13
    16b6:	91 05       	cpc	r25, r1
    16b8:	5c f4       	brge	.+22     	; 0x16d0 <KeyPad_4x4_adjustKeyNumber+0xb0>
    16ba:	2b 81       	ldd	r18, Y+3	; 0x03
    16bc:	3c 81       	ldd	r19, Y+4	; 0x04
    16be:	2a 30       	cpi	r18, 0x0A	; 10
    16c0:	31 05       	cpc	r19, r1
    16c2:	b1 f1       	breq	.+108    	; 0x1730 <KeyPad_4x4_adjustKeyNumber+0x110>
    16c4:	8b 81       	ldd	r24, Y+3	; 0x03
    16c6:	9c 81       	ldd	r25, Y+4	; 0x04
    16c8:	8b 30       	cpi	r24, 0x0B	; 11
    16ca:	91 05       	cpc	r25, r1
    16cc:	a4 f5       	brge	.+104    	; 0x1736 <KeyPad_4x4_adjustKeyNumber+0x116>
    16ce:	2d c0       	rjmp	.+90     	; 0x172a <KeyPad_4x4_adjustKeyNumber+0x10a>
    16d0:	2b 81       	ldd	r18, Y+3	; 0x03
    16d2:	3c 81       	ldd	r19, Y+4	; 0x04
    16d4:	2e 30       	cpi	r18, 0x0E	; 14
    16d6:	31 05       	cpc	r19, r1
    16d8:	b9 f1       	breq	.+110    	; 0x1748 <KeyPad_4x4_adjustKeyNumber+0x128>
    16da:	8b 81       	ldd	r24, Y+3	; 0x03
    16dc:	9c 81       	ldd	r25, Y+4	; 0x04
    16de:	8e 30       	cpi	r24, 0x0E	; 14
    16e0:	91 05       	cpc	r25, r1
    16e2:	7c f1       	brlt	.+94     	; 0x1742 <KeyPad_4x4_adjustKeyNumber+0x122>
    16e4:	2b 81       	ldd	r18, Y+3	; 0x03
    16e6:	3c 81       	ldd	r19, Y+4	; 0x04
    16e8:	2f 30       	cpi	r18, 0x0F	; 15
    16ea:	31 05       	cpc	r19, r1
    16ec:	79 f1       	breq	.+94     	; 0x174c <KeyPad_4x4_adjustKeyNumber+0x12c>
    16ee:	8b 81       	ldd	r24, Y+3	; 0x03
    16f0:	9c 81       	ldd	r25, Y+4	; 0x04
    16f2:	80 31       	cpi	r24, 0x10	; 16
    16f4:	91 05       	cpc	r25, r1
    16f6:	69 f1       	breq	.+90     	; 0x1752 <KeyPad_4x4_adjustKeyNumber+0x132>
    16f8:	2f c0       	rjmp	.+94     	; 0x1758 <KeyPad_4x4_adjustKeyNumber+0x138>
	{
		case 1: return 7; 
    16fa:	97 e0       	ldi	r25, 0x07	; 7
    16fc:	9a 83       	std	Y+2, r25	; 0x02
    16fe:	2e c0       	rjmp	.+92     	; 0x175c <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 2: return 8; 
    1700:	28 e0       	ldi	r18, 0x08	; 8
    1702:	2a 83       	std	Y+2, r18	; 0x02
    1704:	2b c0       	rjmp	.+86     	; 0x175c <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 3: return 9; 
    1706:	39 e0       	ldi	r19, 0x09	; 9
    1708:	3a 83       	std	Y+2, r19	; 0x02
    170a:	28 c0       	rjmp	.+80     	; 0x175c <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 4: return '%'; // ASCII Code of %
    170c:	85 e2       	ldi	r24, 0x25	; 37
    170e:	8a 83       	std	Y+2, r24	; 0x02
    1710:	25 c0       	rjmp	.+74     	; 0x175c <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 5: return 4; 
    1712:	94 e0       	ldi	r25, 0x04	; 4
    1714:	9a 83       	std	Y+2, r25	; 0x02
    1716:	22 c0       	rjmp	.+68     	; 0x175c <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 6: return 5;
    1718:	25 e0       	ldi	r18, 0x05	; 5
    171a:	2a 83       	std	Y+2, r18	; 0x02
    171c:	1f c0       	rjmp	.+62     	; 0x175c <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 7: return 6; 
    171e:	36 e0       	ldi	r19, 0x06	; 6
    1720:	3a 83       	std	Y+2, r19	; 0x02
    1722:	1c c0       	rjmp	.+56     	; 0x175c <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 8: return '*'; /* ASCII Code of '*' */
    1724:	8a e2       	ldi	r24, 0x2A	; 42
    1726:	8a 83       	std	Y+2, r24	; 0x02
    1728:	19 c0       	rjmp	.+50     	; 0x175c <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;		
		case 9: return 1; 
    172a:	91 e0       	ldi	r25, 0x01	; 1
    172c:	9a 83       	std	Y+2, r25	; 0x02
    172e:	16 c0       	rjmp	.+44     	; 0x175c <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 10: return 2; 
    1730:	22 e0       	ldi	r18, 0x02	; 2
    1732:	2a 83       	std	Y+2, r18	; 0x02
    1734:	13 c0       	rjmp	.+38     	; 0x175c <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 11: return 3; 
    1736:	33 e0       	ldi	r19, 0x03	; 3
    1738:	3a 83       	std	Y+2, r19	; 0x02
    173a:	10 c0       	rjmp	.+32     	; 0x175c <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 12: return '-'; /* ASCII Code of '-' */
    173c:	8d e2       	ldi	r24, 0x2D	; 45
    173e:	8a 83       	std	Y+2, r24	; 0x02
    1740:	0d c0       	rjmp	.+26     	; 0x175c <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 13: return 13;  /* ASCII of Enter */
    1742:	9d e0       	ldi	r25, 0x0D	; 13
    1744:	9a 83       	std	Y+2, r25	; 0x02
    1746:	0a c0       	rjmp	.+20     	; 0x175c <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;			
		case 14: return 0; 
    1748:	1a 82       	std	Y+2, r1	; 0x02
    174a:	08 c0       	rjmp	.+16     	; 0x175c <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 15: return '='; /* ASCII Code of '=' */
    174c:	2d e3       	ldi	r18, 0x3D	; 61
    174e:	2a 83       	std	Y+2, r18	; 0x02
    1750:	05 c0       	rjmp	.+10     	; 0x175c <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 16: return '+'; /* ASCII Code of '+' */
    1752:	3b e2       	ldi	r19, 0x2B	; 43
    1754:	3a 83       	std	Y+2, r19	; 0x02
    1756:	02 c0       	rjmp	.+4      	; 0x175c <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		default: return button_number;								 						
    1758:	89 81       	ldd	r24, Y+1	; 0x01
    175a:	8a 83       	std	Y+2, r24	; 0x02
    175c:	8a 81       	ldd	r24, Y+2	; 0x02
	}
} 
    175e:	0f 90       	pop	r0
    1760:	0f 90       	pop	r0
    1762:	0f 90       	pop	r0
    1764:	0f 90       	pop	r0
    1766:	cf 91       	pop	r28
    1768:	df 91       	pop	r29
    176a:	08 95       	ret

0000176c <LCD_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
    176c:	df 93       	push	r29
    176e:	cf 93       	push	r28
    1770:	cd b7       	in	r28, 0x3d	; 61
    1772:	de b7       	in	r29, 0x3e	; 62
	LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */ 
    1774:	e4 e3       	ldi	r30, 0x34	; 52
    1776:	f0 e0       	ldi	r31, 0x00	; 0
    1778:	8f ef       	ldi	r24, 0xFF	; 255
    177a:	80 83       	st	Z, r24
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
    177c:	a1 e3       	ldi	r26, 0x31	; 49
    177e:	b0 e0       	ldi	r27, 0x00	; 0
    1780:	e1 e3       	ldi	r30, 0x31	; 49
    1782:	f0 e0       	ldi	r31, 0x00	; 0
    1784:	80 81       	ld	r24, Z
    1786:	80 6b       	ori	r24, 0xB0	; 176
    1788:	8c 93       	st	X, r24
	
	LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    178a:	88 e3       	ldi	r24, 0x38	; 56
    178c:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <LCD_sendCommand>
	
	LCD_sendCommand(CURSOR_OFF); /* cursor off */
    1790:	8c e0       	ldi	r24, 0x0C	; 12
    1792:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <LCD_sendCommand>
	
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
    1796:	81 e0       	ldi	r24, 0x01	; 1
    1798:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <LCD_sendCommand>
}
    179c:	cf 91       	pop	r28
    179e:	df 91       	pop	r29
    17a0:	08 95       	ret

000017a2 <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
    17a2:	df 93       	push	r29
    17a4:	cf 93       	push	r28
    17a6:	cd b7       	in	r28, 0x3d	; 61
    17a8:	de b7       	in	r29, 0x3e	; 62
    17aa:	e9 97       	sbiw	r28, 0x39	; 57
    17ac:	0f b6       	in	r0, 0x3f	; 63
    17ae:	f8 94       	cli
    17b0:	de bf       	out	0x3e, r29	; 62
    17b2:	0f be       	out	0x3f, r0	; 63
    17b4:	cd bf       	out	0x3d, r28	; 61
    17b6:	89 af       	std	Y+57, r24	; 0x39
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
    17b8:	a2 e3       	ldi	r26, 0x32	; 50
    17ba:	b0 e0       	ldi	r27, 0x00	; 0
    17bc:	e2 e3       	ldi	r30, 0x32	; 50
    17be:	f0 e0       	ldi	r31, 0x00	; 0
    17c0:	80 81       	ld	r24, Z
    17c2:	8f 7e       	andi	r24, 0xEF	; 239
    17c4:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    17c6:	a2 e3       	ldi	r26, 0x32	; 50
    17c8:	b0 e0       	ldi	r27, 0x00	; 0
    17ca:	e2 e3       	ldi	r30, 0x32	; 50
    17cc:	f0 e0       	ldi	r31, 0x00	; 0
    17ce:	80 81       	ld	r24, Z
    17d0:	8f 7d       	andi	r24, 0xDF	; 223
    17d2:	8c 93       	st	X, r24
    17d4:	80 e0       	ldi	r24, 0x00	; 0
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	a0 e8       	ldi	r26, 0x80	; 128
    17da:	bf e3       	ldi	r27, 0x3F	; 63
    17dc:	8d ab       	std	Y+53, r24	; 0x35
    17de:	9e ab       	std	Y+54, r25	; 0x36
    17e0:	af ab       	std	Y+55, r26	; 0x37
    17e2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17e4:	6d a9       	ldd	r22, Y+53	; 0x35
    17e6:	7e a9       	ldd	r23, Y+54	; 0x36
    17e8:	8f a9       	ldd	r24, Y+55	; 0x37
    17ea:	98 ad       	ldd	r25, Y+56	; 0x38
    17ec:	20 e0       	ldi	r18, 0x00	; 0
    17ee:	30 e0       	ldi	r19, 0x00	; 0
    17f0:	4a ef       	ldi	r20, 0xFA	; 250
    17f2:	54 e4       	ldi	r21, 0x44	; 68
    17f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17f8:	dc 01       	movw	r26, r24
    17fa:	cb 01       	movw	r24, r22
    17fc:	89 ab       	std	Y+49, r24	; 0x31
    17fe:	9a ab       	std	Y+50, r25	; 0x32
    1800:	ab ab       	std	Y+51, r26	; 0x33
    1802:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1804:	69 a9       	ldd	r22, Y+49	; 0x31
    1806:	7a a9       	ldd	r23, Y+50	; 0x32
    1808:	8b a9       	ldd	r24, Y+51	; 0x33
    180a:	9c a9       	ldd	r25, Y+52	; 0x34
    180c:	20 e0       	ldi	r18, 0x00	; 0
    180e:	30 e0       	ldi	r19, 0x00	; 0
    1810:	40 e8       	ldi	r20, 0x80	; 128
    1812:	5f e3       	ldi	r21, 0x3F	; 63
    1814:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1818:	88 23       	and	r24, r24
    181a:	2c f4       	brge	.+10     	; 0x1826 <LCD_sendCommand+0x84>
		__ticks = 1;
    181c:	81 e0       	ldi	r24, 0x01	; 1
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	98 ab       	std	Y+48, r25	; 0x30
    1822:	8f a7       	std	Y+47, r24	; 0x2f
    1824:	3f c0       	rjmp	.+126    	; 0x18a4 <LCD_sendCommand+0x102>
	else if (__tmp > 65535)
    1826:	69 a9       	ldd	r22, Y+49	; 0x31
    1828:	7a a9       	ldd	r23, Y+50	; 0x32
    182a:	8b a9       	ldd	r24, Y+51	; 0x33
    182c:	9c a9       	ldd	r25, Y+52	; 0x34
    182e:	20 e0       	ldi	r18, 0x00	; 0
    1830:	3f ef       	ldi	r19, 0xFF	; 255
    1832:	4f e7       	ldi	r20, 0x7F	; 127
    1834:	57 e4       	ldi	r21, 0x47	; 71
    1836:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    183a:	18 16       	cp	r1, r24
    183c:	4c f5       	brge	.+82     	; 0x1890 <LCD_sendCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    183e:	6d a9       	ldd	r22, Y+53	; 0x35
    1840:	7e a9       	ldd	r23, Y+54	; 0x36
    1842:	8f a9       	ldd	r24, Y+55	; 0x37
    1844:	98 ad       	ldd	r25, Y+56	; 0x38
    1846:	20 e0       	ldi	r18, 0x00	; 0
    1848:	30 e0       	ldi	r19, 0x00	; 0
    184a:	40 e2       	ldi	r20, 0x20	; 32
    184c:	51 e4       	ldi	r21, 0x41	; 65
    184e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1852:	dc 01       	movw	r26, r24
    1854:	cb 01       	movw	r24, r22
    1856:	bc 01       	movw	r22, r24
    1858:	cd 01       	movw	r24, r26
    185a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    185e:	dc 01       	movw	r26, r24
    1860:	cb 01       	movw	r24, r22
    1862:	98 ab       	std	Y+48, r25	; 0x30
    1864:	8f a7       	std	Y+47, r24	; 0x2f
    1866:	0f c0       	rjmp	.+30     	; 0x1886 <LCD_sendCommand+0xe4>
    1868:	88 ec       	ldi	r24, 0xC8	; 200
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	9e a7       	std	Y+46, r25	; 0x2e
    186e:	8d a7       	std	Y+45, r24	; 0x2d
    1870:	8d a5       	ldd	r24, Y+45	; 0x2d
    1872:	9e a5       	ldd	r25, Y+46	; 0x2e
    1874:	01 97       	sbiw	r24, 0x01	; 1
    1876:	f1 f7       	brne	.-4      	; 0x1874 <LCD_sendCommand+0xd2>
    1878:	9e a7       	std	Y+46, r25	; 0x2e
    187a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    187c:	8f a5       	ldd	r24, Y+47	; 0x2f
    187e:	98 a9       	ldd	r25, Y+48	; 0x30
    1880:	01 97       	sbiw	r24, 0x01	; 1
    1882:	98 ab       	std	Y+48, r25	; 0x30
    1884:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1886:	8f a5       	ldd	r24, Y+47	; 0x2f
    1888:	98 a9       	ldd	r25, Y+48	; 0x30
    188a:	00 97       	sbiw	r24, 0x00	; 0
    188c:	69 f7       	brne	.-38     	; 0x1868 <LCD_sendCommand+0xc6>
    188e:	14 c0       	rjmp	.+40     	; 0x18b8 <LCD_sendCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1890:	69 a9       	ldd	r22, Y+49	; 0x31
    1892:	7a a9       	ldd	r23, Y+50	; 0x32
    1894:	8b a9       	ldd	r24, Y+51	; 0x33
    1896:	9c a9       	ldd	r25, Y+52	; 0x34
    1898:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    189c:	dc 01       	movw	r26, r24
    189e:	cb 01       	movw	r24, r22
    18a0:	98 ab       	std	Y+48, r25	; 0x30
    18a2:	8f a7       	std	Y+47, r24	; 0x2f
    18a4:	8f a5       	ldd	r24, Y+47	; 0x2f
    18a6:	98 a9       	ldd	r25, Y+48	; 0x30
    18a8:	9c a7       	std	Y+44, r25	; 0x2c
    18aa:	8b a7       	std	Y+43, r24	; 0x2b
    18ac:	8b a5       	ldd	r24, Y+43	; 0x2b
    18ae:	9c a5       	ldd	r25, Y+44	; 0x2c
    18b0:	01 97       	sbiw	r24, 0x01	; 1
    18b2:	f1 f7       	brne	.-4      	; 0x18b0 <LCD_sendCommand+0x10e>
    18b4:	9c a7       	std	Y+44, r25	; 0x2c
    18b6:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    18b8:	a2 e3       	ldi	r26, 0x32	; 50
    18ba:	b0 e0       	ldi	r27, 0x00	; 0
    18bc:	e2 e3       	ldi	r30, 0x32	; 50
    18be:	f0 e0       	ldi	r31, 0x00	; 0
    18c0:	80 81       	ld	r24, Z
    18c2:	80 68       	ori	r24, 0x80	; 128
    18c4:	8c 93       	st	X, r24
    18c6:	80 e0       	ldi	r24, 0x00	; 0
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	a0 e8       	ldi	r26, 0x80	; 128
    18cc:	bf e3       	ldi	r27, 0x3F	; 63
    18ce:	8f a3       	std	Y+39, r24	; 0x27
    18d0:	98 a7       	std	Y+40, r25	; 0x28
    18d2:	a9 a7       	std	Y+41, r26	; 0x29
    18d4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18d6:	6f a1       	ldd	r22, Y+39	; 0x27
    18d8:	78 a5       	ldd	r23, Y+40	; 0x28
    18da:	89 a5       	ldd	r24, Y+41	; 0x29
    18dc:	9a a5       	ldd	r25, Y+42	; 0x2a
    18de:	20 e0       	ldi	r18, 0x00	; 0
    18e0:	30 e0       	ldi	r19, 0x00	; 0
    18e2:	4a ef       	ldi	r20, 0xFA	; 250
    18e4:	54 e4       	ldi	r21, 0x44	; 68
    18e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18ea:	dc 01       	movw	r26, r24
    18ec:	cb 01       	movw	r24, r22
    18ee:	8b a3       	std	Y+35, r24	; 0x23
    18f0:	9c a3       	std	Y+36, r25	; 0x24
    18f2:	ad a3       	std	Y+37, r26	; 0x25
    18f4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    18f6:	6b a1       	ldd	r22, Y+35	; 0x23
    18f8:	7c a1       	ldd	r23, Y+36	; 0x24
    18fa:	8d a1       	ldd	r24, Y+37	; 0x25
    18fc:	9e a1       	ldd	r25, Y+38	; 0x26
    18fe:	20 e0       	ldi	r18, 0x00	; 0
    1900:	30 e0       	ldi	r19, 0x00	; 0
    1902:	40 e8       	ldi	r20, 0x80	; 128
    1904:	5f e3       	ldi	r21, 0x3F	; 63
    1906:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    190a:	88 23       	and	r24, r24
    190c:	2c f4       	brge	.+10     	; 0x1918 <LCD_sendCommand+0x176>
		__ticks = 1;
    190e:	81 e0       	ldi	r24, 0x01	; 1
    1910:	90 e0       	ldi	r25, 0x00	; 0
    1912:	9a a3       	std	Y+34, r25	; 0x22
    1914:	89 a3       	std	Y+33, r24	; 0x21
    1916:	3f c0       	rjmp	.+126    	; 0x1996 <LCD_sendCommand+0x1f4>
	else if (__tmp > 65535)
    1918:	6b a1       	ldd	r22, Y+35	; 0x23
    191a:	7c a1       	ldd	r23, Y+36	; 0x24
    191c:	8d a1       	ldd	r24, Y+37	; 0x25
    191e:	9e a1       	ldd	r25, Y+38	; 0x26
    1920:	20 e0       	ldi	r18, 0x00	; 0
    1922:	3f ef       	ldi	r19, 0xFF	; 255
    1924:	4f e7       	ldi	r20, 0x7F	; 127
    1926:	57 e4       	ldi	r21, 0x47	; 71
    1928:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    192c:	18 16       	cp	r1, r24
    192e:	4c f5       	brge	.+82     	; 0x1982 <LCD_sendCommand+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1930:	6f a1       	ldd	r22, Y+39	; 0x27
    1932:	78 a5       	ldd	r23, Y+40	; 0x28
    1934:	89 a5       	ldd	r24, Y+41	; 0x29
    1936:	9a a5       	ldd	r25, Y+42	; 0x2a
    1938:	20 e0       	ldi	r18, 0x00	; 0
    193a:	30 e0       	ldi	r19, 0x00	; 0
    193c:	40 e2       	ldi	r20, 0x20	; 32
    193e:	51 e4       	ldi	r21, 0x41	; 65
    1940:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1944:	dc 01       	movw	r26, r24
    1946:	cb 01       	movw	r24, r22
    1948:	bc 01       	movw	r22, r24
    194a:	cd 01       	movw	r24, r26
    194c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1950:	dc 01       	movw	r26, r24
    1952:	cb 01       	movw	r24, r22
    1954:	9a a3       	std	Y+34, r25	; 0x22
    1956:	89 a3       	std	Y+33, r24	; 0x21
    1958:	0f c0       	rjmp	.+30     	; 0x1978 <LCD_sendCommand+0x1d6>
    195a:	88 ec       	ldi	r24, 0xC8	; 200
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	98 a3       	std	Y+32, r25	; 0x20
    1960:	8f 8f       	std	Y+31, r24	; 0x1f
    1962:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1964:	98 a1       	ldd	r25, Y+32	; 0x20
    1966:	01 97       	sbiw	r24, 0x01	; 1
    1968:	f1 f7       	brne	.-4      	; 0x1966 <LCD_sendCommand+0x1c4>
    196a:	98 a3       	std	Y+32, r25	; 0x20
    196c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    196e:	89 a1       	ldd	r24, Y+33	; 0x21
    1970:	9a a1       	ldd	r25, Y+34	; 0x22
    1972:	01 97       	sbiw	r24, 0x01	; 1
    1974:	9a a3       	std	Y+34, r25	; 0x22
    1976:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1978:	89 a1       	ldd	r24, Y+33	; 0x21
    197a:	9a a1       	ldd	r25, Y+34	; 0x22
    197c:	00 97       	sbiw	r24, 0x00	; 0
    197e:	69 f7       	brne	.-38     	; 0x195a <LCD_sendCommand+0x1b8>
    1980:	14 c0       	rjmp	.+40     	; 0x19aa <LCD_sendCommand+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1982:	6b a1       	ldd	r22, Y+35	; 0x23
    1984:	7c a1       	ldd	r23, Y+36	; 0x24
    1986:	8d a1       	ldd	r24, Y+37	; 0x25
    1988:	9e a1       	ldd	r25, Y+38	; 0x26
    198a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    198e:	dc 01       	movw	r26, r24
    1990:	cb 01       	movw	r24, r22
    1992:	9a a3       	std	Y+34, r25	; 0x22
    1994:	89 a3       	std	Y+33, r24	; 0x21
    1996:	89 a1       	ldd	r24, Y+33	; 0x21
    1998:	9a a1       	ldd	r25, Y+34	; 0x22
    199a:	9e 8f       	std	Y+30, r25	; 0x1e
    199c:	8d 8f       	std	Y+29, r24	; 0x1d
    199e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    19a0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    19a2:	01 97       	sbiw	r24, 0x01	; 1
    19a4:	f1 f7       	brne	.-4      	; 0x19a2 <LCD_sendCommand+0x200>
    19a6:	9e 8f       	std	Y+30, r25	; 0x1e
    19a8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
    19aa:	e5 e3       	ldi	r30, 0x35	; 53
    19ac:	f0 e0       	ldi	r31, 0x00	; 0
    19ae:	89 ad       	ldd	r24, Y+57	; 0x39
    19b0:	80 83       	st	Z, r24
    19b2:	80 e0       	ldi	r24, 0x00	; 0
    19b4:	90 e0       	ldi	r25, 0x00	; 0
    19b6:	a0 e8       	ldi	r26, 0x80	; 128
    19b8:	bf e3       	ldi	r27, 0x3F	; 63
    19ba:	89 8f       	std	Y+25, r24	; 0x19
    19bc:	9a 8f       	std	Y+26, r25	; 0x1a
    19be:	ab 8f       	std	Y+27, r26	; 0x1b
    19c0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19c2:	69 8d       	ldd	r22, Y+25	; 0x19
    19c4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19c6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19c8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19ca:	20 e0       	ldi	r18, 0x00	; 0
    19cc:	30 e0       	ldi	r19, 0x00	; 0
    19ce:	4a ef       	ldi	r20, 0xFA	; 250
    19d0:	54 e4       	ldi	r21, 0x44	; 68
    19d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19d6:	dc 01       	movw	r26, r24
    19d8:	cb 01       	movw	r24, r22
    19da:	8d 8b       	std	Y+21, r24	; 0x15
    19dc:	9e 8b       	std	Y+22, r25	; 0x16
    19de:	af 8b       	std	Y+23, r26	; 0x17
    19e0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    19e2:	6d 89       	ldd	r22, Y+21	; 0x15
    19e4:	7e 89       	ldd	r23, Y+22	; 0x16
    19e6:	8f 89       	ldd	r24, Y+23	; 0x17
    19e8:	98 8d       	ldd	r25, Y+24	; 0x18
    19ea:	20 e0       	ldi	r18, 0x00	; 0
    19ec:	30 e0       	ldi	r19, 0x00	; 0
    19ee:	40 e8       	ldi	r20, 0x80	; 128
    19f0:	5f e3       	ldi	r21, 0x3F	; 63
    19f2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19f6:	88 23       	and	r24, r24
    19f8:	2c f4       	brge	.+10     	; 0x1a04 <LCD_sendCommand+0x262>
		__ticks = 1;
    19fa:	81 e0       	ldi	r24, 0x01	; 1
    19fc:	90 e0       	ldi	r25, 0x00	; 0
    19fe:	9c 8b       	std	Y+20, r25	; 0x14
    1a00:	8b 8b       	std	Y+19, r24	; 0x13
    1a02:	3f c0       	rjmp	.+126    	; 0x1a82 <LCD_sendCommand+0x2e0>
	else if (__tmp > 65535)
    1a04:	6d 89       	ldd	r22, Y+21	; 0x15
    1a06:	7e 89       	ldd	r23, Y+22	; 0x16
    1a08:	8f 89       	ldd	r24, Y+23	; 0x17
    1a0a:	98 8d       	ldd	r25, Y+24	; 0x18
    1a0c:	20 e0       	ldi	r18, 0x00	; 0
    1a0e:	3f ef       	ldi	r19, 0xFF	; 255
    1a10:	4f e7       	ldi	r20, 0x7F	; 127
    1a12:	57 e4       	ldi	r21, 0x47	; 71
    1a14:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a18:	18 16       	cp	r1, r24
    1a1a:	4c f5       	brge	.+82     	; 0x1a6e <LCD_sendCommand+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a1c:	69 8d       	ldd	r22, Y+25	; 0x19
    1a1e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a20:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a22:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a24:	20 e0       	ldi	r18, 0x00	; 0
    1a26:	30 e0       	ldi	r19, 0x00	; 0
    1a28:	40 e2       	ldi	r20, 0x20	; 32
    1a2a:	51 e4       	ldi	r21, 0x41	; 65
    1a2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a30:	dc 01       	movw	r26, r24
    1a32:	cb 01       	movw	r24, r22
    1a34:	bc 01       	movw	r22, r24
    1a36:	cd 01       	movw	r24, r26
    1a38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a3c:	dc 01       	movw	r26, r24
    1a3e:	cb 01       	movw	r24, r22
    1a40:	9c 8b       	std	Y+20, r25	; 0x14
    1a42:	8b 8b       	std	Y+19, r24	; 0x13
    1a44:	0f c0       	rjmp	.+30     	; 0x1a64 <LCD_sendCommand+0x2c2>
    1a46:	88 ec       	ldi	r24, 0xC8	; 200
    1a48:	90 e0       	ldi	r25, 0x00	; 0
    1a4a:	9a 8b       	std	Y+18, r25	; 0x12
    1a4c:	89 8b       	std	Y+17, r24	; 0x11
    1a4e:	89 89       	ldd	r24, Y+17	; 0x11
    1a50:	9a 89       	ldd	r25, Y+18	; 0x12
    1a52:	01 97       	sbiw	r24, 0x01	; 1
    1a54:	f1 f7       	brne	.-4      	; 0x1a52 <LCD_sendCommand+0x2b0>
    1a56:	9a 8b       	std	Y+18, r25	; 0x12
    1a58:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a5a:	8b 89       	ldd	r24, Y+19	; 0x13
    1a5c:	9c 89       	ldd	r25, Y+20	; 0x14
    1a5e:	01 97       	sbiw	r24, 0x01	; 1
    1a60:	9c 8b       	std	Y+20, r25	; 0x14
    1a62:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a64:	8b 89       	ldd	r24, Y+19	; 0x13
    1a66:	9c 89       	ldd	r25, Y+20	; 0x14
    1a68:	00 97       	sbiw	r24, 0x00	; 0
    1a6a:	69 f7       	brne	.-38     	; 0x1a46 <LCD_sendCommand+0x2a4>
    1a6c:	14 c0       	rjmp	.+40     	; 0x1a96 <LCD_sendCommand+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a6e:	6d 89       	ldd	r22, Y+21	; 0x15
    1a70:	7e 89       	ldd	r23, Y+22	; 0x16
    1a72:	8f 89       	ldd	r24, Y+23	; 0x17
    1a74:	98 8d       	ldd	r25, Y+24	; 0x18
    1a76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a7a:	dc 01       	movw	r26, r24
    1a7c:	cb 01       	movw	r24, r22
    1a7e:	9c 8b       	std	Y+20, r25	; 0x14
    1a80:	8b 8b       	std	Y+19, r24	; 0x13
    1a82:	8b 89       	ldd	r24, Y+19	; 0x13
    1a84:	9c 89       	ldd	r25, Y+20	; 0x14
    1a86:	98 8b       	std	Y+16, r25	; 0x10
    1a88:	8f 87       	std	Y+15, r24	; 0x0f
    1a8a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a8c:	98 89       	ldd	r25, Y+16	; 0x10
    1a8e:	01 97       	sbiw	r24, 0x01	; 1
    1a90:	f1 f7       	brne	.-4      	; 0x1a8e <LCD_sendCommand+0x2ec>
    1a92:	98 8b       	std	Y+16, r25	; 0x10
    1a94:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    1a96:	a2 e3       	ldi	r26, 0x32	; 50
    1a98:	b0 e0       	ldi	r27, 0x00	; 0
    1a9a:	e2 e3       	ldi	r30, 0x32	; 50
    1a9c:	f0 e0       	ldi	r31, 0x00	; 0
    1a9e:	80 81       	ld	r24, Z
    1aa0:	8f 77       	andi	r24, 0x7F	; 127
    1aa2:	8c 93       	st	X, r24
    1aa4:	80 e0       	ldi	r24, 0x00	; 0
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	a0 e8       	ldi	r26, 0x80	; 128
    1aaa:	bf e3       	ldi	r27, 0x3F	; 63
    1aac:	8b 87       	std	Y+11, r24	; 0x0b
    1aae:	9c 87       	std	Y+12, r25	; 0x0c
    1ab0:	ad 87       	std	Y+13, r26	; 0x0d
    1ab2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ab4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ab6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ab8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1aba:	9e 85       	ldd	r25, Y+14	; 0x0e
    1abc:	20 e0       	ldi	r18, 0x00	; 0
    1abe:	30 e0       	ldi	r19, 0x00	; 0
    1ac0:	4a ef       	ldi	r20, 0xFA	; 250
    1ac2:	54 e4       	ldi	r21, 0x44	; 68
    1ac4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ac8:	dc 01       	movw	r26, r24
    1aca:	cb 01       	movw	r24, r22
    1acc:	8f 83       	std	Y+7, r24	; 0x07
    1ace:	98 87       	std	Y+8, r25	; 0x08
    1ad0:	a9 87       	std	Y+9, r26	; 0x09
    1ad2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ad4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ad6:	78 85       	ldd	r23, Y+8	; 0x08
    1ad8:	89 85       	ldd	r24, Y+9	; 0x09
    1ada:	9a 85       	ldd	r25, Y+10	; 0x0a
    1adc:	20 e0       	ldi	r18, 0x00	; 0
    1ade:	30 e0       	ldi	r19, 0x00	; 0
    1ae0:	40 e8       	ldi	r20, 0x80	; 128
    1ae2:	5f e3       	ldi	r21, 0x3F	; 63
    1ae4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ae8:	88 23       	and	r24, r24
    1aea:	2c f4       	brge	.+10     	; 0x1af6 <LCD_sendCommand+0x354>
		__ticks = 1;
    1aec:	81 e0       	ldi	r24, 0x01	; 1
    1aee:	90 e0       	ldi	r25, 0x00	; 0
    1af0:	9e 83       	std	Y+6, r25	; 0x06
    1af2:	8d 83       	std	Y+5, r24	; 0x05
    1af4:	3f c0       	rjmp	.+126    	; 0x1b74 <LCD_sendCommand+0x3d2>
	else if (__tmp > 65535)
    1af6:	6f 81       	ldd	r22, Y+7	; 0x07
    1af8:	78 85       	ldd	r23, Y+8	; 0x08
    1afa:	89 85       	ldd	r24, Y+9	; 0x09
    1afc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1afe:	20 e0       	ldi	r18, 0x00	; 0
    1b00:	3f ef       	ldi	r19, 0xFF	; 255
    1b02:	4f e7       	ldi	r20, 0x7F	; 127
    1b04:	57 e4       	ldi	r21, 0x47	; 71
    1b06:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b0a:	18 16       	cp	r1, r24
    1b0c:	4c f5       	brge	.+82     	; 0x1b60 <LCD_sendCommand+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b0e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b10:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b12:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b14:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b16:	20 e0       	ldi	r18, 0x00	; 0
    1b18:	30 e0       	ldi	r19, 0x00	; 0
    1b1a:	40 e2       	ldi	r20, 0x20	; 32
    1b1c:	51 e4       	ldi	r21, 0x41	; 65
    1b1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b22:	dc 01       	movw	r26, r24
    1b24:	cb 01       	movw	r24, r22
    1b26:	bc 01       	movw	r22, r24
    1b28:	cd 01       	movw	r24, r26
    1b2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b2e:	dc 01       	movw	r26, r24
    1b30:	cb 01       	movw	r24, r22
    1b32:	9e 83       	std	Y+6, r25	; 0x06
    1b34:	8d 83       	std	Y+5, r24	; 0x05
    1b36:	0f c0       	rjmp	.+30     	; 0x1b56 <LCD_sendCommand+0x3b4>
    1b38:	88 ec       	ldi	r24, 0xC8	; 200
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	9c 83       	std	Y+4, r25	; 0x04
    1b3e:	8b 83       	std	Y+3, r24	; 0x03
    1b40:	8b 81       	ldd	r24, Y+3	; 0x03
    1b42:	9c 81       	ldd	r25, Y+4	; 0x04
    1b44:	01 97       	sbiw	r24, 0x01	; 1
    1b46:	f1 f7       	brne	.-4      	; 0x1b44 <LCD_sendCommand+0x3a2>
    1b48:	9c 83       	std	Y+4, r25	; 0x04
    1b4a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b4c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b4e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b50:	01 97       	sbiw	r24, 0x01	; 1
    1b52:	9e 83       	std	Y+6, r25	; 0x06
    1b54:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b56:	8d 81       	ldd	r24, Y+5	; 0x05
    1b58:	9e 81       	ldd	r25, Y+6	; 0x06
    1b5a:	00 97       	sbiw	r24, 0x00	; 0
    1b5c:	69 f7       	brne	.-38     	; 0x1b38 <LCD_sendCommand+0x396>
    1b5e:	14 c0       	rjmp	.+40     	; 0x1b88 <LCD_sendCommand+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b60:	6f 81       	ldd	r22, Y+7	; 0x07
    1b62:	78 85       	ldd	r23, Y+8	; 0x08
    1b64:	89 85       	ldd	r24, Y+9	; 0x09
    1b66:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b6c:	dc 01       	movw	r26, r24
    1b6e:	cb 01       	movw	r24, r22
    1b70:	9e 83       	std	Y+6, r25	; 0x06
    1b72:	8d 83       	std	Y+5, r24	; 0x05
    1b74:	8d 81       	ldd	r24, Y+5	; 0x05
    1b76:	9e 81       	ldd	r25, Y+6	; 0x06
    1b78:	9a 83       	std	Y+2, r25	; 0x02
    1b7a:	89 83       	std	Y+1, r24	; 0x01
    1b7c:	89 81       	ldd	r24, Y+1	; 0x01
    1b7e:	9a 81       	ldd	r25, Y+2	; 0x02
    1b80:	01 97       	sbiw	r24, 0x01	; 1
    1b82:	f1 f7       	brne	.-4      	; 0x1b80 <LCD_sendCommand+0x3de>
    1b84:	9a 83       	std	Y+2, r25	; 0x02
    1b86:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    1b88:	e9 96       	adiw	r28, 0x39	; 57
    1b8a:	0f b6       	in	r0, 0x3f	; 63
    1b8c:	f8 94       	cli
    1b8e:	de bf       	out	0x3e, r29	; 62
    1b90:	0f be       	out	0x3f, r0	; 63
    1b92:	cd bf       	out	0x3d, r28	; 61
    1b94:	cf 91       	pop	r28
    1b96:	df 91       	pop	r29
    1b98:	08 95       	ret

00001b9a <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    1b9a:	df 93       	push	r29
    1b9c:	cf 93       	push	r28
    1b9e:	cd b7       	in	r28, 0x3d	; 61
    1ba0:	de b7       	in	r29, 0x3e	; 62
    1ba2:	e9 97       	sbiw	r28, 0x39	; 57
    1ba4:	0f b6       	in	r0, 0x3f	; 63
    1ba6:	f8 94       	cli
    1ba8:	de bf       	out	0x3e, r29	; 62
    1baa:	0f be       	out	0x3f, r0	; 63
    1bac:	cd bf       	out	0x3d, r28	; 61
    1bae:	89 af       	std	Y+57, r24	; 0x39
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
    1bb0:	a2 e3       	ldi	r26, 0x32	; 50
    1bb2:	b0 e0       	ldi	r27, 0x00	; 0
    1bb4:	e2 e3       	ldi	r30, 0x32	; 50
    1bb6:	f0 e0       	ldi	r31, 0x00	; 0
    1bb8:	80 81       	ld	r24, Z
    1bba:	80 61       	ori	r24, 0x10	; 16
    1bbc:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    1bbe:	a2 e3       	ldi	r26, 0x32	; 50
    1bc0:	b0 e0       	ldi	r27, 0x00	; 0
    1bc2:	e2 e3       	ldi	r30, 0x32	; 50
    1bc4:	f0 e0       	ldi	r31, 0x00	; 0
    1bc6:	80 81       	ld	r24, Z
    1bc8:	8f 7d       	andi	r24, 0xDF	; 223
    1bca:	8c 93       	st	X, r24
    1bcc:	80 e0       	ldi	r24, 0x00	; 0
    1bce:	90 e0       	ldi	r25, 0x00	; 0
    1bd0:	a0 e8       	ldi	r26, 0x80	; 128
    1bd2:	bf e3       	ldi	r27, 0x3F	; 63
    1bd4:	8d ab       	std	Y+53, r24	; 0x35
    1bd6:	9e ab       	std	Y+54, r25	; 0x36
    1bd8:	af ab       	std	Y+55, r26	; 0x37
    1bda:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bdc:	6d a9       	ldd	r22, Y+53	; 0x35
    1bde:	7e a9       	ldd	r23, Y+54	; 0x36
    1be0:	8f a9       	ldd	r24, Y+55	; 0x37
    1be2:	98 ad       	ldd	r25, Y+56	; 0x38
    1be4:	20 e0       	ldi	r18, 0x00	; 0
    1be6:	30 e0       	ldi	r19, 0x00	; 0
    1be8:	4a ef       	ldi	r20, 0xFA	; 250
    1bea:	54 e4       	ldi	r21, 0x44	; 68
    1bec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bf0:	dc 01       	movw	r26, r24
    1bf2:	cb 01       	movw	r24, r22
    1bf4:	89 ab       	std	Y+49, r24	; 0x31
    1bf6:	9a ab       	std	Y+50, r25	; 0x32
    1bf8:	ab ab       	std	Y+51, r26	; 0x33
    1bfa:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1bfc:	69 a9       	ldd	r22, Y+49	; 0x31
    1bfe:	7a a9       	ldd	r23, Y+50	; 0x32
    1c00:	8b a9       	ldd	r24, Y+51	; 0x33
    1c02:	9c a9       	ldd	r25, Y+52	; 0x34
    1c04:	20 e0       	ldi	r18, 0x00	; 0
    1c06:	30 e0       	ldi	r19, 0x00	; 0
    1c08:	40 e8       	ldi	r20, 0x80	; 128
    1c0a:	5f e3       	ldi	r21, 0x3F	; 63
    1c0c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c10:	88 23       	and	r24, r24
    1c12:	2c f4       	brge	.+10     	; 0x1c1e <LCD_displayCharacter+0x84>
		__ticks = 1;
    1c14:	81 e0       	ldi	r24, 0x01	; 1
    1c16:	90 e0       	ldi	r25, 0x00	; 0
    1c18:	98 ab       	std	Y+48, r25	; 0x30
    1c1a:	8f a7       	std	Y+47, r24	; 0x2f
    1c1c:	3f c0       	rjmp	.+126    	; 0x1c9c <LCD_displayCharacter+0x102>
	else if (__tmp > 65535)
    1c1e:	69 a9       	ldd	r22, Y+49	; 0x31
    1c20:	7a a9       	ldd	r23, Y+50	; 0x32
    1c22:	8b a9       	ldd	r24, Y+51	; 0x33
    1c24:	9c a9       	ldd	r25, Y+52	; 0x34
    1c26:	20 e0       	ldi	r18, 0x00	; 0
    1c28:	3f ef       	ldi	r19, 0xFF	; 255
    1c2a:	4f e7       	ldi	r20, 0x7F	; 127
    1c2c:	57 e4       	ldi	r21, 0x47	; 71
    1c2e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c32:	18 16       	cp	r1, r24
    1c34:	4c f5       	brge	.+82     	; 0x1c88 <LCD_displayCharacter+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c36:	6d a9       	ldd	r22, Y+53	; 0x35
    1c38:	7e a9       	ldd	r23, Y+54	; 0x36
    1c3a:	8f a9       	ldd	r24, Y+55	; 0x37
    1c3c:	98 ad       	ldd	r25, Y+56	; 0x38
    1c3e:	20 e0       	ldi	r18, 0x00	; 0
    1c40:	30 e0       	ldi	r19, 0x00	; 0
    1c42:	40 e2       	ldi	r20, 0x20	; 32
    1c44:	51 e4       	ldi	r21, 0x41	; 65
    1c46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c4a:	dc 01       	movw	r26, r24
    1c4c:	cb 01       	movw	r24, r22
    1c4e:	bc 01       	movw	r22, r24
    1c50:	cd 01       	movw	r24, r26
    1c52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c56:	dc 01       	movw	r26, r24
    1c58:	cb 01       	movw	r24, r22
    1c5a:	98 ab       	std	Y+48, r25	; 0x30
    1c5c:	8f a7       	std	Y+47, r24	; 0x2f
    1c5e:	0f c0       	rjmp	.+30     	; 0x1c7e <LCD_displayCharacter+0xe4>
    1c60:	88 ec       	ldi	r24, 0xC8	; 200
    1c62:	90 e0       	ldi	r25, 0x00	; 0
    1c64:	9e a7       	std	Y+46, r25	; 0x2e
    1c66:	8d a7       	std	Y+45, r24	; 0x2d
    1c68:	8d a5       	ldd	r24, Y+45	; 0x2d
    1c6a:	9e a5       	ldd	r25, Y+46	; 0x2e
    1c6c:	01 97       	sbiw	r24, 0x01	; 1
    1c6e:	f1 f7       	brne	.-4      	; 0x1c6c <LCD_displayCharacter+0xd2>
    1c70:	9e a7       	std	Y+46, r25	; 0x2e
    1c72:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c74:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c76:	98 a9       	ldd	r25, Y+48	; 0x30
    1c78:	01 97       	sbiw	r24, 0x01	; 1
    1c7a:	98 ab       	std	Y+48, r25	; 0x30
    1c7c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c7e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c80:	98 a9       	ldd	r25, Y+48	; 0x30
    1c82:	00 97       	sbiw	r24, 0x00	; 0
    1c84:	69 f7       	brne	.-38     	; 0x1c60 <LCD_displayCharacter+0xc6>
    1c86:	14 c0       	rjmp	.+40     	; 0x1cb0 <LCD_displayCharacter+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c88:	69 a9       	ldd	r22, Y+49	; 0x31
    1c8a:	7a a9       	ldd	r23, Y+50	; 0x32
    1c8c:	8b a9       	ldd	r24, Y+51	; 0x33
    1c8e:	9c a9       	ldd	r25, Y+52	; 0x34
    1c90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c94:	dc 01       	movw	r26, r24
    1c96:	cb 01       	movw	r24, r22
    1c98:	98 ab       	std	Y+48, r25	; 0x30
    1c9a:	8f a7       	std	Y+47, r24	; 0x2f
    1c9c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c9e:	98 a9       	ldd	r25, Y+48	; 0x30
    1ca0:	9c a7       	std	Y+44, r25	; 0x2c
    1ca2:	8b a7       	std	Y+43, r24	; 0x2b
    1ca4:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ca6:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ca8:	01 97       	sbiw	r24, 0x01	; 1
    1caa:	f1 f7       	brne	.-4      	; 0x1ca8 <LCD_displayCharacter+0x10e>
    1cac:	9c a7       	std	Y+44, r25	; 0x2c
    1cae:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1cb0:	a2 e3       	ldi	r26, 0x32	; 50
    1cb2:	b0 e0       	ldi	r27, 0x00	; 0
    1cb4:	e2 e3       	ldi	r30, 0x32	; 50
    1cb6:	f0 e0       	ldi	r31, 0x00	; 0
    1cb8:	80 81       	ld	r24, Z
    1cba:	80 68       	ori	r24, 0x80	; 128
    1cbc:	8c 93       	st	X, r24
    1cbe:	80 e0       	ldi	r24, 0x00	; 0
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
    1cc2:	a0 e8       	ldi	r26, 0x80	; 128
    1cc4:	bf e3       	ldi	r27, 0x3F	; 63
    1cc6:	8f a3       	std	Y+39, r24	; 0x27
    1cc8:	98 a7       	std	Y+40, r25	; 0x28
    1cca:	a9 a7       	std	Y+41, r26	; 0x29
    1ccc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cce:	6f a1       	ldd	r22, Y+39	; 0x27
    1cd0:	78 a5       	ldd	r23, Y+40	; 0x28
    1cd2:	89 a5       	ldd	r24, Y+41	; 0x29
    1cd4:	9a a5       	ldd	r25, Y+42	; 0x2a
    1cd6:	20 e0       	ldi	r18, 0x00	; 0
    1cd8:	30 e0       	ldi	r19, 0x00	; 0
    1cda:	4a ef       	ldi	r20, 0xFA	; 250
    1cdc:	54 e4       	ldi	r21, 0x44	; 68
    1cde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ce2:	dc 01       	movw	r26, r24
    1ce4:	cb 01       	movw	r24, r22
    1ce6:	8b a3       	std	Y+35, r24	; 0x23
    1ce8:	9c a3       	std	Y+36, r25	; 0x24
    1cea:	ad a3       	std	Y+37, r26	; 0x25
    1cec:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1cee:	6b a1       	ldd	r22, Y+35	; 0x23
    1cf0:	7c a1       	ldd	r23, Y+36	; 0x24
    1cf2:	8d a1       	ldd	r24, Y+37	; 0x25
    1cf4:	9e a1       	ldd	r25, Y+38	; 0x26
    1cf6:	20 e0       	ldi	r18, 0x00	; 0
    1cf8:	30 e0       	ldi	r19, 0x00	; 0
    1cfa:	40 e8       	ldi	r20, 0x80	; 128
    1cfc:	5f e3       	ldi	r21, 0x3F	; 63
    1cfe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d02:	88 23       	and	r24, r24
    1d04:	2c f4       	brge	.+10     	; 0x1d10 <LCD_displayCharacter+0x176>
		__ticks = 1;
    1d06:	81 e0       	ldi	r24, 0x01	; 1
    1d08:	90 e0       	ldi	r25, 0x00	; 0
    1d0a:	9a a3       	std	Y+34, r25	; 0x22
    1d0c:	89 a3       	std	Y+33, r24	; 0x21
    1d0e:	3f c0       	rjmp	.+126    	; 0x1d8e <LCD_displayCharacter+0x1f4>
	else if (__tmp > 65535)
    1d10:	6b a1       	ldd	r22, Y+35	; 0x23
    1d12:	7c a1       	ldd	r23, Y+36	; 0x24
    1d14:	8d a1       	ldd	r24, Y+37	; 0x25
    1d16:	9e a1       	ldd	r25, Y+38	; 0x26
    1d18:	20 e0       	ldi	r18, 0x00	; 0
    1d1a:	3f ef       	ldi	r19, 0xFF	; 255
    1d1c:	4f e7       	ldi	r20, 0x7F	; 127
    1d1e:	57 e4       	ldi	r21, 0x47	; 71
    1d20:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d24:	18 16       	cp	r1, r24
    1d26:	4c f5       	brge	.+82     	; 0x1d7a <LCD_displayCharacter+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d28:	6f a1       	ldd	r22, Y+39	; 0x27
    1d2a:	78 a5       	ldd	r23, Y+40	; 0x28
    1d2c:	89 a5       	ldd	r24, Y+41	; 0x29
    1d2e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d30:	20 e0       	ldi	r18, 0x00	; 0
    1d32:	30 e0       	ldi	r19, 0x00	; 0
    1d34:	40 e2       	ldi	r20, 0x20	; 32
    1d36:	51 e4       	ldi	r21, 0x41	; 65
    1d38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d3c:	dc 01       	movw	r26, r24
    1d3e:	cb 01       	movw	r24, r22
    1d40:	bc 01       	movw	r22, r24
    1d42:	cd 01       	movw	r24, r26
    1d44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d48:	dc 01       	movw	r26, r24
    1d4a:	cb 01       	movw	r24, r22
    1d4c:	9a a3       	std	Y+34, r25	; 0x22
    1d4e:	89 a3       	std	Y+33, r24	; 0x21
    1d50:	0f c0       	rjmp	.+30     	; 0x1d70 <LCD_displayCharacter+0x1d6>
    1d52:	88 ec       	ldi	r24, 0xC8	; 200
    1d54:	90 e0       	ldi	r25, 0x00	; 0
    1d56:	98 a3       	std	Y+32, r25	; 0x20
    1d58:	8f 8f       	std	Y+31, r24	; 0x1f
    1d5a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d5c:	98 a1       	ldd	r25, Y+32	; 0x20
    1d5e:	01 97       	sbiw	r24, 0x01	; 1
    1d60:	f1 f7       	brne	.-4      	; 0x1d5e <LCD_displayCharacter+0x1c4>
    1d62:	98 a3       	std	Y+32, r25	; 0x20
    1d64:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d66:	89 a1       	ldd	r24, Y+33	; 0x21
    1d68:	9a a1       	ldd	r25, Y+34	; 0x22
    1d6a:	01 97       	sbiw	r24, 0x01	; 1
    1d6c:	9a a3       	std	Y+34, r25	; 0x22
    1d6e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d70:	89 a1       	ldd	r24, Y+33	; 0x21
    1d72:	9a a1       	ldd	r25, Y+34	; 0x22
    1d74:	00 97       	sbiw	r24, 0x00	; 0
    1d76:	69 f7       	brne	.-38     	; 0x1d52 <LCD_displayCharacter+0x1b8>
    1d78:	14 c0       	rjmp	.+40     	; 0x1da2 <LCD_displayCharacter+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d7a:	6b a1       	ldd	r22, Y+35	; 0x23
    1d7c:	7c a1       	ldd	r23, Y+36	; 0x24
    1d7e:	8d a1       	ldd	r24, Y+37	; 0x25
    1d80:	9e a1       	ldd	r25, Y+38	; 0x26
    1d82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d86:	dc 01       	movw	r26, r24
    1d88:	cb 01       	movw	r24, r22
    1d8a:	9a a3       	std	Y+34, r25	; 0x22
    1d8c:	89 a3       	std	Y+33, r24	; 0x21
    1d8e:	89 a1       	ldd	r24, Y+33	; 0x21
    1d90:	9a a1       	ldd	r25, Y+34	; 0x22
    1d92:	9e 8f       	std	Y+30, r25	; 0x1e
    1d94:	8d 8f       	std	Y+29, r24	; 0x1d
    1d96:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d98:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d9a:	01 97       	sbiw	r24, 0x01	; 1
    1d9c:	f1 f7       	brne	.-4      	; 0x1d9a <LCD_displayCharacter+0x200>
    1d9e:	9e 8f       	std	Y+30, r25	; 0x1e
    1da0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	LCD_DATA_PORT = data; /* out the required data char to the data bus D0 --> D7 */
    1da2:	e5 e3       	ldi	r30, 0x35	; 53
    1da4:	f0 e0       	ldi	r31, 0x00	; 0
    1da6:	89 ad       	ldd	r24, Y+57	; 0x39
    1da8:	80 83       	st	Z, r24
    1daa:	80 e0       	ldi	r24, 0x00	; 0
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	a0 e8       	ldi	r26, 0x80	; 128
    1db0:	bf e3       	ldi	r27, 0x3F	; 63
    1db2:	89 8f       	std	Y+25, r24	; 0x19
    1db4:	9a 8f       	std	Y+26, r25	; 0x1a
    1db6:	ab 8f       	std	Y+27, r26	; 0x1b
    1db8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dba:	69 8d       	ldd	r22, Y+25	; 0x19
    1dbc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1dbe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1dc0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1dc2:	20 e0       	ldi	r18, 0x00	; 0
    1dc4:	30 e0       	ldi	r19, 0x00	; 0
    1dc6:	4a ef       	ldi	r20, 0xFA	; 250
    1dc8:	54 e4       	ldi	r21, 0x44	; 68
    1dca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dce:	dc 01       	movw	r26, r24
    1dd0:	cb 01       	movw	r24, r22
    1dd2:	8d 8b       	std	Y+21, r24	; 0x15
    1dd4:	9e 8b       	std	Y+22, r25	; 0x16
    1dd6:	af 8b       	std	Y+23, r26	; 0x17
    1dd8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1dda:	6d 89       	ldd	r22, Y+21	; 0x15
    1ddc:	7e 89       	ldd	r23, Y+22	; 0x16
    1dde:	8f 89       	ldd	r24, Y+23	; 0x17
    1de0:	98 8d       	ldd	r25, Y+24	; 0x18
    1de2:	20 e0       	ldi	r18, 0x00	; 0
    1de4:	30 e0       	ldi	r19, 0x00	; 0
    1de6:	40 e8       	ldi	r20, 0x80	; 128
    1de8:	5f e3       	ldi	r21, 0x3F	; 63
    1dea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1dee:	88 23       	and	r24, r24
    1df0:	2c f4       	brge	.+10     	; 0x1dfc <LCD_displayCharacter+0x262>
		__ticks = 1;
    1df2:	81 e0       	ldi	r24, 0x01	; 1
    1df4:	90 e0       	ldi	r25, 0x00	; 0
    1df6:	9c 8b       	std	Y+20, r25	; 0x14
    1df8:	8b 8b       	std	Y+19, r24	; 0x13
    1dfa:	3f c0       	rjmp	.+126    	; 0x1e7a <LCD_displayCharacter+0x2e0>
	else if (__tmp > 65535)
    1dfc:	6d 89       	ldd	r22, Y+21	; 0x15
    1dfe:	7e 89       	ldd	r23, Y+22	; 0x16
    1e00:	8f 89       	ldd	r24, Y+23	; 0x17
    1e02:	98 8d       	ldd	r25, Y+24	; 0x18
    1e04:	20 e0       	ldi	r18, 0x00	; 0
    1e06:	3f ef       	ldi	r19, 0xFF	; 255
    1e08:	4f e7       	ldi	r20, 0x7F	; 127
    1e0a:	57 e4       	ldi	r21, 0x47	; 71
    1e0c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e10:	18 16       	cp	r1, r24
    1e12:	4c f5       	brge	.+82     	; 0x1e66 <LCD_displayCharacter+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e14:	69 8d       	ldd	r22, Y+25	; 0x19
    1e16:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e18:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e1a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e1c:	20 e0       	ldi	r18, 0x00	; 0
    1e1e:	30 e0       	ldi	r19, 0x00	; 0
    1e20:	40 e2       	ldi	r20, 0x20	; 32
    1e22:	51 e4       	ldi	r21, 0x41	; 65
    1e24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e28:	dc 01       	movw	r26, r24
    1e2a:	cb 01       	movw	r24, r22
    1e2c:	bc 01       	movw	r22, r24
    1e2e:	cd 01       	movw	r24, r26
    1e30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e34:	dc 01       	movw	r26, r24
    1e36:	cb 01       	movw	r24, r22
    1e38:	9c 8b       	std	Y+20, r25	; 0x14
    1e3a:	8b 8b       	std	Y+19, r24	; 0x13
    1e3c:	0f c0       	rjmp	.+30     	; 0x1e5c <LCD_displayCharacter+0x2c2>
    1e3e:	88 ec       	ldi	r24, 0xC8	; 200
    1e40:	90 e0       	ldi	r25, 0x00	; 0
    1e42:	9a 8b       	std	Y+18, r25	; 0x12
    1e44:	89 8b       	std	Y+17, r24	; 0x11
    1e46:	89 89       	ldd	r24, Y+17	; 0x11
    1e48:	9a 89       	ldd	r25, Y+18	; 0x12
    1e4a:	01 97       	sbiw	r24, 0x01	; 1
    1e4c:	f1 f7       	brne	.-4      	; 0x1e4a <LCD_displayCharacter+0x2b0>
    1e4e:	9a 8b       	std	Y+18, r25	; 0x12
    1e50:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e52:	8b 89       	ldd	r24, Y+19	; 0x13
    1e54:	9c 89       	ldd	r25, Y+20	; 0x14
    1e56:	01 97       	sbiw	r24, 0x01	; 1
    1e58:	9c 8b       	std	Y+20, r25	; 0x14
    1e5a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e5c:	8b 89       	ldd	r24, Y+19	; 0x13
    1e5e:	9c 89       	ldd	r25, Y+20	; 0x14
    1e60:	00 97       	sbiw	r24, 0x00	; 0
    1e62:	69 f7       	brne	.-38     	; 0x1e3e <LCD_displayCharacter+0x2a4>
    1e64:	14 c0       	rjmp	.+40     	; 0x1e8e <LCD_displayCharacter+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e66:	6d 89       	ldd	r22, Y+21	; 0x15
    1e68:	7e 89       	ldd	r23, Y+22	; 0x16
    1e6a:	8f 89       	ldd	r24, Y+23	; 0x17
    1e6c:	98 8d       	ldd	r25, Y+24	; 0x18
    1e6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e72:	dc 01       	movw	r26, r24
    1e74:	cb 01       	movw	r24, r22
    1e76:	9c 8b       	std	Y+20, r25	; 0x14
    1e78:	8b 8b       	std	Y+19, r24	; 0x13
    1e7a:	8b 89       	ldd	r24, Y+19	; 0x13
    1e7c:	9c 89       	ldd	r25, Y+20	; 0x14
    1e7e:	98 8b       	std	Y+16, r25	; 0x10
    1e80:	8f 87       	std	Y+15, r24	; 0x0f
    1e82:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e84:	98 89       	ldd	r25, Y+16	; 0x10
    1e86:	01 97       	sbiw	r24, 0x01	; 1
    1e88:	f1 f7       	brne	.-4      	; 0x1e86 <LCD_displayCharacter+0x2ec>
    1e8a:	98 8b       	std	Y+16, r25	; 0x10
    1e8c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    1e8e:	a2 e3       	ldi	r26, 0x32	; 50
    1e90:	b0 e0       	ldi	r27, 0x00	; 0
    1e92:	e2 e3       	ldi	r30, 0x32	; 50
    1e94:	f0 e0       	ldi	r31, 0x00	; 0
    1e96:	80 81       	ld	r24, Z
    1e98:	8f 77       	andi	r24, 0x7F	; 127
    1e9a:	8c 93       	st	X, r24
    1e9c:	80 e0       	ldi	r24, 0x00	; 0
    1e9e:	90 e0       	ldi	r25, 0x00	; 0
    1ea0:	a0 e8       	ldi	r26, 0x80	; 128
    1ea2:	bf e3       	ldi	r27, 0x3F	; 63
    1ea4:	8b 87       	std	Y+11, r24	; 0x0b
    1ea6:	9c 87       	std	Y+12, r25	; 0x0c
    1ea8:	ad 87       	std	Y+13, r26	; 0x0d
    1eaa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eac:	6b 85       	ldd	r22, Y+11	; 0x0b
    1eae:	7c 85       	ldd	r23, Y+12	; 0x0c
    1eb0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1eb2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eb4:	20 e0       	ldi	r18, 0x00	; 0
    1eb6:	30 e0       	ldi	r19, 0x00	; 0
    1eb8:	4a ef       	ldi	r20, 0xFA	; 250
    1eba:	54 e4       	ldi	r21, 0x44	; 68
    1ebc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ec0:	dc 01       	movw	r26, r24
    1ec2:	cb 01       	movw	r24, r22
    1ec4:	8f 83       	std	Y+7, r24	; 0x07
    1ec6:	98 87       	std	Y+8, r25	; 0x08
    1ec8:	a9 87       	std	Y+9, r26	; 0x09
    1eca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ecc:	6f 81       	ldd	r22, Y+7	; 0x07
    1ece:	78 85       	ldd	r23, Y+8	; 0x08
    1ed0:	89 85       	ldd	r24, Y+9	; 0x09
    1ed2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ed4:	20 e0       	ldi	r18, 0x00	; 0
    1ed6:	30 e0       	ldi	r19, 0x00	; 0
    1ed8:	40 e8       	ldi	r20, 0x80	; 128
    1eda:	5f e3       	ldi	r21, 0x3F	; 63
    1edc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ee0:	88 23       	and	r24, r24
    1ee2:	2c f4       	brge	.+10     	; 0x1eee <LCD_displayCharacter+0x354>
		__ticks = 1;
    1ee4:	81 e0       	ldi	r24, 0x01	; 1
    1ee6:	90 e0       	ldi	r25, 0x00	; 0
    1ee8:	9e 83       	std	Y+6, r25	; 0x06
    1eea:	8d 83       	std	Y+5, r24	; 0x05
    1eec:	3f c0       	rjmp	.+126    	; 0x1f6c <LCD_displayCharacter+0x3d2>
	else if (__tmp > 65535)
    1eee:	6f 81       	ldd	r22, Y+7	; 0x07
    1ef0:	78 85       	ldd	r23, Y+8	; 0x08
    1ef2:	89 85       	ldd	r24, Y+9	; 0x09
    1ef4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ef6:	20 e0       	ldi	r18, 0x00	; 0
    1ef8:	3f ef       	ldi	r19, 0xFF	; 255
    1efa:	4f e7       	ldi	r20, 0x7F	; 127
    1efc:	57 e4       	ldi	r21, 0x47	; 71
    1efe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f02:	18 16       	cp	r1, r24
    1f04:	4c f5       	brge	.+82     	; 0x1f58 <LCD_displayCharacter+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f06:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f08:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f0a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f0c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f0e:	20 e0       	ldi	r18, 0x00	; 0
    1f10:	30 e0       	ldi	r19, 0x00	; 0
    1f12:	40 e2       	ldi	r20, 0x20	; 32
    1f14:	51 e4       	ldi	r21, 0x41	; 65
    1f16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f1a:	dc 01       	movw	r26, r24
    1f1c:	cb 01       	movw	r24, r22
    1f1e:	bc 01       	movw	r22, r24
    1f20:	cd 01       	movw	r24, r26
    1f22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f26:	dc 01       	movw	r26, r24
    1f28:	cb 01       	movw	r24, r22
    1f2a:	9e 83       	std	Y+6, r25	; 0x06
    1f2c:	8d 83       	std	Y+5, r24	; 0x05
    1f2e:	0f c0       	rjmp	.+30     	; 0x1f4e <LCD_displayCharacter+0x3b4>
    1f30:	88 ec       	ldi	r24, 0xC8	; 200
    1f32:	90 e0       	ldi	r25, 0x00	; 0
    1f34:	9c 83       	std	Y+4, r25	; 0x04
    1f36:	8b 83       	std	Y+3, r24	; 0x03
    1f38:	8b 81       	ldd	r24, Y+3	; 0x03
    1f3a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f3c:	01 97       	sbiw	r24, 0x01	; 1
    1f3e:	f1 f7       	brne	.-4      	; 0x1f3c <LCD_displayCharacter+0x3a2>
    1f40:	9c 83       	std	Y+4, r25	; 0x04
    1f42:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f44:	8d 81       	ldd	r24, Y+5	; 0x05
    1f46:	9e 81       	ldd	r25, Y+6	; 0x06
    1f48:	01 97       	sbiw	r24, 0x01	; 1
    1f4a:	9e 83       	std	Y+6, r25	; 0x06
    1f4c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f4e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f50:	9e 81       	ldd	r25, Y+6	; 0x06
    1f52:	00 97       	sbiw	r24, 0x00	; 0
    1f54:	69 f7       	brne	.-38     	; 0x1f30 <LCD_displayCharacter+0x396>
    1f56:	14 c0       	rjmp	.+40     	; 0x1f80 <LCD_displayCharacter+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f58:	6f 81       	ldd	r22, Y+7	; 0x07
    1f5a:	78 85       	ldd	r23, Y+8	; 0x08
    1f5c:	89 85       	ldd	r24, Y+9	; 0x09
    1f5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f64:	dc 01       	movw	r26, r24
    1f66:	cb 01       	movw	r24, r22
    1f68:	9e 83       	std	Y+6, r25	; 0x06
    1f6a:	8d 83       	std	Y+5, r24	; 0x05
    1f6c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f6e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f70:	9a 83       	std	Y+2, r25	; 0x02
    1f72:	89 83       	std	Y+1, r24	; 0x01
    1f74:	89 81       	ldd	r24, Y+1	; 0x01
    1f76:	9a 81       	ldd	r25, Y+2	; 0x02
    1f78:	01 97       	sbiw	r24, 0x01	; 1
    1f7a:	f1 f7       	brne	.-4      	; 0x1f78 <LCD_displayCharacter+0x3de>
    1f7c:	9a 83       	std	Y+2, r25	; 0x02
    1f7e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */	
}
    1f80:	e9 96       	adiw	r28, 0x39	; 57
    1f82:	0f b6       	in	r0, 0x3f	; 63
    1f84:	f8 94       	cli
    1f86:	de bf       	out	0x3e, r29	; 62
    1f88:	0f be       	out	0x3f, r0	; 63
    1f8a:	cd bf       	out	0x3d, r28	; 61
    1f8c:	cf 91       	pop	r28
    1f8e:	df 91       	pop	r29
    1f90:	08 95       	ret

00001f92 <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    1f92:	df 93       	push	r29
    1f94:	cf 93       	push	r28
    1f96:	00 d0       	rcall	.+0      	; 0x1f98 <LCD_displayString+0x6>
    1f98:	0f 92       	push	r0
    1f9a:	cd b7       	in	r28, 0x3d	; 61
    1f9c:	de b7       	in	r29, 0x3e	; 62
    1f9e:	9b 83       	std	Y+3, r25	; 0x03
    1fa0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1fa2:	19 82       	std	Y+1, r1	; 0x01
    1fa4:	0e c0       	rjmp	.+28     	; 0x1fc2 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    1fa6:	89 81       	ldd	r24, Y+1	; 0x01
    1fa8:	28 2f       	mov	r18, r24
    1faa:	30 e0       	ldi	r19, 0x00	; 0
    1fac:	8a 81       	ldd	r24, Y+2	; 0x02
    1fae:	9b 81       	ldd	r25, Y+3	; 0x03
    1fb0:	fc 01       	movw	r30, r24
    1fb2:	e2 0f       	add	r30, r18
    1fb4:	f3 1f       	adc	r31, r19
    1fb6:	80 81       	ld	r24, Z
    1fb8:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <LCD_displayCharacter>
		i++;
    1fbc:	89 81       	ldd	r24, Y+1	; 0x01
    1fbe:	8f 5f       	subi	r24, 0xFF	; 255
    1fc0:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    1fc2:	89 81       	ldd	r24, Y+1	; 0x01
    1fc4:	28 2f       	mov	r18, r24
    1fc6:	30 e0       	ldi	r19, 0x00	; 0
    1fc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fca:	9b 81       	ldd	r25, Y+3	; 0x03
    1fcc:	fc 01       	movw	r30, r24
    1fce:	e2 0f       	add	r30, r18
    1fd0:	f3 1f       	adc	r31, r19
    1fd2:	80 81       	ld	r24, Z
    1fd4:	88 23       	and	r24, r24
    1fd6:	39 f7       	brne	.-50     	; 0x1fa6 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    1fd8:	0f 90       	pop	r0
    1fda:	0f 90       	pop	r0
    1fdc:	0f 90       	pop	r0
    1fde:	cf 91       	pop	r28
    1fe0:	df 91       	pop	r29
    1fe2:	08 95       	ret

00001fe4 <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row,uint8 col)
{
    1fe4:	df 93       	push	r29
    1fe6:	cf 93       	push	r28
    1fe8:	00 d0       	rcall	.+0      	; 0x1fea <LCD_goToRowColumn+0x6>
    1fea:	00 d0       	rcall	.+0      	; 0x1fec <LCD_goToRowColumn+0x8>
    1fec:	0f 92       	push	r0
    1fee:	cd b7       	in	r28, 0x3d	; 61
    1ff0:	de b7       	in	r29, 0x3e	; 62
    1ff2:	8a 83       	std	Y+2, r24	; 0x02
    1ff4:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;
	
	/* first of all calculate the required address */
	switch(row)
    1ff6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff8:	28 2f       	mov	r18, r24
    1ffa:	30 e0       	ldi	r19, 0x00	; 0
    1ffc:	3d 83       	std	Y+5, r19	; 0x05
    1ffe:	2c 83       	std	Y+4, r18	; 0x04
    2000:	8c 81       	ldd	r24, Y+4	; 0x04
    2002:	9d 81       	ldd	r25, Y+5	; 0x05
    2004:	81 30       	cpi	r24, 0x01	; 1
    2006:	91 05       	cpc	r25, r1
    2008:	c1 f0       	breq	.+48     	; 0x203a <LCD_goToRowColumn+0x56>
    200a:	2c 81       	ldd	r18, Y+4	; 0x04
    200c:	3d 81       	ldd	r19, Y+5	; 0x05
    200e:	22 30       	cpi	r18, 0x02	; 2
    2010:	31 05       	cpc	r19, r1
    2012:	2c f4       	brge	.+10     	; 0x201e <LCD_goToRowColumn+0x3a>
    2014:	8c 81       	ldd	r24, Y+4	; 0x04
    2016:	9d 81       	ldd	r25, Y+5	; 0x05
    2018:	00 97       	sbiw	r24, 0x00	; 0
    201a:	61 f0       	breq	.+24     	; 0x2034 <LCD_goToRowColumn+0x50>
    201c:	19 c0       	rjmp	.+50     	; 0x2050 <LCD_goToRowColumn+0x6c>
    201e:	2c 81       	ldd	r18, Y+4	; 0x04
    2020:	3d 81       	ldd	r19, Y+5	; 0x05
    2022:	22 30       	cpi	r18, 0x02	; 2
    2024:	31 05       	cpc	r19, r1
    2026:	69 f0       	breq	.+26     	; 0x2042 <LCD_goToRowColumn+0x5e>
    2028:	8c 81       	ldd	r24, Y+4	; 0x04
    202a:	9d 81       	ldd	r25, Y+5	; 0x05
    202c:	83 30       	cpi	r24, 0x03	; 3
    202e:	91 05       	cpc	r25, r1
    2030:	61 f0       	breq	.+24     	; 0x204a <LCD_goToRowColumn+0x66>
    2032:	0e c0       	rjmp	.+28     	; 0x2050 <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address=col;
    2034:	8b 81       	ldd	r24, Y+3	; 0x03
    2036:	89 83       	std	Y+1, r24	; 0x01
    2038:	0b c0       	rjmp	.+22     	; 0x2050 <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address=col+0x40;
    203a:	8b 81       	ldd	r24, Y+3	; 0x03
    203c:	80 5c       	subi	r24, 0xC0	; 192
    203e:	89 83       	std	Y+1, r24	; 0x01
    2040:	07 c0       	rjmp	.+14     	; 0x2050 <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address=col+0x10;
    2042:	8b 81       	ldd	r24, Y+3	; 0x03
    2044:	80 5f       	subi	r24, 0xF0	; 240
    2046:	89 83       	std	Y+1, r24	; 0x01
    2048:	03 c0       	rjmp	.+6      	; 0x2050 <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address=col+0x50;
    204a:	8b 81       	ldd	r24, Y+3	; 0x03
    204c:	80 5b       	subi	r24, 0xB0	; 176
    204e:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* to write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION); 
    2050:	89 81       	ldd	r24, Y+1	; 0x01
    2052:	80 68       	ori	r24, 0x80	; 128
    2054:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <LCD_sendCommand>
}
    2058:	0f 90       	pop	r0
    205a:	0f 90       	pop	r0
    205c:	0f 90       	pop	r0
    205e:	0f 90       	pop	r0
    2060:	0f 90       	pop	r0
    2062:	cf 91       	pop	r28
    2064:	df 91       	pop	r29
    2066:	08 95       	ret

00002068 <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2068:	df 93       	push	r29
    206a:	cf 93       	push	r28
    206c:	00 d0       	rcall	.+0      	; 0x206e <LCD_displayStringRowColumn+0x6>
    206e:	00 d0       	rcall	.+0      	; 0x2070 <LCD_displayStringRowColumn+0x8>
    2070:	cd b7       	in	r28, 0x3d	; 61
    2072:	de b7       	in	r29, 0x3e	; 62
    2074:	89 83       	std	Y+1, r24	; 0x01
    2076:	6a 83       	std	Y+2, r22	; 0x02
    2078:	5c 83       	std	Y+4, r21	; 0x04
    207a:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    207c:	89 81       	ldd	r24, Y+1	; 0x01
    207e:	6a 81       	ldd	r22, Y+2	; 0x02
    2080:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    2084:	8b 81       	ldd	r24, Y+3	; 0x03
    2086:	9c 81       	ldd	r25, Y+4	; 0x04
    2088:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <LCD_displayString>
}
    208c:	0f 90       	pop	r0
    208e:	0f 90       	pop	r0
    2090:	0f 90       	pop	r0
    2092:	0f 90       	pop	r0
    2094:	cf 91       	pop	r28
    2096:	df 91       	pop	r29
    2098:	08 95       	ret

0000209a <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    209a:	df 93       	push	r29
    209c:	cf 93       	push	r28
    209e:	cd b7       	in	r28, 0x3d	; 61
    20a0:	de b7       	in	r29, 0x3e	; 62
    20a2:	62 97       	sbiw	r28, 0x12	; 18
    20a4:	0f b6       	in	r0, 0x3f	; 63
    20a6:	f8 94       	cli
    20a8:	de bf       	out	0x3e, r29	; 62
    20aa:	0f be       	out	0x3f, r0	; 63
    20ac:	cd bf       	out	0x3d, r28	; 61
    20ae:	9a 8b       	std	Y+18, r25	; 0x12
    20b0:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    20b2:	89 89       	ldd	r24, Y+17	; 0x11
    20b4:	9a 89       	ldd	r25, Y+18	; 0x12
    20b6:	9e 01       	movw	r18, r28
    20b8:	2f 5f       	subi	r18, 0xFF	; 255
    20ba:	3f 4f       	sbci	r19, 0xFF	; 255
    20bc:	b9 01       	movw	r22, r18
    20be:	4a e0       	ldi	r20, 0x0A	; 10
    20c0:	50 e0       	ldi	r21, 0x00	; 0
    20c2:	0e 94 31 16 	call	0x2c62	; 0x2c62 <itoa>
   LCD_displayString(buff);
    20c6:	ce 01       	movw	r24, r28
    20c8:	01 96       	adiw	r24, 0x01	; 1
    20ca:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <LCD_displayString>
}
    20ce:	62 96       	adiw	r28, 0x12	; 18
    20d0:	0f b6       	in	r0, 0x3f	; 63
    20d2:	f8 94       	cli
    20d4:	de bf       	out	0x3e, r29	; 62
    20d6:	0f be       	out	0x3f, r0	; 63
    20d8:	cd bf       	out	0x3d, r28	; 61
    20da:	cf 91       	pop	r28
    20dc:	df 91       	pop	r29
    20de:	08 95       	ret

000020e0 <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    20e0:	df 93       	push	r29
    20e2:	cf 93       	push	r28
    20e4:	cd b7       	in	r28, 0x3d	; 61
    20e6:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display 
    20e8:	81 e0       	ldi	r24, 0x01	; 1
    20ea:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <LCD_sendCommand>
}
    20ee:	cf 91       	pop	r28
    20f0:	df 91       	pop	r29
    20f2:	08 95       	ret

000020f4 <__vector_9>:
static volatile void (*g_Timer1_callBackPtrB) (void) = NULL_PTR ;
static volatile void (*g_Timer2_callBackPtr) (void) = NULL_PTR ;

/**********************************************INTERRUPT SERVICES ROUTINES******************************************/
ISR(TIMER0_OVF_vect)
{
    20f4:	1f 92       	push	r1
    20f6:	0f 92       	push	r0
    20f8:	0f b6       	in	r0, 0x3f	; 63
    20fa:	0f 92       	push	r0
    20fc:	11 24       	eor	r1, r1
    20fe:	2f 93       	push	r18
    2100:	3f 93       	push	r19
    2102:	4f 93       	push	r20
    2104:	5f 93       	push	r21
    2106:	6f 93       	push	r22
    2108:	7f 93       	push	r23
    210a:	8f 93       	push	r24
    210c:	9f 93       	push	r25
    210e:	af 93       	push	r26
    2110:	bf 93       	push	r27
    2112:	ef 93       	push	r30
    2114:	ff 93       	push	r31
    2116:	df 93       	push	r29
    2118:	cf 93       	push	r28
    211a:	cd b7       	in	r28, 0x3d	; 61
    211c:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer0_callBackPtr != NULL_PTR)
    211e:	80 91 13 01 	lds	r24, 0x0113
    2122:	90 91 14 01 	lds	r25, 0x0114
    2126:	00 97       	sbiw	r24, 0x00	; 0
    2128:	29 f0       	breq	.+10     	; 0x2134 <__vector_9+0x40>
	{
		(*g_Timer0_callBackPtr)();
    212a:	e0 91 13 01 	lds	r30, 0x0113
    212e:	f0 91 14 01 	lds	r31, 0x0114
    2132:	09 95       	icall
	}

}
    2134:	cf 91       	pop	r28
    2136:	df 91       	pop	r29
    2138:	ff 91       	pop	r31
    213a:	ef 91       	pop	r30
    213c:	bf 91       	pop	r27
    213e:	af 91       	pop	r26
    2140:	9f 91       	pop	r25
    2142:	8f 91       	pop	r24
    2144:	7f 91       	pop	r23
    2146:	6f 91       	pop	r22
    2148:	5f 91       	pop	r21
    214a:	4f 91       	pop	r20
    214c:	3f 91       	pop	r19
    214e:	2f 91       	pop	r18
    2150:	0f 90       	pop	r0
    2152:	0f be       	out	0x3f, r0	; 63
    2154:	0f 90       	pop	r0
    2156:	1f 90       	pop	r1
    2158:	18 95       	reti

0000215a <__vector_19>:
ISR(TIMER0_COMP_vect)
{
    215a:	1f 92       	push	r1
    215c:	0f 92       	push	r0
    215e:	0f b6       	in	r0, 0x3f	; 63
    2160:	0f 92       	push	r0
    2162:	11 24       	eor	r1, r1
    2164:	2f 93       	push	r18
    2166:	3f 93       	push	r19
    2168:	4f 93       	push	r20
    216a:	5f 93       	push	r21
    216c:	6f 93       	push	r22
    216e:	7f 93       	push	r23
    2170:	8f 93       	push	r24
    2172:	9f 93       	push	r25
    2174:	af 93       	push	r26
    2176:	bf 93       	push	r27
    2178:	ef 93       	push	r30
    217a:	ff 93       	push	r31
    217c:	df 93       	push	r29
    217e:	cf 93       	push	r28
    2180:	cd b7       	in	r28, 0x3d	; 61
    2182:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer0_callBackPtr != NULL_PTR)
    2184:	80 91 13 01 	lds	r24, 0x0113
    2188:	90 91 14 01 	lds	r25, 0x0114
    218c:	00 97       	sbiw	r24, 0x00	; 0
    218e:	29 f0       	breq	.+10     	; 0x219a <__vector_19+0x40>
	{
		(*g_Timer0_callBackPtr)();
    2190:	e0 91 13 01 	lds	r30, 0x0113
    2194:	f0 91 14 01 	lds	r31, 0x0114
    2198:	09 95       	icall
	}

}
    219a:	cf 91       	pop	r28
    219c:	df 91       	pop	r29
    219e:	ff 91       	pop	r31
    21a0:	ef 91       	pop	r30
    21a2:	bf 91       	pop	r27
    21a4:	af 91       	pop	r26
    21a6:	9f 91       	pop	r25
    21a8:	8f 91       	pop	r24
    21aa:	7f 91       	pop	r23
    21ac:	6f 91       	pop	r22
    21ae:	5f 91       	pop	r21
    21b0:	4f 91       	pop	r20
    21b2:	3f 91       	pop	r19
    21b4:	2f 91       	pop	r18
    21b6:	0f 90       	pop	r0
    21b8:	0f be       	out	0x3f, r0	; 63
    21ba:	0f 90       	pop	r0
    21bc:	1f 90       	pop	r1
    21be:	18 95       	reti

000021c0 <__vector_8>:


ISR(TIMER1_OVF_vect)
{
    21c0:	1f 92       	push	r1
    21c2:	0f 92       	push	r0
    21c4:	0f b6       	in	r0, 0x3f	; 63
    21c6:	0f 92       	push	r0
    21c8:	11 24       	eor	r1, r1
    21ca:	2f 93       	push	r18
    21cc:	3f 93       	push	r19
    21ce:	4f 93       	push	r20
    21d0:	5f 93       	push	r21
    21d2:	6f 93       	push	r22
    21d4:	7f 93       	push	r23
    21d6:	8f 93       	push	r24
    21d8:	9f 93       	push	r25
    21da:	af 93       	push	r26
    21dc:	bf 93       	push	r27
    21de:	ef 93       	push	r30
    21e0:	ff 93       	push	r31
    21e2:	df 93       	push	r29
    21e4:	cf 93       	push	r28
    21e6:	cd b7       	in	r28, 0x3d	; 61
    21e8:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer1_callBackPtrA != NULL_PTR)
    21ea:	80 91 15 01 	lds	r24, 0x0115
    21ee:	90 91 16 01 	lds	r25, 0x0116
    21f2:	00 97       	sbiw	r24, 0x00	; 0
    21f4:	29 f0       	breq	.+10     	; 0x2200 <__vector_8+0x40>
	{
		(*g_Timer1_callBackPtrA)();
    21f6:	e0 91 15 01 	lds	r30, 0x0115
    21fa:	f0 91 16 01 	lds	r31, 0x0116
    21fe:	09 95       	icall
	}

}
    2200:	cf 91       	pop	r28
    2202:	df 91       	pop	r29
    2204:	ff 91       	pop	r31
    2206:	ef 91       	pop	r30
    2208:	bf 91       	pop	r27
    220a:	af 91       	pop	r26
    220c:	9f 91       	pop	r25
    220e:	8f 91       	pop	r24
    2210:	7f 91       	pop	r23
    2212:	6f 91       	pop	r22
    2214:	5f 91       	pop	r21
    2216:	4f 91       	pop	r20
    2218:	3f 91       	pop	r19
    221a:	2f 91       	pop	r18
    221c:	0f 90       	pop	r0
    221e:	0f be       	out	0x3f, r0	; 63
    2220:	0f 90       	pop	r0
    2222:	1f 90       	pop	r1
    2224:	18 95       	reti

00002226 <__vector_6>:
ISR(TIMER1_COMPA_vect)
{
    2226:	1f 92       	push	r1
    2228:	0f 92       	push	r0
    222a:	0f b6       	in	r0, 0x3f	; 63
    222c:	0f 92       	push	r0
    222e:	11 24       	eor	r1, r1
    2230:	2f 93       	push	r18
    2232:	3f 93       	push	r19
    2234:	4f 93       	push	r20
    2236:	5f 93       	push	r21
    2238:	6f 93       	push	r22
    223a:	7f 93       	push	r23
    223c:	8f 93       	push	r24
    223e:	9f 93       	push	r25
    2240:	af 93       	push	r26
    2242:	bf 93       	push	r27
    2244:	ef 93       	push	r30
    2246:	ff 93       	push	r31
    2248:	df 93       	push	r29
    224a:	cf 93       	push	r28
    224c:	cd b7       	in	r28, 0x3d	; 61
    224e:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer1_callBackPtrA != NULL_PTR)
    2250:	80 91 15 01 	lds	r24, 0x0115
    2254:	90 91 16 01 	lds	r25, 0x0116
    2258:	00 97       	sbiw	r24, 0x00	; 0
    225a:	29 f0       	breq	.+10     	; 0x2266 <__vector_6+0x40>
	{
		(*g_Timer1_callBackPtrA)();
    225c:	e0 91 15 01 	lds	r30, 0x0115
    2260:	f0 91 16 01 	lds	r31, 0x0116
    2264:	09 95       	icall
	}

}
    2266:	cf 91       	pop	r28
    2268:	df 91       	pop	r29
    226a:	ff 91       	pop	r31
    226c:	ef 91       	pop	r30
    226e:	bf 91       	pop	r27
    2270:	af 91       	pop	r26
    2272:	9f 91       	pop	r25
    2274:	8f 91       	pop	r24
    2276:	7f 91       	pop	r23
    2278:	6f 91       	pop	r22
    227a:	5f 91       	pop	r21
    227c:	4f 91       	pop	r20
    227e:	3f 91       	pop	r19
    2280:	2f 91       	pop	r18
    2282:	0f 90       	pop	r0
    2284:	0f be       	out	0x3f, r0	; 63
    2286:	0f 90       	pop	r0
    2288:	1f 90       	pop	r1
    228a:	18 95       	reti

0000228c <__vector_7>:
ISR(TIMER1_COMPB_vect)
{
    228c:	1f 92       	push	r1
    228e:	0f 92       	push	r0
    2290:	0f b6       	in	r0, 0x3f	; 63
    2292:	0f 92       	push	r0
    2294:	11 24       	eor	r1, r1
    2296:	2f 93       	push	r18
    2298:	3f 93       	push	r19
    229a:	4f 93       	push	r20
    229c:	5f 93       	push	r21
    229e:	6f 93       	push	r22
    22a0:	7f 93       	push	r23
    22a2:	8f 93       	push	r24
    22a4:	9f 93       	push	r25
    22a6:	af 93       	push	r26
    22a8:	bf 93       	push	r27
    22aa:	ef 93       	push	r30
    22ac:	ff 93       	push	r31
    22ae:	df 93       	push	r29
    22b0:	cf 93       	push	r28
    22b2:	cd b7       	in	r28, 0x3d	; 61
    22b4:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer1_callBackPtrB != NULL_PTR)
    22b6:	80 91 17 01 	lds	r24, 0x0117
    22ba:	90 91 18 01 	lds	r25, 0x0118
    22be:	00 97       	sbiw	r24, 0x00	; 0
    22c0:	29 f0       	breq	.+10     	; 0x22cc <__vector_7+0x40>
	{
		(*g_Timer1_callBackPtrB)();
    22c2:	e0 91 17 01 	lds	r30, 0x0117
    22c6:	f0 91 18 01 	lds	r31, 0x0118
    22ca:	09 95       	icall
	}

}
    22cc:	cf 91       	pop	r28
    22ce:	df 91       	pop	r29
    22d0:	ff 91       	pop	r31
    22d2:	ef 91       	pop	r30
    22d4:	bf 91       	pop	r27
    22d6:	af 91       	pop	r26
    22d8:	9f 91       	pop	r25
    22da:	8f 91       	pop	r24
    22dc:	7f 91       	pop	r23
    22de:	6f 91       	pop	r22
    22e0:	5f 91       	pop	r21
    22e2:	4f 91       	pop	r20
    22e4:	3f 91       	pop	r19
    22e6:	2f 91       	pop	r18
    22e8:	0f 90       	pop	r0
    22ea:	0f be       	out	0x3f, r0	; 63
    22ec:	0f 90       	pop	r0
    22ee:	1f 90       	pop	r1
    22f0:	18 95       	reti

000022f2 <__vector_3>:
ISR(TIMER2_COMP_vect)
{
    22f2:	1f 92       	push	r1
    22f4:	0f 92       	push	r0
    22f6:	0f b6       	in	r0, 0x3f	; 63
    22f8:	0f 92       	push	r0
    22fa:	11 24       	eor	r1, r1
    22fc:	2f 93       	push	r18
    22fe:	3f 93       	push	r19
    2300:	4f 93       	push	r20
    2302:	5f 93       	push	r21
    2304:	6f 93       	push	r22
    2306:	7f 93       	push	r23
    2308:	8f 93       	push	r24
    230a:	9f 93       	push	r25
    230c:	af 93       	push	r26
    230e:	bf 93       	push	r27
    2310:	ef 93       	push	r30
    2312:	ff 93       	push	r31
    2314:	df 93       	push	r29
    2316:	cf 93       	push	r28
    2318:	cd b7       	in	r28, 0x3d	; 61
    231a:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer2_callBackPtr != NULL_PTR)
    231c:	80 91 19 01 	lds	r24, 0x0119
    2320:	90 91 1a 01 	lds	r25, 0x011A
    2324:	00 97       	sbiw	r24, 0x00	; 0
    2326:	29 f0       	breq	.+10     	; 0x2332 <__vector_3+0x40>
	{
		(*g_Timer2_callBackPtr)();
    2328:	e0 91 19 01 	lds	r30, 0x0119
    232c:	f0 91 1a 01 	lds	r31, 0x011A
    2330:	09 95       	icall
	}

}
    2332:	cf 91       	pop	r28
    2334:	df 91       	pop	r29
    2336:	ff 91       	pop	r31
    2338:	ef 91       	pop	r30
    233a:	bf 91       	pop	r27
    233c:	af 91       	pop	r26
    233e:	9f 91       	pop	r25
    2340:	8f 91       	pop	r24
    2342:	7f 91       	pop	r23
    2344:	6f 91       	pop	r22
    2346:	5f 91       	pop	r21
    2348:	4f 91       	pop	r20
    234a:	3f 91       	pop	r19
    234c:	2f 91       	pop	r18
    234e:	0f 90       	pop	r0
    2350:	0f be       	out	0x3f, r0	; 63
    2352:	0f 90       	pop	r0
    2354:	1f 90       	pop	r1
    2356:	18 95       	reti

00002358 <__vector_4>:
ISR(TIMER2_OVF_vect)
{
    2358:	1f 92       	push	r1
    235a:	0f 92       	push	r0
    235c:	0f b6       	in	r0, 0x3f	; 63
    235e:	0f 92       	push	r0
    2360:	11 24       	eor	r1, r1
    2362:	2f 93       	push	r18
    2364:	3f 93       	push	r19
    2366:	4f 93       	push	r20
    2368:	5f 93       	push	r21
    236a:	6f 93       	push	r22
    236c:	7f 93       	push	r23
    236e:	8f 93       	push	r24
    2370:	9f 93       	push	r25
    2372:	af 93       	push	r26
    2374:	bf 93       	push	r27
    2376:	ef 93       	push	r30
    2378:	ff 93       	push	r31
    237a:	df 93       	push	r29
    237c:	cf 93       	push	r28
    237e:	cd b7       	in	r28, 0x3d	; 61
    2380:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer2_callBackPtr != NULL_PTR)
    2382:	80 91 19 01 	lds	r24, 0x0119
    2386:	90 91 1a 01 	lds	r25, 0x011A
    238a:	00 97       	sbiw	r24, 0x00	; 0
    238c:	29 f0       	breq	.+10     	; 0x2398 <__vector_4+0x40>
	{
		(*g_Timer2_callBackPtr)();
    238e:	e0 91 19 01 	lds	r30, 0x0119
    2392:	f0 91 1a 01 	lds	r31, 0x011A
    2396:	09 95       	icall
	}

}
    2398:	cf 91       	pop	r28
    239a:	df 91       	pop	r29
    239c:	ff 91       	pop	r31
    239e:	ef 91       	pop	r30
    23a0:	bf 91       	pop	r27
    23a2:	af 91       	pop	r26
    23a4:	9f 91       	pop	r25
    23a6:	8f 91       	pop	r24
    23a8:	7f 91       	pop	r23
    23aa:	6f 91       	pop	r22
    23ac:	5f 91       	pop	r21
    23ae:	4f 91       	pop	r20
    23b0:	3f 91       	pop	r19
    23b2:	2f 91       	pop	r18
    23b4:	0f 90       	pop	r0
    23b6:	0f be       	out	0x3f, r0	; 63
    23b8:	0f 90       	pop	r0
    23ba:	1f 90       	pop	r1
    23bc:	18 95       	reti

000023be <Timer_init>:


/**************************************************************FUNCTIONS DEFENTIONS*****************************************/
void Timer_init(Timer_configType* ptrTimer_configType){
    23be:	df 93       	push	r29
    23c0:	cf 93       	push	r28
    23c2:	00 d0       	rcall	.+0      	; 0x23c4 <Timer_init+0x6>
    23c4:	cd b7       	in	r28, 0x3d	; 61
    23c6:	de b7       	in	r29, 0x3e	; 62
    23c8:	9a 83       	std	Y+2, r25	; 0x02
    23ca:	89 83       	std	Y+1, r24	; 0x01
	TCCR0 = (1<<FOC0);                                          //Non PWM Mode
    23cc:	e3 e5       	ldi	r30, 0x53	; 83
    23ce:	f0 e0       	ldi	r31, 0x00	; 0
    23d0:	80 e8       	ldi	r24, 0x80	; 128
    23d2:	80 83       	st	Z, r24

	if(ptrTimer_configType->timer == Timer0)
    23d4:	e9 81       	ldd	r30, Y+1	; 0x01
    23d6:	fa 81       	ldd	r31, Y+2	; 0x02
    23d8:	80 81       	ld	r24, Z
    23da:	88 23       	and	r24, r24
    23dc:	09 f5       	brne	.+66     	; 0x2420 <Timer_init+0x62>
	{
		/*SET MODE FOR TIMER 0*/
		if(ptrTimer_configType->mode == CTC)
    23de:	e9 81       	ldd	r30, Y+1	; 0x01
    23e0:	fa 81       	ldd	r31, Y+2	; 0x02
    23e2:	82 81       	ldd	r24, Z+2	; 0x02
    23e4:	81 30       	cpi	r24, 0x01	; 1
    23e6:	39 f4       	brne	.+14     	; 0x23f6 <Timer_init+0x38>
			SET_BIT(TCCR0,WGM00);
    23e8:	a3 e5       	ldi	r26, 0x53	; 83
    23ea:	b0 e0       	ldi	r27, 0x00	; 0
    23ec:	e3 e5       	ldi	r30, 0x53	; 83
    23ee:	f0 e0       	ldi	r31, 0x00	; 0
    23f0:	80 81       	ld	r24, Z
    23f2:	80 64       	ori	r24, 0x40	; 64
    23f4:	8c 93       	st	X, r24

		//TCCR0 |= (TCCR0 & (0xF8))|( ptrTimer_configType->clock & (0x07)) ;       //pre-scaler insert in LS 3 bits in TCCR0 register

		OCR0 = ptrTimer_configType->compareValue;                              //set compare value in OCR0 timer 0 compare register
    23f6:	ac e5       	ldi	r26, 0x5C	; 92
    23f8:	b0 e0       	ldi	r27, 0x00	; 0
    23fa:	e9 81       	ldd	r30, Y+1	; 0x01
    23fc:	fa 81       	ldd	r31, Y+2	; 0x02
    23fe:	84 81       	ldd	r24, Z+4	; 0x04
    2400:	8c 93       	st	X, r24

		SET_BIT(TIMSK,TOIE0);                                                  //enable timer0 interrupt
    2402:	a9 e5       	ldi	r26, 0x59	; 89
    2404:	b0 e0       	ldi	r27, 0x00	; 0
    2406:	e9 e5       	ldi	r30, 0x59	; 89
    2408:	f0 e0       	ldi	r31, 0x00	; 0
    240a:	80 81       	ld	r24, Z
    240c:	81 60       	ori	r24, 0x01	; 1
    240e:	8c 93       	st	X, r24

		TCNT0 = ptrTimer_configType-> initTime ;
    2410:	a2 e5       	ldi	r26, 0x52	; 82
    2412:	b0 e0       	ldi	r27, 0x00	; 0
    2414:	e9 81       	ldd	r30, Y+1	; 0x01
    2416:	fa 81       	ldd	r31, Y+2	; 0x02
    2418:	85 81       	ldd	r24, Z+5	; 0x05
    241a:	96 81       	ldd	r25, Z+6	; 0x06
    241c:	8c 93       	st	X, r24
    241e:	c3 c0       	rjmp	.+390    	; 0x25a6 <Timer_init+0x1e8>
	}

	else if(ptrTimer_configType->timer == Timer1)
    2420:	e9 81       	ldd	r30, Y+1	; 0x01
    2422:	fa 81       	ldd	r31, Y+2	; 0x02
    2424:	80 81       	ld	r24, Z
    2426:	81 30       	cpi	r24, 0x01	; 1
    2428:	09 f0       	breq	.+2      	; 0x242c <Timer_init+0x6e>
    242a:	98 c0       	rjmp	.+304    	; 0x255c <Timer_init+0x19e>
	{
		TCCR1A = (1 << FOC1A) | (1 << FOC1B) ;
    242c:	ef e4       	ldi	r30, 0x4F	; 79
    242e:	f0 e0       	ldi	r31, 0x00	; 0
    2430:	8c e0       	ldi	r24, 0x0C	; 12
    2432:	80 83       	st	Z, r24

		TCCR1B = (TCCR1B & 0xF7) | ( (ptrTimer_configType ->mode) << 3 ) ;
    2434:	ae e4       	ldi	r26, 0x4E	; 78
    2436:	b0 e0       	ldi	r27, 0x00	; 0
    2438:	ee e4       	ldi	r30, 0x4E	; 78
    243a:	f0 e0       	ldi	r31, 0x00	; 0
    243c:	80 81       	ld	r24, Z
    243e:	28 2f       	mov	r18, r24
    2440:	27 7f       	andi	r18, 0xF7	; 247
    2442:	e9 81       	ldd	r30, Y+1	; 0x01
    2444:	fa 81       	ldd	r31, Y+2	; 0x02
    2446:	82 81       	ldd	r24, Z+2	; 0x02
    2448:	88 2f       	mov	r24, r24
    244a:	90 e0       	ldi	r25, 0x00	; 0
    244c:	88 0f       	add	r24, r24
    244e:	99 1f       	adc	r25, r25
    2450:	88 0f       	add	r24, r24
    2452:	99 1f       	adc	r25, r25
    2454:	88 0f       	add	r24, r24
    2456:	99 1f       	adc	r25, r25
    2458:	82 2b       	or	r24, r18
    245a:	8c 93       	st	X, r24

		if(ptrTimer_configType->mode == CTCA)
    245c:	e9 81       	ldd	r30, Y+1	; 0x01
    245e:	fa 81       	ldd	r31, Y+2	; 0x02
    2460:	82 81       	ldd	r24, Z+2	; 0x02
    2462:	82 30       	cpi	r24, 0x02	; 2
    2464:	69 f5       	brne	.+90     	; 0x24c0 <Timer_init+0x102>
		{
			TCCR1A = (TCCR1A & 0x3F) | ( (ptrTimer_configType ->out) << 6 ) ;
    2466:	af e4       	ldi	r26, 0x4F	; 79
    2468:	b0 e0       	ldi	r27, 0x00	; 0
    246a:	ef e4       	ldi	r30, 0x4F	; 79
    246c:	f0 e0       	ldi	r31, 0x00	; 0
    246e:	80 81       	ld	r24, Z
    2470:	28 2f       	mov	r18, r24
    2472:	2f 73       	andi	r18, 0x3F	; 63
    2474:	e9 81       	ldd	r30, Y+1	; 0x01
    2476:	fa 81       	ldd	r31, Y+2	; 0x02
    2478:	83 81       	ldd	r24, Z+3	; 0x03
    247a:	88 2f       	mov	r24, r24
    247c:	90 e0       	ldi	r25, 0x00	; 0
    247e:	00 24       	eor	r0, r0
    2480:	96 95       	lsr	r25
    2482:	87 95       	ror	r24
    2484:	07 94       	ror	r0
    2486:	96 95       	lsr	r25
    2488:	87 95       	ror	r24
    248a:	07 94       	ror	r0
    248c:	98 2f       	mov	r25, r24
    248e:	80 2d       	mov	r24, r0
    2490:	82 2b       	or	r24, r18
    2492:	8c 93       	st	X, r24
			OCR1A = ptrTimer_configType->compareAValue ;
    2494:	aa e4       	ldi	r26, 0x4A	; 74
    2496:	b0 e0       	ldi	r27, 0x00	; 0
    2498:	e9 81       	ldd	r30, Y+1	; 0x01
    249a:	fa 81       	ldd	r31, Y+2	; 0x02
    249c:	87 81       	ldd	r24, Z+7	; 0x07
    249e:	90 85       	ldd	r25, Z+8	; 0x08
    24a0:	11 96       	adiw	r26, 0x01	; 1
    24a2:	9c 93       	st	X, r25
    24a4:	8e 93       	st	-X, r24

			if(ptrTimer_configType->out != disconnected)
    24a6:	e9 81       	ldd	r30, Y+1	; 0x01
    24a8:	fa 81       	ldd	r31, Y+2	; 0x02
    24aa:	83 81       	ldd	r24, Z+3	; 0x03
    24ac:	88 23       	and	r24, r24
    24ae:	b1 f1       	breq	.+108    	; 0x251c <Timer_init+0x15e>
			{
				SET_BIT(DDRD,PD5);
    24b0:	a1 e3       	ldi	r26, 0x31	; 49
    24b2:	b0 e0       	ldi	r27, 0x00	; 0
    24b4:	e1 e3       	ldi	r30, 0x31	; 49
    24b6:	f0 e0       	ldi	r31, 0x00	; 0
    24b8:	80 81       	ld	r24, Z
    24ba:	80 62       	ori	r24, 0x20	; 32
    24bc:	8c 93       	st	X, r24
    24be:	2e c0       	rjmp	.+92     	; 0x251c <Timer_init+0x15e>
			}
		}
		else if (ptrTimer_configType->mode == CTCB)
    24c0:	e9 81       	ldd	r30, Y+1	; 0x01
    24c2:	fa 81       	ldd	r31, Y+2	; 0x02
    24c4:	82 81       	ldd	r24, Z+2	; 0x02
    24c6:	83 30       	cpi	r24, 0x03	; 3
    24c8:	49 f5       	brne	.+82     	; 0x251c <Timer_init+0x15e>
		{
			TCCR1A = (TCCR1A & 0x3F) | ( (ptrTimer_configType ->out) << 4 ) ;
    24ca:	af e4       	ldi	r26, 0x4F	; 79
    24cc:	b0 e0       	ldi	r27, 0x00	; 0
    24ce:	ef e4       	ldi	r30, 0x4F	; 79
    24d0:	f0 e0       	ldi	r31, 0x00	; 0
    24d2:	80 81       	ld	r24, Z
    24d4:	28 2f       	mov	r18, r24
    24d6:	2f 73       	andi	r18, 0x3F	; 63
    24d8:	e9 81       	ldd	r30, Y+1	; 0x01
    24da:	fa 81       	ldd	r31, Y+2	; 0x02
    24dc:	83 81       	ldd	r24, Z+3	; 0x03
    24de:	88 2f       	mov	r24, r24
    24e0:	90 e0       	ldi	r25, 0x00	; 0
    24e2:	82 95       	swap	r24
    24e4:	92 95       	swap	r25
    24e6:	90 7f       	andi	r25, 0xF0	; 240
    24e8:	98 27       	eor	r25, r24
    24ea:	80 7f       	andi	r24, 0xF0	; 240
    24ec:	98 27       	eor	r25, r24
    24ee:	82 2b       	or	r24, r18
    24f0:	8c 93       	st	X, r24
			OCR1B = ptrTimer_configType->compareBValue ;
    24f2:	a8 e4       	ldi	r26, 0x48	; 72
    24f4:	b0 e0       	ldi	r27, 0x00	; 0
    24f6:	e9 81       	ldd	r30, Y+1	; 0x01
    24f8:	fa 81       	ldd	r31, Y+2	; 0x02
    24fa:	81 85       	ldd	r24, Z+9	; 0x09
    24fc:	92 85       	ldd	r25, Z+10	; 0x0a
    24fe:	11 96       	adiw	r26, 0x01	; 1
    2500:	9c 93       	st	X, r25
    2502:	8e 93       	st	-X, r24

			if(ptrTimer_configType-> out != disconnected)
    2504:	e9 81       	ldd	r30, Y+1	; 0x01
    2506:	fa 81       	ldd	r31, Y+2	; 0x02
    2508:	83 81       	ldd	r24, Z+3	; 0x03
    250a:	88 23       	and	r24, r24
    250c:	39 f0       	breq	.+14     	; 0x251c <Timer_init+0x15e>
			{
				SET_BIT(DDRD,PD4);
    250e:	a1 e3       	ldi	r26, 0x31	; 49
    2510:	b0 e0       	ldi	r27, 0x00	; 0
    2512:	e1 e3       	ldi	r30, 0x31	; 49
    2514:	f0 e0       	ldi	r31, 0x00	; 0
    2516:	80 81       	ld	r24, Z
    2518:	80 61       	ori	r24, 0x10	; 16
    251a:	8c 93       	st	X, r24
			}
		}

		//TCCR1B = (TCCR1B & 0xF8) | ( (ptrTimer_configType ->clock)) ;

		TIMSK = (TIMSK & 0xC3) | (1 << ptrTimer_configType->mode) ;
    251c:	a9 e5       	ldi	r26, 0x59	; 89
    251e:	b0 e0       	ldi	r27, 0x00	; 0
    2520:	e9 e5       	ldi	r30, 0x59	; 89
    2522:	f0 e0       	ldi	r31, 0x00	; 0
    2524:	80 81       	ld	r24, Z
    2526:	48 2f       	mov	r20, r24
    2528:	43 7c       	andi	r20, 0xC3	; 195
    252a:	e9 81       	ldd	r30, Y+1	; 0x01
    252c:	fa 81       	ldd	r31, Y+2	; 0x02
    252e:	82 81       	ldd	r24, Z+2	; 0x02
    2530:	28 2f       	mov	r18, r24
    2532:	30 e0       	ldi	r19, 0x00	; 0
    2534:	81 e0       	ldi	r24, 0x01	; 1
    2536:	90 e0       	ldi	r25, 0x00	; 0
    2538:	02 2e       	mov	r0, r18
    253a:	02 c0       	rjmp	.+4      	; 0x2540 <Timer_init+0x182>
    253c:	88 0f       	add	r24, r24
    253e:	99 1f       	adc	r25, r25
    2540:	0a 94       	dec	r0
    2542:	e2 f7       	brpl	.-8      	; 0x253c <Timer_init+0x17e>
    2544:	84 2b       	or	r24, r20
    2546:	8c 93       	st	X, r24

		TCNT1 = ptrTimer_configType-> initTime ;
    2548:	ac e4       	ldi	r26, 0x4C	; 76
    254a:	b0 e0       	ldi	r27, 0x00	; 0
    254c:	e9 81       	ldd	r30, Y+1	; 0x01
    254e:	fa 81       	ldd	r31, Y+2	; 0x02
    2550:	85 81       	ldd	r24, Z+5	; 0x05
    2552:	96 81       	ldd	r25, Z+6	; 0x06
    2554:	11 96       	adiw	r26, 0x01	; 1
    2556:	9c 93       	st	X, r25
    2558:	8e 93       	st	-X, r24
    255a:	25 c0       	rjmp	.+74     	; 0x25a6 <Timer_init+0x1e8>
	}

	else if(ptrTimer_configType->timer == Timer2)
    255c:	e9 81       	ldd	r30, Y+1	; 0x01
    255e:	fa 81       	ldd	r31, Y+2	; 0x02
    2560:	80 81       	ld	r24, Z
    2562:	82 30       	cpi	r24, 0x02	; 2
    2564:	01 f5       	brne	.+64     	; 0x25a6 <Timer_init+0x1e8>
	{
		/*SET MODE FOR TIMER 0*/
		if(ptrTimer_configType->mode == CTC)
    2566:	e9 81       	ldd	r30, Y+1	; 0x01
    2568:	fa 81       	ldd	r31, Y+2	; 0x02
    256a:	82 81       	ldd	r24, Z+2	; 0x02
    256c:	81 30       	cpi	r24, 0x01	; 1
    256e:	39 f4       	brne	.+14     	; 0x257e <Timer_init+0x1c0>
			SET_BIT(TCCR2,WGM00);
    2570:	a5 e4       	ldi	r26, 0x45	; 69
    2572:	b0 e0       	ldi	r27, 0x00	; 0
    2574:	e5 e4       	ldi	r30, 0x45	; 69
    2576:	f0 e0       	ldi	r31, 0x00	; 0
    2578:	80 81       	ld	r24, Z
    257a:	80 64       	ori	r24, 0x40	; 64
    257c:	8c 93       	st	X, r24

		//TCCR2 |= (TCCR2 & (0xF8))|( ptrTimer_configType->clock & (0x07)) ;       //pre-scaler insert in LS 3 bits in TCC register

		OCR2 = ptrTimer_configType->compareValue;                              //set compare value in OCR2 timer 0 compare register
    257e:	a3 e4       	ldi	r26, 0x43	; 67
    2580:	b0 e0       	ldi	r27, 0x00	; 0
    2582:	e9 81       	ldd	r30, Y+1	; 0x01
    2584:	fa 81       	ldd	r31, Y+2	; 0x02
    2586:	84 81       	ldd	r24, Z+4	; 0x04
    2588:	8c 93       	st	X, r24

		SET_BIT(TIMSK,TOIE2);                                                  //enable timer2 interrupt
    258a:	a9 e5       	ldi	r26, 0x59	; 89
    258c:	b0 e0       	ldi	r27, 0x00	; 0
    258e:	e9 e5       	ldi	r30, 0x59	; 89
    2590:	f0 e0       	ldi	r31, 0x00	; 0
    2592:	80 81       	ld	r24, Z
    2594:	80 64       	ori	r24, 0x40	; 64
    2596:	8c 93       	st	X, r24

		TCNT2 = ptrTimer_configType-> initTime ;
    2598:	a4 e4       	ldi	r26, 0x44	; 68
    259a:	b0 e0       	ldi	r27, 0x00	; 0
    259c:	e9 81       	ldd	r30, Y+1	; 0x01
    259e:	fa 81       	ldd	r31, Y+2	; 0x02
    25a0:	85 81       	ldd	r24, Z+5	; 0x05
    25a2:	96 81       	ldd	r25, Z+6	; 0x06
    25a4:	8c 93       	st	X, r24
	}
}
    25a6:	0f 90       	pop	r0
    25a8:	0f 90       	pop	r0
    25aa:	cf 91       	pop	r28
    25ac:	df 91       	pop	r29
    25ae:	08 95       	ret

000025b0 <Timer_start>:
void Timer_start(Timer_configType* ptrTimer_configType )
{
    25b0:	df 93       	push	r29
    25b2:	cf 93       	push	r28
    25b4:	00 d0       	rcall	.+0      	; 0x25b6 <Timer_start+0x6>
    25b6:	cd b7       	in	r28, 0x3d	; 61
    25b8:	de b7       	in	r29, 0x3e	; 62
    25ba:	9a 83       	std	Y+2, r25	; 0x02
    25bc:	89 83       	std	Y+1, r24	; 0x01
	if(ptrTimer_configType->timer == Timer0)
    25be:	e9 81       	ldd	r30, Y+1	; 0x01
    25c0:	fa 81       	ldd	r31, Y+2	; 0x02
    25c2:	80 81       	ld	r24, Z
    25c4:	88 23       	and	r24, r24
    25c6:	99 f4       	brne	.+38     	; 0x25ee <Timer_start+0x3e>
	{
		TCCR0 |= (TCCR0 & (0xF8))|( (ptrTimer_configType->clock) & (0x07) ) ;       //pre-scaler insert in LS 3 bits in TCCR0 register
    25c8:	a3 e5       	ldi	r26, 0x53	; 83
    25ca:	b0 e0       	ldi	r27, 0x00	; 0
    25cc:	e3 e5       	ldi	r30, 0x53	; 83
    25ce:	f0 e0       	ldi	r31, 0x00	; 0
    25d0:	80 81       	ld	r24, Z
    25d2:	28 2f       	mov	r18, r24
    25d4:	e3 e5       	ldi	r30, 0x53	; 83
    25d6:	f0 e0       	ldi	r31, 0x00	; 0
    25d8:	80 81       	ld	r24, Z
    25da:	98 2f       	mov	r25, r24
    25dc:	98 7f       	andi	r25, 0xF8	; 248
    25de:	e9 81       	ldd	r30, Y+1	; 0x01
    25e0:	fa 81       	ldd	r31, Y+2	; 0x02
    25e2:	81 81       	ldd	r24, Z+1	; 0x01
    25e4:	87 70       	andi	r24, 0x07	; 7
    25e6:	89 2b       	or	r24, r25
    25e8:	82 2b       	or	r24, r18
    25ea:	8c 93       	st	X, r24
    25ec:	2a c0       	rjmp	.+84     	; 0x2642 <Timer_start+0x92>
	}
	else if(ptrTimer_configType->timer == Timer1)
    25ee:	e9 81       	ldd	r30, Y+1	; 0x01
    25f0:	fa 81       	ldd	r31, Y+2	; 0x02
    25f2:	80 81       	ld	r24, Z
    25f4:	81 30       	cpi	r24, 0x01	; 1
    25f6:	71 f4       	brne	.+28     	; 0x2614 <Timer_start+0x64>
	{
		TCCR1B = (TCCR1B & 0xF8) | ( (ptrTimer_configType ->clock) & (0x07) ) ;    //pre-scaler insert in LS 3 bits in TCCR1B register
    25f8:	ae e4       	ldi	r26, 0x4E	; 78
    25fa:	b0 e0       	ldi	r27, 0x00	; 0
    25fc:	ee e4       	ldi	r30, 0x4E	; 78
    25fe:	f0 e0       	ldi	r31, 0x00	; 0
    2600:	80 81       	ld	r24, Z
    2602:	98 2f       	mov	r25, r24
    2604:	98 7f       	andi	r25, 0xF8	; 248
    2606:	e9 81       	ldd	r30, Y+1	; 0x01
    2608:	fa 81       	ldd	r31, Y+2	; 0x02
    260a:	81 81       	ldd	r24, Z+1	; 0x01
    260c:	87 70       	andi	r24, 0x07	; 7
    260e:	89 2b       	or	r24, r25
    2610:	8c 93       	st	X, r24
    2612:	17 c0       	rjmp	.+46     	; 0x2642 <Timer_start+0x92>
	}
	else if(ptrTimer_configType->timer == Timer2)
    2614:	e9 81       	ldd	r30, Y+1	; 0x01
    2616:	fa 81       	ldd	r31, Y+2	; 0x02
    2618:	80 81       	ld	r24, Z
    261a:	82 30       	cpi	r24, 0x02	; 2
    261c:	91 f4       	brne	.+36     	; 0x2642 <Timer_start+0x92>
	{
		TCCR2 |= (TCCR2 & (0xF8))|( (ptrTimer_configType->clock) & (0x07) ) ;       //pre-scaler insert in LS 3 bits in TCCR2 register
    261e:	a5 e4       	ldi	r26, 0x45	; 69
    2620:	b0 e0       	ldi	r27, 0x00	; 0
    2622:	e5 e4       	ldi	r30, 0x45	; 69
    2624:	f0 e0       	ldi	r31, 0x00	; 0
    2626:	80 81       	ld	r24, Z
    2628:	28 2f       	mov	r18, r24
    262a:	e5 e4       	ldi	r30, 0x45	; 69
    262c:	f0 e0       	ldi	r31, 0x00	; 0
    262e:	80 81       	ld	r24, Z
    2630:	98 2f       	mov	r25, r24
    2632:	98 7f       	andi	r25, 0xF8	; 248
    2634:	e9 81       	ldd	r30, Y+1	; 0x01
    2636:	fa 81       	ldd	r31, Y+2	; 0x02
    2638:	81 81       	ldd	r24, Z+1	; 0x01
    263a:	87 70       	andi	r24, 0x07	; 7
    263c:	89 2b       	or	r24, r25
    263e:	82 2b       	or	r24, r18
    2640:	8c 93       	st	X, r24
	}
}
    2642:	0f 90       	pop	r0
    2644:	0f 90       	pop	r0
    2646:	cf 91       	pop	r28
    2648:	df 91       	pop	r29
    264a:	08 95       	ret

0000264c <Timer_stop>:
void Timer_stop(TimerNumber timer)
{
    264c:	df 93       	push	r29
    264e:	cf 93       	push	r28
    2650:	0f 92       	push	r0
    2652:	cd b7       	in	r28, 0x3d	; 61
    2654:	de b7       	in	r29, 0x3e	; 62
    2656:	89 83       	std	Y+1, r24	; 0x01
	if(timer == Timer0)
    2658:	89 81       	ldd	r24, Y+1	; 0x01
    265a:	88 23       	and	r24, r24
    265c:	c9 f4       	brne	.+50     	; 0x2690 <Timer_stop+0x44>
	{
		/*clear Pre-scaler for timer 0,and clear timer register value*/
		CLEAR_BIT(TCCR0,0);
    265e:	a3 e5       	ldi	r26, 0x53	; 83
    2660:	b0 e0       	ldi	r27, 0x00	; 0
    2662:	e3 e5       	ldi	r30, 0x53	; 83
    2664:	f0 e0       	ldi	r31, 0x00	; 0
    2666:	80 81       	ld	r24, Z
    2668:	8e 7f       	andi	r24, 0xFE	; 254
    266a:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0,1);
    266c:	a3 e5       	ldi	r26, 0x53	; 83
    266e:	b0 e0       	ldi	r27, 0x00	; 0
    2670:	e3 e5       	ldi	r30, 0x53	; 83
    2672:	f0 e0       	ldi	r31, 0x00	; 0
    2674:	80 81       	ld	r24, Z
    2676:	8d 7f       	andi	r24, 0xFD	; 253
    2678:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0,2);
    267a:	a3 e5       	ldi	r26, 0x53	; 83
    267c:	b0 e0       	ldi	r27, 0x00	; 0
    267e:	e3 e5       	ldi	r30, 0x53	; 83
    2680:	f0 e0       	ldi	r31, 0x00	; 0
    2682:	80 81       	ld	r24, Z
    2684:	8b 7f       	andi	r24, 0xFB	; 251
    2686:	8c 93       	st	X, r24
		Timer_clearTimerValue(timer);
    2688:	89 81       	ldd	r24, Y+1	; 0x01
    268a:	0e 94 83 13 	call	0x2706	; 0x2706 <Timer_clearTimerValue>
    268e:	37 c0       	rjmp	.+110    	; 0x26fe <Timer_stop+0xb2>
	}
	else if(timer == Timer1)
    2690:	89 81       	ldd	r24, Y+1	; 0x01
    2692:	81 30       	cpi	r24, 0x01	; 1
    2694:	c9 f4       	brne	.+50     	; 0x26c8 <Timer_stop+0x7c>
	{
		/*clear Pre-scaler for timer 1,and clear timer register value*/
		CLEAR_BIT(TCCR1B,0);
    2696:	ae e4       	ldi	r26, 0x4E	; 78
    2698:	b0 e0       	ldi	r27, 0x00	; 0
    269a:	ee e4       	ldi	r30, 0x4E	; 78
    269c:	f0 e0       	ldi	r31, 0x00	; 0
    269e:	80 81       	ld	r24, Z
    26a0:	8e 7f       	andi	r24, 0xFE	; 254
    26a2:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,1);
    26a4:	ae e4       	ldi	r26, 0x4E	; 78
    26a6:	b0 e0       	ldi	r27, 0x00	; 0
    26a8:	ee e4       	ldi	r30, 0x4E	; 78
    26aa:	f0 e0       	ldi	r31, 0x00	; 0
    26ac:	80 81       	ld	r24, Z
    26ae:	8d 7f       	andi	r24, 0xFD	; 253
    26b0:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,2);
    26b2:	ae e4       	ldi	r26, 0x4E	; 78
    26b4:	b0 e0       	ldi	r27, 0x00	; 0
    26b6:	ee e4       	ldi	r30, 0x4E	; 78
    26b8:	f0 e0       	ldi	r31, 0x00	; 0
    26ba:	80 81       	ld	r24, Z
    26bc:	8b 7f       	andi	r24, 0xFB	; 251
    26be:	8c 93       	st	X, r24
		Timer_clearTimerValue(timer);
    26c0:	89 81       	ldd	r24, Y+1	; 0x01
    26c2:	0e 94 83 13 	call	0x2706	; 0x2706 <Timer_clearTimerValue>
    26c6:	1b c0       	rjmp	.+54     	; 0x26fe <Timer_stop+0xb2>
	}
	else if(timer == Timer2)
    26c8:	89 81       	ldd	r24, Y+1	; 0x01
    26ca:	82 30       	cpi	r24, 0x02	; 2
    26cc:	c1 f4       	brne	.+48     	; 0x26fe <Timer_stop+0xb2>
	{
		/*clear Pre-scaler for timer 2,and clear timer register value*/
		CLEAR_BIT(TCCR2,0);
    26ce:	a5 e4       	ldi	r26, 0x45	; 69
    26d0:	b0 e0       	ldi	r27, 0x00	; 0
    26d2:	e5 e4       	ldi	r30, 0x45	; 69
    26d4:	f0 e0       	ldi	r31, 0x00	; 0
    26d6:	80 81       	ld	r24, Z
    26d8:	8e 7f       	andi	r24, 0xFE	; 254
    26da:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR2,1);
    26dc:	a5 e4       	ldi	r26, 0x45	; 69
    26de:	b0 e0       	ldi	r27, 0x00	; 0
    26e0:	e5 e4       	ldi	r30, 0x45	; 69
    26e2:	f0 e0       	ldi	r31, 0x00	; 0
    26e4:	80 81       	ld	r24, Z
    26e6:	8d 7f       	andi	r24, 0xFD	; 253
    26e8:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR2,2);
    26ea:	a5 e4       	ldi	r26, 0x45	; 69
    26ec:	b0 e0       	ldi	r27, 0x00	; 0
    26ee:	e5 e4       	ldi	r30, 0x45	; 69
    26f0:	f0 e0       	ldi	r31, 0x00	; 0
    26f2:	80 81       	ld	r24, Z
    26f4:	8b 7f       	andi	r24, 0xFB	; 251
    26f6:	8c 93       	st	X, r24
		Timer_clearTimerValue(timer);
    26f8:	89 81       	ldd	r24, Y+1	; 0x01
    26fa:	0e 94 83 13 	call	0x2706	; 0x2706 <Timer_clearTimerValue>
	}
}
    26fe:	0f 90       	pop	r0
    2700:	cf 91       	pop	r28
    2702:	df 91       	pop	r29
    2704:	08 95       	ret

00002706 <Timer_clearTimerValue>:
void Timer_clearTimerValue(TimerNumber timer){
    2706:	df 93       	push	r29
    2708:	cf 93       	push	r28
    270a:	0f 92       	push	r0
    270c:	cd b7       	in	r28, 0x3d	; 61
    270e:	de b7       	in	r29, 0x3e	; 62
    2710:	89 83       	std	Y+1, r24	; 0x01
	if(timer == Timer0)
    2712:	89 81       	ldd	r24, Y+1	; 0x01
    2714:	88 23       	and	r24, r24
    2716:	21 f4       	brne	.+8      	; 0x2720 <Timer_clearTimerValue+0x1a>
		TCNT0 = 0;
    2718:	e2 e5       	ldi	r30, 0x52	; 82
    271a:	f0 e0       	ldi	r31, 0x00	; 0
    271c:	10 82       	st	Z, r1
    271e:	0e c0       	rjmp	.+28     	; 0x273c <Timer_clearTimerValue+0x36>
	else if(timer == Timer1)
    2720:	89 81       	ldd	r24, Y+1	; 0x01
    2722:	81 30       	cpi	r24, 0x01	; 1
    2724:	29 f4       	brne	.+10     	; 0x2730 <Timer_clearTimerValue+0x2a>
			TCNT1= 0 ;
    2726:	ec e4       	ldi	r30, 0x4C	; 76
    2728:	f0 e0       	ldi	r31, 0x00	; 0
    272a:	11 82       	std	Z+1, r1	; 0x01
    272c:	10 82       	st	Z, r1
    272e:	06 c0       	rjmp	.+12     	; 0x273c <Timer_clearTimerValue+0x36>
	else if(timer == Timer2)
    2730:	89 81       	ldd	r24, Y+1	; 0x01
    2732:	82 30       	cpi	r24, 0x02	; 2
    2734:	19 f4       	brne	.+6      	; 0x273c <Timer_clearTimerValue+0x36>
			TCNT2= 0 ;
    2736:	e4 e4       	ldi	r30, 0x44	; 68
    2738:	f0 e0       	ldi	r31, 0x00	; 0
    273a:	10 82       	st	Z, r1
}
    273c:	0f 90       	pop	r0
    273e:	cf 91       	pop	r28
    2740:	df 91       	pop	r29
    2742:	08 95       	ret

00002744 <Timer_getTimerValue>:

uint16 Timer_getTimerValue(TimerNumber timer){
    2744:	df 93       	push	r29
    2746:	cf 93       	push	r28
    2748:	00 d0       	rcall	.+0      	; 0x274a <Timer_getTimerValue+0x6>
    274a:	0f 92       	push	r0
    274c:	cd b7       	in	r28, 0x3d	; 61
    274e:	de b7       	in	r29, 0x3e	; 62
    2750:	89 83       	std	Y+1, r24	; 0x01
	if(timer == Timer0)
    2752:	89 81       	ldd	r24, Y+1	; 0x01
    2754:	88 23       	and	r24, r24
    2756:	41 f4       	brne	.+16     	; 0x2768 <Timer_getTimerValue+0x24>
		return TCNT0;
    2758:	e2 e5       	ldi	r30, 0x52	; 82
    275a:	f0 e0       	ldi	r31, 0x00	; 0
    275c:	80 81       	ld	r24, Z
    275e:	28 2f       	mov	r18, r24
    2760:	30 e0       	ldi	r19, 0x00	; 0
    2762:	3b 83       	std	Y+3, r19	; 0x03
    2764:	2a 83       	std	Y+2, r18	; 0x02
    2766:	11 c0       	rjmp	.+34     	; 0x278a <Timer_getTimerValue+0x46>
	else if(timer == Timer1)
    2768:	89 81       	ldd	r24, Y+1	; 0x01
    276a:	81 30       	cpi	r24, 0x01	; 1
    276c:	39 f4       	brne	.+14     	; 0x277c <Timer_getTimerValue+0x38>
		return TCNT1;
    276e:	ec e4       	ldi	r30, 0x4C	; 76
    2770:	f0 e0       	ldi	r31, 0x00	; 0
    2772:	80 81       	ld	r24, Z
    2774:	91 81       	ldd	r25, Z+1	; 0x01
    2776:	9b 83       	std	Y+3, r25	; 0x03
    2778:	8a 83       	std	Y+2, r24	; 0x02
    277a:	07 c0       	rjmp	.+14     	; 0x278a <Timer_getTimerValue+0x46>
	else
		return TCNT2;
    277c:	e4 e4       	ldi	r30, 0x44	; 68
    277e:	f0 e0       	ldi	r31, 0x00	; 0
    2780:	80 81       	ld	r24, Z
    2782:	28 2f       	mov	r18, r24
    2784:	30 e0       	ldi	r19, 0x00	; 0
    2786:	3b 83       	std	Y+3, r19	; 0x03
    2788:	2a 83       	std	Y+2, r18	; 0x02
    278a:	8a 81       	ldd	r24, Y+2	; 0x02
    278c:	9b 81       	ldd	r25, Y+3	; 0x03
}
    278e:	0f 90       	pop	r0
    2790:	0f 90       	pop	r0
    2792:	0f 90       	pop	r0
    2794:	cf 91       	pop	r28
    2796:	df 91       	pop	r29
    2798:	08 95       	ret

0000279a <Timer_deinit>:


void Timer_deinit(TimerNumber timer){
    279a:	df 93       	push	r29
    279c:	cf 93       	push	r28
    279e:	0f 92       	push	r0
    27a0:	cd b7       	in	r28, 0x3d	; 61
    27a2:	de b7       	in	r29, 0x3e	; 62
    27a4:	89 83       	std	Y+1, r24	; 0x01
	if(timer == Timer0)
    27a6:	89 81       	ldd	r24, Y+1	; 0x01
    27a8:	88 23       	and	r24, r24
    27aa:	71 f4       	brne	.+28     	; 0x27c8 <Timer_deinit+0x2e>
	{
		TCCR0 = 0;
    27ac:	e3 e5       	ldi	r30, 0x53	; 83
    27ae:	f0 e0       	ldi	r31, 0x00	; 0
    27b0:	10 82       	st	Z, r1
		OCR0 = 0;
    27b2:	ec e5       	ldi	r30, 0x5C	; 92
    27b4:	f0 e0       	ldi	r31, 0x00	; 0
    27b6:	10 82       	st	Z, r1
		CLEAR_BIT(TIMSK,TOIE0);
    27b8:	a9 e5       	ldi	r26, 0x59	; 89
    27ba:	b0 e0       	ldi	r27, 0x00	; 0
    27bc:	e9 e5       	ldi	r30, 0x59	; 89
    27be:	f0 e0       	ldi	r31, 0x00	; 0
    27c0:	80 81       	ld	r24, Z
    27c2:	8e 7f       	andi	r24, 0xFE	; 254
    27c4:	8c 93       	st	X, r24
    27c6:	3b c0       	rjmp	.+118    	; 0x283e <Timer_deinit+0xa4>
	}
	else if(timer == Timer1)
    27c8:	89 81       	ldd	r24, Y+1	; 0x01
    27ca:	81 30       	cpi	r24, 0x01	; 1
    27cc:	41 f5       	brne	.+80     	; 0x281e <Timer_deinit+0x84>
	{
		TCCR1A = 0;
    27ce:	ef e4       	ldi	r30, 0x4F	; 79
    27d0:	f0 e0       	ldi	r31, 0x00	; 0
    27d2:	10 82       	st	Z, r1
		TCCR1B = 0;
    27d4:	ee e4       	ldi	r30, 0x4E	; 78
    27d6:	f0 e0       	ldi	r31, 0x00	; 0
    27d8:	10 82       	st	Z, r1
		OCR1A = 0;
    27da:	ea e4       	ldi	r30, 0x4A	; 74
    27dc:	f0 e0       	ldi	r31, 0x00	; 0
    27de:	11 82       	std	Z+1, r1	; 0x01
    27e0:	10 82       	st	Z, r1
		OCR1B = 0;
    27e2:	e8 e4       	ldi	r30, 0x48	; 72
    27e4:	f0 e0       	ldi	r31, 0x00	; 0
    27e6:	11 82       	std	Z+1, r1	; 0x01
    27e8:	10 82       	st	Z, r1
		TCNT1 = 0;
    27ea:	ec e4       	ldi	r30, 0x4C	; 76
    27ec:	f0 e0       	ldi	r31, 0x00	; 0
    27ee:	11 82       	std	Z+1, r1	; 0x01
    27f0:	10 82       	st	Z, r1
		CLEAR_BIT(TIMSK,TOIE1);
    27f2:	a9 e5       	ldi	r26, 0x59	; 89
    27f4:	b0 e0       	ldi	r27, 0x00	; 0
    27f6:	e9 e5       	ldi	r30, 0x59	; 89
    27f8:	f0 e0       	ldi	r31, 0x00	; 0
    27fa:	80 81       	ld	r24, Z
    27fc:	8b 7f       	andi	r24, 0xFB	; 251
    27fe:	8c 93       	st	X, r24
		CLEAR_BIT(TIMSK,OCIE1B) ;
    2800:	a9 e5       	ldi	r26, 0x59	; 89
    2802:	b0 e0       	ldi	r27, 0x00	; 0
    2804:	e9 e5       	ldi	r30, 0x59	; 89
    2806:	f0 e0       	ldi	r31, 0x00	; 0
    2808:	80 81       	ld	r24, Z
    280a:	87 7f       	andi	r24, 0xF7	; 247
    280c:	8c 93       	st	X, r24
		CLEAR_BIT(TIMSK,OCIE1A) ;
    280e:	a9 e5       	ldi	r26, 0x59	; 89
    2810:	b0 e0       	ldi	r27, 0x00	; 0
    2812:	e9 e5       	ldi	r30, 0x59	; 89
    2814:	f0 e0       	ldi	r31, 0x00	; 0
    2816:	80 81       	ld	r24, Z
    2818:	8f 7e       	andi	r24, 0xEF	; 239
    281a:	8c 93       	st	X, r24
    281c:	10 c0       	rjmp	.+32     	; 0x283e <Timer_deinit+0xa4>
	}
	else if(timer == Timer2)
    281e:	89 81       	ldd	r24, Y+1	; 0x01
    2820:	82 30       	cpi	r24, 0x02	; 2
    2822:	69 f4       	brne	.+26     	; 0x283e <Timer_deinit+0xa4>
	{
		TCCR2 = 0;
    2824:	e5 e4       	ldi	r30, 0x45	; 69
    2826:	f0 e0       	ldi	r31, 0x00	; 0
    2828:	10 82       	st	Z, r1
		OCR2 = 0;
    282a:	e3 e4       	ldi	r30, 0x43	; 67
    282c:	f0 e0       	ldi	r31, 0x00	; 0
    282e:	10 82       	st	Z, r1
		CLEAR_BIT(TIMSK,TOIE2);
    2830:	a9 e5       	ldi	r26, 0x59	; 89
    2832:	b0 e0       	ldi	r27, 0x00	; 0
    2834:	e9 e5       	ldi	r30, 0x59	; 89
    2836:	f0 e0       	ldi	r31, 0x00	; 0
    2838:	80 81       	ld	r24, Z
    283a:	8f 7b       	andi	r24, 0xBF	; 191
    283c:	8c 93       	st	X, r24
	}
}
    283e:	0f 90       	pop	r0
    2840:	cf 91       	pop	r28
    2842:	df 91       	pop	r29
    2844:	08 95       	ret

00002846 <Timer_setCallBack>:

void Timer_setCallBack(TimerNumber timer,Mode mode,void(*a_ptr)(void))
{
    2846:	df 93       	push	r29
    2848:	cf 93       	push	r28
    284a:	00 d0       	rcall	.+0      	; 0x284c <Timer_setCallBack+0x6>
    284c:	00 d0       	rcall	.+0      	; 0x284e <Timer_setCallBack+0x8>
    284e:	cd b7       	in	r28, 0x3d	; 61
    2850:	de b7       	in	r29, 0x3e	; 62
    2852:	89 83       	std	Y+1, r24	; 0x01
    2854:	6a 83       	std	Y+2, r22	; 0x02
    2856:	5c 83       	std	Y+4, r21	; 0x04
    2858:	4b 83       	std	Y+3, r20	; 0x03
	if(timer == Timer0)
    285a:	89 81       	ldd	r24, Y+1	; 0x01
    285c:	88 23       	and	r24, r24
    285e:	39 f4       	brne	.+14     	; 0x286e <Timer_setCallBack+0x28>
	{
		g_Timer0_callBackPtr = a_ptr ;
    2860:	8b 81       	ldd	r24, Y+3	; 0x03
    2862:	9c 81       	ldd	r25, Y+4	; 0x04
    2864:	90 93 14 01 	sts	0x0114, r25
    2868:	80 93 13 01 	sts	0x0113, r24
    286c:	26 c0       	rjmp	.+76     	; 0x28ba <Timer_setCallBack+0x74>
	}
	else if (timer == Timer1 && (mode == CTCA || mode == Normal)  )
    286e:	89 81       	ldd	r24, Y+1	; 0x01
    2870:	81 30       	cpi	r24, 0x01	; 1
    2872:	69 f4       	brne	.+26     	; 0x288e <Timer_setCallBack+0x48>
    2874:	8a 81       	ldd	r24, Y+2	; 0x02
    2876:	82 30       	cpi	r24, 0x02	; 2
    2878:	19 f0       	breq	.+6      	; 0x2880 <Timer_setCallBack+0x3a>
    287a:	8a 81       	ldd	r24, Y+2	; 0x02
    287c:	88 23       	and	r24, r24
    287e:	39 f4       	brne	.+14     	; 0x288e <Timer_setCallBack+0x48>
	{
		g_Timer1_callBackPtrA = a_ptr ;
    2880:	8b 81       	ldd	r24, Y+3	; 0x03
    2882:	9c 81       	ldd	r25, Y+4	; 0x04
    2884:	90 93 16 01 	sts	0x0116, r25
    2888:	80 93 15 01 	sts	0x0115, r24
    288c:	16 c0       	rjmp	.+44     	; 0x28ba <Timer_setCallBack+0x74>
	}
	else if (timer == Timer1 && mode ==CTCB)
    288e:	89 81       	ldd	r24, Y+1	; 0x01
    2890:	81 30       	cpi	r24, 0x01	; 1
    2892:	51 f4       	brne	.+20     	; 0x28a8 <Timer_setCallBack+0x62>
    2894:	8a 81       	ldd	r24, Y+2	; 0x02
    2896:	83 30       	cpi	r24, 0x03	; 3
    2898:	39 f4       	brne	.+14     	; 0x28a8 <Timer_setCallBack+0x62>
	{
		g_Timer1_callBackPtrB = a_ptr ;
    289a:	8b 81       	ldd	r24, Y+3	; 0x03
    289c:	9c 81       	ldd	r25, Y+4	; 0x04
    289e:	90 93 18 01 	sts	0x0118, r25
    28a2:	80 93 17 01 	sts	0x0117, r24
    28a6:	09 c0       	rjmp	.+18     	; 0x28ba <Timer_setCallBack+0x74>
	}
	else if (timer == Timer2)
    28a8:	89 81       	ldd	r24, Y+1	; 0x01
    28aa:	82 30       	cpi	r24, 0x02	; 2
    28ac:	31 f4       	brne	.+12     	; 0x28ba <Timer_setCallBack+0x74>
	{
		g_Timer2_callBackPtr = a_ptr ;
    28ae:	8b 81       	ldd	r24, Y+3	; 0x03
    28b0:	9c 81       	ldd	r25, Y+4	; 0x04
    28b2:	90 93 1a 01 	sts	0x011A, r25
    28b6:	80 93 19 01 	sts	0x0119, r24
	}
}
    28ba:	0f 90       	pop	r0
    28bc:	0f 90       	pop	r0
    28be:	0f 90       	pop	r0
    28c0:	0f 90       	pop	r0
    28c2:	cf 91       	pop	r28
    28c4:	df 91       	pop	r29
    28c6:	08 95       	ret

000028c8 <UART_init>:
 *******************************************************************************/


#include "uart.h"

void UART_init(UART_configType* UART_configTypePtr){
    28c8:	0f 93       	push	r16
    28ca:	1f 93       	push	r17
    28cc:	df 93       	push	r29
    28ce:	cf 93       	push	r28
    28d0:	00 d0       	rcall	.+0      	; 0x28d2 <UART_init+0xa>
    28d2:	cd b7       	in	r28, 0x3d	; 61
    28d4:	de b7       	in	r29, 0x3e	; 62
    28d6:	9a 83       	std	Y+2, r25	; 0x02
    28d8:	89 83       	std	Y+1, r24	; 0x01
	UCSRA = (1<<U2X);                         //double speed mode
    28da:	eb e2       	ldi	r30, 0x2B	; 43
    28dc:	f0 e0       	ldi	r31, 0x00	; 0
    28de:	82 e0       	ldi	r24, 0x02	; 2
    28e0:	80 83       	st	Z, r24
	UCSRB = (1<<RXEN) | (1<<TXEN) ;          //Receiver and Transmitter enable
    28e2:	ea e2       	ldi	r30, 0x2A	; 42
    28e4:	f0 e0       	ldi	r31, 0x00	; 0
    28e6:	88 e1       	ldi	r24, 0x18	; 24
    28e8:	80 83       	st	Z, r24
	UCSRC = (1<<URSEL);                     //select bit for write and read from UCSRC
    28ea:	e0 e4       	ldi	r30, 0x40	; 64
    28ec:	f0 e0       	ldi	r31, 0x00	; 0
    28ee:	80 e8       	ldi	r24, 0x80	; 128
    28f0:	80 83       	st	Z, r24
	if(UART_configTypePtr->type)
    28f2:	e9 81       	ldd	r30, Y+1	; 0x01
    28f4:	fa 81       	ldd	r31, Y+2	; 0x02
    28f6:	80 81       	ld	r24, Z
    28f8:	88 23       	and	r24, r24
    28fa:	39 f0       	breq	.+14     	; 0x290a <UART_init+0x42>
		SET_BIT(UCSRC,UMSEL);                //synchronous mode
    28fc:	a0 e4       	ldi	r26, 0x40	; 64
    28fe:	b0 e0       	ldi	r27, 0x00	; 0
    2900:	e0 e4       	ldi	r30, 0x40	; 64
    2902:	f0 e0       	ldi	r31, 0x00	; 0
    2904:	80 81       	ld	r24, Z
    2906:	80 64       	ori	r24, 0x40	; 64
    2908:	8c 93       	st	X, r24
	//parity bit mode(disabled,even or odd)
	UCSRC = (UCSRC & 0xCF) | ( ((UART_configTypePtr->parity)<<4) & 0x30 ) ;
    290a:	a0 e4       	ldi	r26, 0x40	; 64
    290c:	b0 e0       	ldi	r27, 0x00	; 0
    290e:	e0 e4       	ldi	r30, 0x40	; 64
    2910:	f0 e0       	ldi	r31, 0x00	; 0
    2912:	80 81       	ld	r24, Z
    2914:	28 2f       	mov	r18, r24
    2916:	2f 7c       	andi	r18, 0xCF	; 207
    2918:	e9 81       	ldd	r30, Y+1	; 0x01
    291a:	fa 81       	ldd	r31, Y+2	; 0x02
    291c:	82 81       	ldd	r24, Z+2	; 0x02
    291e:	88 2f       	mov	r24, r24
    2920:	90 e0       	ldi	r25, 0x00	; 0
    2922:	82 95       	swap	r24
    2924:	92 95       	swap	r25
    2926:	90 7f       	andi	r25, 0xF0	; 240
    2928:	98 27       	eor	r25, r24
    292a:	80 7f       	andi	r24, 0xF0	; 240
    292c:	98 27       	eor	r25, r24
    292e:	80 73       	andi	r24, 0x30	; 48
    2930:	82 2b       	or	r24, r18
    2932:	8c 93       	st	X, r24
	/*number of bits in one UART frame*/
	UCSRC = (UCSRC & 0xF9) | ( ((UART_configTypePtr->number)<<1) & 0x06 ) ;
    2934:	a0 e4       	ldi	r26, 0x40	; 64
    2936:	b0 e0       	ldi	r27, 0x00	; 0
    2938:	e0 e4       	ldi	r30, 0x40	; 64
    293a:	f0 e0       	ldi	r31, 0x00	; 0
    293c:	80 81       	ld	r24, Z
    293e:	28 2f       	mov	r18, r24
    2940:	29 7f       	andi	r18, 0xF9	; 249
    2942:	e9 81       	ldd	r30, Y+1	; 0x01
    2944:	fa 81       	ldd	r31, Y+2	; 0x02
    2946:	81 81       	ldd	r24, Z+1	; 0x01
    2948:	88 2f       	mov	r24, r24
    294a:	90 e0       	ldi	r25, 0x00	; 0
    294c:	88 0f       	add	r24, r24
    294e:	99 1f       	adc	r25, r25
    2950:	86 70       	andi	r24, 0x06	; 6
    2952:	82 2b       	or	r24, r18
    2954:	8c 93       	st	X, r24
	if(UART_configTypePtr->number == Nine)
    2956:	e9 81       	ldd	r30, Y+1	; 0x01
    2958:	fa 81       	ldd	r31, Y+2	; 0x02
    295a:	81 81       	ldd	r24, Z+1	; 0x01
    295c:	87 30       	cpi	r24, 0x07	; 7
    295e:	39 f4       	brne	.+14     	; 0x296e <UART_init+0xa6>
		SET_BIT(UCSRB,UCSZ2);
    2960:	aa e2       	ldi	r26, 0x2A	; 42
    2962:	b0 e0       	ldi	r27, 0x00	; 0
    2964:	ea e2       	ldi	r30, 0x2A	; 42
    2966:	f0 e0       	ldi	r31, 0x00	; 0
    2968:	80 81       	ld	r24, Z
    296a:	84 60       	ori	r24, 0x04	; 4
    296c:	8c 93       	st	X, r24
	//CLEAR_BIT(UBRRH,URSEL);             //select bit for write and read from UBRRH
	UBRRL =( ( F_CPU/(8UL * UART_configTypePtr->buadRate) ) -1);
    296e:	09 e2       	ldi	r16, 0x29	; 41
    2970:	10 e0       	ldi	r17, 0x00	; 0
    2972:	e9 81       	ldd	r30, Y+1	; 0x01
    2974:	fa 81       	ldd	r31, Y+2	; 0x02
    2976:	83 81       	ldd	r24, Z+3	; 0x03
    2978:	94 81       	ldd	r25, Z+4	; 0x04
    297a:	cc 01       	movw	r24, r24
    297c:	a0 e0       	ldi	r26, 0x00	; 0
    297e:	b0 e0       	ldi	r27, 0x00	; 0
    2980:	88 0f       	add	r24, r24
    2982:	99 1f       	adc	r25, r25
    2984:	aa 1f       	adc	r26, r26
    2986:	bb 1f       	adc	r27, r27
    2988:	88 0f       	add	r24, r24
    298a:	99 1f       	adc	r25, r25
    298c:	aa 1f       	adc	r26, r26
    298e:	bb 1f       	adc	r27, r27
    2990:	88 0f       	add	r24, r24
    2992:	99 1f       	adc	r25, r25
    2994:	aa 1f       	adc	r26, r26
    2996:	bb 1f       	adc	r27, r27
    2998:	9c 01       	movw	r18, r24
    299a:	ad 01       	movw	r20, r26
    299c:	80 e0       	ldi	r24, 0x00	; 0
    299e:	92 e1       	ldi	r25, 0x12	; 18
    29a0:	aa e7       	ldi	r26, 0x7A	; 122
    29a2:	b0 e0       	ldi	r27, 0x00	; 0
    29a4:	bc 01       	movw	r22, r24
    29a6:	cd 01       	movw	r24, r26
    29a8:	0e 94 d8 15 	call	0x2bb0	; 0x2bb0 <__udivmodsi4>
    29ac:	da 01       	movw	r26, r20
    29ae:	c9 01       	movw	r24, r18
    29b0:	81 50       	subi	r24, 0x01	; 1
    29b2:	f8 01       	movw	r30, r16
    29b4:	80 83       	st	Z, r24
	UBRRH = ((( F_CPU/(8UL * UART_configTypePtr->buadRate) ) -1)>>8);
    29b6:	00 e4       	ldi	r16, 0x40	; 64
    29b8:	10 e0       	ldi	r17, 0x00	; 0
    29ba:	e9 81       	ldd	r30, Y+1	; 0x01
    29bc:	fa 81       	ldd	r31, Y+2	; 0x02
    29be:	83 81       	ldd	r24, Z+3	; 0x03
    29c0:	94 81       	ldd	r25, Z+4	; 0x04
    29c2:	cc 01       	movw	r24, r24
    29c4:	a0 e0       	ldi	r26, 0x00	; 0
    29c6:	b0 e0       	ldi	r27, 0x00	; 0
    29c8:	88 0f       	add	r24, r24
    29ca:	99 1f       	adc	r25, r25
    29cc:	aa 1f       	adc	r26, r26
    29ce:	bb 1f       	adc	r27, r27
    29d0:	88 0f       	add	r24, r24
    29d2:	99 1f       	adc	r25, r25
    29d4:	aa 1f       	adc	r26, r26
    29d6:	bb 1f       	adc	r27, r27
    29d8:	88 0f       	add	r24, r24
    29da:	99 1f       	adc	r25, r25
    29dc:	aa 1f       	adc	r26, r26
    29de:	bb 1f       	adc	r27, r27
    29e0:	9c 01       	movw	r18, r24
    29e2:	ad 01       	movw	r20, r26
    29e4:	80 e0       	ldi	r24, 0x00	; 0
    29e6:	92 e1       	ldi	r25, 0x12	; 18
    29e8:	aa e7       	ldi	r26, 0x7A	; 122
    29ea:	b0 e0       	ldi	r27, 0x00	; 0
    29ec:	bc 01       	movw	r22, r24
    29ee:	cd 01       	movw	r24, r26
    29f0:	0e 94 d8 15 	call	0x2bb0	; 0x2bb0 <__udivmodsi4>
    29f4:	da 01       	movw	r26, r20
    29f6:	c9 01       	movw	r24, r18
    29f8:	01 97       	sbiw	r24, 0x01	; 1
    29fa:	a1 09       	sbc	r26, r1
    29fc:	b1 09       	sbc	r27, r1
    29fe:	89 2f       	mov	r24, r25
    2a00:	9a 2f       	mov	r25, r26
    2a02:	ab 2f       	mov	r26, r27
    2a04:	bb 27       	eor	r27, r27
    2a06:	f8 01       	movw	r30, r16
    2a08:	80 83       	st	Z, r24
}
    2a0a:	0f 90       	pop	r0
    2a0c:	0f 90       	pop	r0
    2a0e:	cf 91       	pop	r28
    2a10:	df 91       	pop	r29
    2a12:	1f 91       	pop	r17
    2a14:	0f 91       	pop	r16
    2a16:	08 95       	ret

00002a18 <UART_sendByte>:


void UART_sendByte(uint8 data){
    2a18:	df 93       	push	r29
    2a1a:	cf 93       	push	r28
    2a1c:	0f 92       	push	r0
    2a1e:	cd b7       	in	r28, 0x3d	; 61
    2a20:	de b7       	in	r29, 0x3e	; 62
    2a22:	89 83       	std	Y+1, r24	; 0x01
	UDR = data;                            //put data in UART data register
    2a24:	ec e2       	ldi	r30, 0x2C	; 44
    2a26:	f0 e0       	ldi	r31, 0x00	; 0
    2a28:	89 81       	ldd	r24, Y+1	; 0x01
    2a2a:	80 83       	st	Z, r24
	while(BIT_IS_CLEAR(UCSRA,TXC));        //wait until transition complete
    2a2c:	eb e2       	ldi	r30, 0x2B	; 43
    2a2e:	f0 e0       	ldi	r31, 0x00	; 0
    2a30:	80 81       	ld	r24, Z
    2a32:	88 2f       	mov	r24, r24
    2a34:	90 e0       	ldi	r25, 0x00	; 0
    2a36:	80 74       	andi	r24, 0x40	; 64
    2a38:	90 70       	andi	r25, 0x00	; 0
    2a3a:	00 97       	sbiw	r24, 0x00	; 0
    2a3c:	b9 f3       	breq	.-18     	; 0x2a2c <UART_sendByte+0x14>
	SET_BIT(UCSRA,TXC);                    //clear the flag
    2a3e:	ab e2       	ldi	r26, 0x2B	; 43
    2a40:	b0 e0       	ldi	r27, 0x00	; 0
    2a42:	eb e2       	ldi	r30, 0x2B	; 43
    2a44:	f0 e0       	ldi	r31, 0x00	; 0
    2a46:	80 81       	ld	r24, Z
    2a48:	80 64       	ori	r24, 0x40	; 64
    2a4a:	8c 93       	st	X, r24
}
    2a4c:	0f 90       	pop	r0
    2a4e:	cf 91       	pop	r28
    2a50:	df 91       	pop	r29
    2a52:	08 95       	ret

00002a54 <UART_SendByte>:

void UART_SendByte(uint8 data)
{
    2a54:	df 93       	push	r29
    2a56:	cf 93       	push	r28
    2a58:	0f 92       	push	r0
    2a5a:	cd b7       	in	r28, 0x3d	; 61
    2a5c:	de b7       	in	r29, 0x3e	; 62
    2a5e:	89 83       	std	Y+1, r24	; 0x01
	while(UART_receiveByte() != UARTREADY);
    2a60:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <UART_receiveByte>
    2a64:	82 35       	cpi	r24, 0x52	; 82
    2a66:	e1 f7       	brne	.-8      	; 0x2a60 <UART_SendByte+0xc>
	UART_sendByte(UARTREADY);
    2a68:	82 e5       	ldi	r24, 0x52	; 82
    2a6a:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <UART_sendByte>
	UART_sendByte(data);
    2a6e:	89 81       	ldd	r24, Y+1	; 0x01
    2a70:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <UART_sendByte>
}
    2a74:	0f 90       	pop	r0
    2a76:	cf 91       	pop	r28
    2a78:	df 91       	pop	r29
    2a7a:	08 95       	ret

00002a7c <UART_receiveByte>:

uint8 UART_receiveByte(void){
    2a7c:	df 93       	push	r29
    2a7e:	cf 93       	push	r28
    2a80:	0f 92       	push	r0
    2a82:	cd b7       	in	r28, 0x3d	; 61
    2a84:	de b7       	in	r29, 0x3e	; 62
	while(BIT_IS_CLEAR(UCSRA,RXC));      //wait until receive complete
    2a86:	eb e2       	ldi	r30, 0x2B	; 43
    2a88:	f0 e0       	ldi	r31, 0x00	; 0
    2a8a:	80 81       	ld	r24, Z
    2a8c:	88 23       	and	r24, r24
    2a8e:	dc f7       	brge	.-10     	; 0x2a86 <UART_receiveByte+0xa>
	if(!( UCSRA & 0x1C ))                //check for errors
    2a90:	eb e2       	ldi	r30, 0x2B	; 43
    2a92:	f0 e0       	ldi	r31, 0x00	; 0
    2a94:	80 81       	ld	r24, Z
    2a96:	88 2f       	mov	r24, r24
    2a98:	90 e0       	ldi	r25, 0x00	; 0
    2a9a:	8c 71       	andi	r24, 0x1C	; 28
    2a9c:	90 70       	andi	r25, 0x00	; 0
    2a9e:	00 97       	sbiw	r24, 0x00	; 0
    2aa0:	29 f4       	brne	.+10     	; 0x2aac <UART_receiveByte+0x30>
	return UDR;
    2aa2:	ec e2       	ldi	r30, 0x2C	; 44
    2aa4:	f0 e0       	ldi	r31, 0x00	; 0
    2aa6:	80 81       	ld	r24, Z
    2aa8:	89 83       	std	Y+1, r24	; 0x01
    2aaa:	01 c0       	rjmp	.+2      	; 0x2aae <UART_receiveByte+0x32>
	else
		return 0;
    2aac:	19 82       	std	Y+1, r1	; 0x01
    2aae:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ab0:	0f 90       	pop	r0
    2ab2:	cf 91       	pop	r28
    2ab4:	df 91       	pop	r29
    2ab6:	08 95       	ret

00002ab8 <UART_ReceiveByte>:

uint8 UART_ReceiveByte(void)
{
    2ab8:	df 93       	push	r29
    2aba:	cf 93       	push	r28
    2abc:	cd b7       	in	r28, 0x3d	; 61
    2abe:	de b7       	in	r29, 0x3e	; 62
	//check if master is ready for UART connection
	UART_sendByte(UARTREADY);
    2ac0:	82 e5       	ldi	r24, 0x52	; 82
    2ac2:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <UART_sendByte>
	while(UART_receiveByte() != UARTREADY);
    2ac6:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <UART_receiveByte>
    2aca:	82 35       	cpi	r24, 0x52	; 82
    2acc:	e1 f7       	brne	.-8      	; 0x2ac6 <UART_ReceiveByte+0xe>
	return UART_receiveByte();
    2ace:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <UART_receiveByte>
}
    2ad2:	cf 91       	pop	r28
    2ad4:	df 91       	pop	r29
    2ad6:	08 95       	ret

00002ad8 <UART_sendString>:
void UART_sendString(const uint8 *Str)
{
    2ad8:	df 93       	push	r29
    2ada:	cf 93       	push	r28
    2adc:	00 d0       	rcall	.+0      	; 0x2ade <UART_sendString+0x6>
    2ade:	0f 92       	push	r0
    2ae0:	cd b7       	in	r28, 0x3d	; 61
    2ae2:	de b7       	in	r29, 0x3e	; 62
    2ae4:	9b 83       	std	Y+3, r25	; 0x03
    2ae6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2ae8:	19 82       	std	Y+1, r1	; 0x01
    2aea:	0e c0       	rjmp	.+28     	; 0x2b08 <UART_sendString+0x30>
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2aec:	89 81       	ldd	r24, Y+1	; 0x01
    2aee:	28 2f       	mov	r18, r24
    2af0:	30 e0       	ldi	r19, 0x00	; 0
    2af2:	8a 81       	ldd	r24, Y+2	; 0x02
    2af4:	9b 81       	ldd	r25, Y+3	; 0x03
    2af6:	fc 01       	movw	r30, r24
    2af8:	e2 0f       	add	r30, r18
    2afa:	f3 1f       	adc	r31, r19
    2afc:	80 81       	ld	r24, Z
    2afe:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <UART_sendByte>
		i++;
    2b02:	89 81       	ldd	r24, Y+1	; 0x01
    2b04:	8f 5f       	subi	r24, 0xFF	; 255
    2b06:	89 83       	std	Y+1, r24	; 0x01
	return UART_receiveByte();
}
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2b08:	89 81       	ldd	r24, Y+1	; 0x01
    2b0a:	28 2f       	mov	r18, r24
    2b0c:	30 e0       	ldi	r19, 0x00	; 0
    2b0e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b10:	9b 81       	ldd	r25, Y+3	; 0x03
    2b12:	fc 01       	movw	r30, r24
    2b14:	e2 0f       	add	r30, r18
    2b16:	f3 1f       	adc	r31, r19
    2b18:	80 81       	ld	r24, Z
    2b1a:	88 23       	and	r24, r24
    2b1c:	39 f7       	brne	.-50     	; 0x2aec <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
		i++;
	}
}
    2b1e:	0f 90       	pop	r0
    2b20:	0f 90       	pop	r0
    2b22:	0f 90       	pop	r0
    2b24:	cf 91       	pop	r28
    2b26:	df 91       	pop	r29
    2b28:	08 95       	ret

00002b2a <UART_receiveString>:

void UART_receiveString(uint8 *Str)
{
    2b2a:	0f 93       	push	r16
    2b2c:	1f 93       	push	r17
    2b2e:	df 93       	push	r29
    2b30:	cf 93       	push	r28
    2b32:	00 d0       	rcall	.+0      	; 0x2b34 <UART_receiveString+0xa>
    2b34:	0f 92       	push	r0
    2b36:	cd b7       	in	r28, 0x3d	; 61
    2b38:	de b7       	in	r29, 0x3e	; 62
    2b3a:	9b 83       	std	Y+3, r25	; 0x03
    2b3c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2b3e:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = UART_receiveByte();
    2b40:	89 81       	ldd	r24, Y+1	; 0x01
    2b42:	28 2f       	mov	r18, r24
    2b44:	30 e0       	ldi	r19, 0x00	; 0
    2b46:	8a 81       	ldd	r24, Y+2	; 0x02
    2b48:	9b 81       	ldd	r25, Y+3	; 0x03
    2b4a:	8c 01       	movw	r16, r24
    2b4c:	02 0f       	add	r16, r18
    2b4e:	13 1f       	adc	r17, r19
    2b50:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <UART_receiveByte>
    2b54:	f8 01       	movw	r30, r16
    2b56:	80 83       	st	Z, r24
    2b58:	0f c0       	rjmp	.+30     	; 0x2b78 <UART_receiveString+0x4e>
	while(Str[i] != '#')
	{
		i++;
    2b5a:	89 81       	ldd	r24, Y+1	; 0x01
    2b5c:	8f 5f       	subi	r24, 0xFF	; 255
    2b5e:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_receiveByte();
    2b60:	89 81       	ldd	r24, Y+1	; 0x01
    2b62:	28 2f       	mov	r18, r24
    2b64:	30 e0       	ldi	r19, 0x00	; 0
    2b66:	8a 81       	ldd	r24, Y+2	; 0x02
    2b68:	9b 81       	ldd	r25, Y+3	; 0x03
    2b6a:	8c 01       	movw	r16, r24
    2b6c:	02 0f       	add	r16, r18
    2b6e:	13 1f       	adc	r17, r19
    2b70:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <UART_receiveByte>
    2b74:	f8 01       	movw	r30, r16
    2b76:	80 83       	st	Z, r24

void UART_receiveString(uint8 *Str)
{
	uint8 i = 0;
	Str[i] = UART_receiveByte();
	while(Str[i] != '#')
    2b78:	89 81       	ldd	r24, Y+1	; 0x01
    2b7a:	28 2f       	mov	r18, r24
    2b7c:	30 e0       	ldi	r19, 0x00	; 0
    2b7e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b80:	9b 81       	ldd	r25, Y+3	; 0x03
    2b82:	fc 01       	movw	r30, r24
    2b84:	e2 0f       	add	r30, r18
    2b86:	f3 1f       	adc	r31, r19
    2b88:	80 81       	ld	r24, Z
    2b8a:	83 32       	cpi	r24, 0x23	; 35
    2b8c:	31 f7       	brne	.-52     	; 0x2b5a <UART_receiveString+0x30>
	{
		i++;
		Str[i] = UART_receiveByte();
	}
	Str[i] = '\0';
    2b8e:	89 81       	ldd	r24, Y+1	; 0x01
    2b90:	28 2f       	mov	r18, r24
    2b92:	30 e0       	ldi	r19, 0x00	; 0
    2b94:	8a 81       	ldd	r24, Y+2	; 0x02
    2b96:	9b 81       	ldd	r25, Y+3	; 0x03
    2b98:	fc 01       	movw	r30, r24
    2b9a:	e2 0f       	add	r30, r18
    2b9c:	f3 1f       	adc	r31, r19
    2b9e:	10 82       	st	Z, r1
}
    2ba0:	0f 90       	pop	r0
    2ba2:	0f 90       	pop	r0
    2ba4:	0f 90       	pop	r0
    2ba6:	cf 91       	pop	r28
    2ba8:	df 91       	pop	r29
    2baa:	1f 91       	pop	r17
    2bac:	0f 91       	pop	r16
    2bae:	08 95       	ret

00002bb0 <__udivmodsi4>:
    2bb0:	a1 e2       	ldi	r26, 0x21	; 33
    2bb2:	1a 2e       	mov	r1, r26
    2bb4:	aa 1b       	sub	r26, r26
    2bb6:	bb 1b       	sub	r27, r27
    2bb8:	fd 01       	movw	r30, r26
    2bba:	0d c0       	rjmp	.+26     	; 0x2bd6 <__udivmodsi4_ep>

00002bbc <__udivmodsi4_loop>:
    2bbc:	aa 1f       	adc	r26, r26
    2bbe:	bb 1f       	adc	r27, r27
    2bc0:	ee 1f       	adc	r30, r30
    2bc2:	ff 1f       	adc	r31, r31
    2bc4:	a2 17       	cp	r26, r18
    2bc6:	b3 07       	cpc	r27, r19
    2bc8:	e4 07       	cpc	r30, r20
    2bca:	f5 07       	cpc	r31, r21
    2bcc:	20 f0       	brcs	.+8      	; 0x2bd6 <__udivmodsi4_ep>
    2bce:	a2 1b       	sub	r26, r18
    2bd0:	b3 0b       	sbc	r27, r19
    2bd2:	e4 0b       	sbc	r30, r20
    2bd4:	f5 0b       	sbc	r31, r21

00002bd6 <__udivmodsi4_ep>:
    2bd6:	66 1f       	adc	r22, r22
    2bd8:	77 1f       	adc	r23, r23
    2bda:	88 1f       	adc	r24, r24
    2bdc:	99 1f       	adc	r25, r25
    2bde:	1a 94       	dec	r1
    2be0:	69 f7       	brne	.-38     	; 0x2bbc <__udivmodsi4_loop>
    2be2:	60 95       	com	r22
    2be4:	70 95       	com	r23
    2be6:	80 95       	com	r24
    2be8:	90 95       	com	r25
    2bea:	9b 01       	movw	r18, r22
    2bec:	ac 01       	movw	r20, r24
    2bee:	bd 01       	movw	r22, r26
    2bf0:	cf 01       	movw	r24, r30
    2bf2:	08 95       	ret

00002bf4 <__prologue_saves__>:
    2bf4:	2f 92       	push	r2
    2bf6:	3f 92       	push	r3
    2bf8:	4f 92       	push	r4
    2bfa:	5f 92       	push	r5
    2bfc:	6f 92       	push	r6
    2bfe:	7f 92       	push	r7
    2c00:	8f 92       	push	r8
    2c02:	9f 92       	push	r9
    2c04:	af 92       	push	r10
    2c06:	bf 92       	push	r11
    2c08:	cf 92       	push	r12
    2c0a:	df 92       	push	r13
    2c0c:	ef 92       	push	r14
    2c0e:	ff 92       	push	r15
    2c10:	0f 93       	push	r16
    2c12:	1f 93       	push	r17
    2c14:	cf 93       	push	r28
    2c16:	df 93       	push	r29
    2c18:	cd b7       	in	r28, 0x3d	; 61
    2c1a:	de b7       	in	r29, 0x3e	; 62
    2c1c:	ca 1b       	sub	r28, r26
    2c1e:	db 0b       	sbc	r29, r27
    2c20:	0f b6       	in	r0, 0x3f	; 63
    2c22:	f8 94       	cli
    2c24:	de bf       	out	0x3e, r29	; 62
    2c26:	0f be       	out	0x3f, r0	; 63
    2c28:	cd bf       	out	0x3d, r28	; 61
    2c2a:	09 94       	ijmp

00002c2c <__epilogue_restores__>:
    2c2c:	2a 88       	ldd	r2, Y+18	; 0x12
    2c2e:	39 88       	ldd	r3, Y+17	; 0x11
    2c30:	48 88       	ldd	r4, Y+16	; 0x10
    2c32:	5f 84       	ldd	r5, Y+15	; 0x0f
    2c34:	6e 84       	ldd	r6, Y+14	; 0x0e
    2c36:	7d 84       	ldd	r7, Y+13	; 0x0d
    2c38:	8c 84       	ldd	r8, Y+12	; 0x0c
    2c3a:	9b 84       	ldd	r9, Y+11	; 0x0b
    2c3c:	aa 84       	ldd	r10, Y+10	; 0x0a
    2c3e:	b9 84       	ldd	r11, Y+9	; 0x09
    2c40:	c8 84       	ldd	r12, Y+8	; 0x08
    2c42:	df 80       	ldd	r13, Y+7	; 0x07
    2c44:	ee 80       	ldd	r14, Y+6	; 0x06
    2c46:	fd 80       	ldd	r15, Y+5	; 0x05
    2c48:	0c 81       	ldd	r16, Y+4	; 0x04
    2c4a:	1b 81       	ldd	r17, Y+3	; 0x03
    2c4c:	aa 81       	ldd	r26, Y+2	; 0x02
    2c4e:	b9 81       	ldd	r27, Y+1	; 0x01
    2c50:	ce 0f       	add	r28, r30
    2c52:	d1 1d       	adc	r29, r1
    2c54:	0f b6       	in	r0, 0x3f	; 63
    2c56:	f8 94       	cli
    2c58:	de bf       	out	0x3e, r29	; 62
    2c5a:	0f be       	out	0x3f, r0	; 63
    2c5c:	cd bf       	out	0x3d, r28	; 61
    2c5e:	ed 01       	movw	r28, r26
    2c60:	08 95       	ret

00002c62 <itoa>:
    2c62:	fb 01       	movw	r30, r22
    2c64:	9f 01       	movw	r18, r30
    2c66:	e8 94       	clt
    2c68:	42 30       	cpi	r20, 0x02	; 2
    2c6a:	c4 f0       	brlt	.+48     	; 0x2c9c <itoa+0x3a>
    2c6c:	45 32       	cpi	r20, 0x25	; 37
    2c6e:	b4 f4       	brge	.+44     	; 0x2c9c <itoa+0x3a>
    2c70:	4a 30       	cpi	r20, 0x0A	; 10
    2c72:	29 f4       	brne	.+10     	; 0x2c7e <itoa+0x1c>
    2c74:	97 fb       	bst	r25, 7
    2c76:	1e f4       	brtc	.+6      	; 0x2c7e <itoa+0x1c>
    2c78:	90 95       	com	r25
    2c7a:	81 95       	neg	r24
    2c7c:	9f 4f       	sbci	r25, 0xFF	; 255
    2c7e:	64 2f       	mov	r22, r20
    2c80:	77 27       	eor	r23, r23
    2c82:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <__udivmodhi4>
    2c86:	80 5d       	subi	r24, 0xD0	; 208
    2c88:	8a 33       	cpi	r24, 0x3A	; 58
    2c8a:	0c f0       	brlt	.+2      	; 0x2c8e <itoa+0x2c>
    2c8c:	89 5d       	subi	r24, 0xD9	; 217
    2c8e:	81 93       	st	Z+, r24
    2c90:	cb 01       	movw	r24, r22
    2c92:	00 97       	sbiw	r24, 0x00	; 0
    2c94:	a1 f7       	brne	.-24     	; 0x2c7e <itoa+0x1c>
    2c96:	16 f4       	brtc	.+4      	; 0x2c9c <itoa+0x3a>
    2c98:	5d e2       	ldi	r21, 0x2D	; 45
    2c9a:	51 93       	st	Z+, r21
    2c9c:	10 82       	st	Z, r1
    2c9e:	c9 01       	movw	r24, r18
    2ca0:	0c 94 52 16 	jmp	0x2ca4	; 0x2ca4 <strrev>

00002ca4 <strrev>:
    2ca4:	dc 01       	movw	r26, r24
    2ca6:	fc 01       	movw	r30, r24
    2ca8:	67 2f       	mov	r22, r23
    2caa:	71 91       	ld	r23, Z+
    2cac:	77 23       	and	r23, r23
    2cae:	e1 f7       	brne	.-8      	; 0x2ca8 <strrev+0x4>
    2cb0:	32 97       	sbiw	r30, 0x02	; 2
    2cb2:	04 c0       	rjmp	.+8      	; 0x2cbc <strrev+0x18>
    2cb4:	7c 91       	ld	r23, X
    2cb6:	6d 93       	st	X+, r22
    2cb8:	70 83       	st	Z, r23
    2cba:	62 91       	ld	r22, -Z
    2cbc:	ae 17       	cp	r26, r30
    2cbe:	bf 07       	cpc	r27, r31
    2cc0:	c8 f3       	brcs	.-14     	; 0x2cb4 <strrev+0x10>
    2cc2:	08 95       	ret

00002cc4 <__udivmodhi4>:
    2cc4:	aa 1b       	sub	r26, r26
    2cc6:	bb 1b       	sub	r27, r27
    2cc8:	51 e1       	ldi	r21, 0x11	; 17
    2cca:	07 c0       	rjmp	.+14     	; 0x2cda <__udivmodhi4_ep>

00002ccc <__udivmodhi4_loop>:
    2ccc:	aa 1f       	adc	r26, r26
    2cce:	bb 1f       	adc	r27, r27
    2cd0:	a6 17       	cp	r26, r22
    2cd2:	b7 07       	cpc	r27, r23
    2cd4:	10 f0       	brcs	.+4      	; 0x2cda <__udivmodhi4_ep>
    2cd6:	a6 1b       	sub	r26, r22
    2cd8:	b7 0b       	sbc	r27, r23

00002cda <__udivmodhi4_ep>:
    2cda:	88 1f       	adc	r24, r24
    2cdc:	99 1f       	adc	r25, r25
    2cde:	5a 95       	dec	r21
    2ce0:	a9 f7       	brne	.-22     	; 0x2ccc <__udivmodhi4_loop>
    2ce2:	80 95       	com	r24
    2ce4:	90 95       	com	r25
    2ce6:	bc 01       	movw	r22, r24
    2ce8:	cd 01       	movw	r24, r26
    2cea:	08 95       	ret

00002cec <_exit>:
    2cec:	f8 94       	cli

00002cee <__stop_program>:
    2cee:	ff cf       	rjmp	.-2      	; 0x2cee <__stop_program>
