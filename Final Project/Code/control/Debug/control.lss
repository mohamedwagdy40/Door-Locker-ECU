
control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000231a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  0000231a  000023ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  0080006e  0080006e  000023bc  2**0
                  ALLOC
  3 .stab         000021cc  00000000  00000000  000023bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000111c  00000000  00000000  00004588  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000056a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000057e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00005954  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000759d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008488  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009238  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009398  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009625  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009df3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 d3 0c 	jmp	0x19a6	; 0x19a6 <__vector_3>
      10:	0c 94 06 0d 	jmp	0x1a0c	; 0x1a0c <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 6d 0c 	jmp	0x18da	; 0x18da <__vector_6>
      1c:	0c 94 a0 0c 	jmp	0x1940	; 0x1940 <__vector_7>
      20:	0c 94 3a 0c 	jmp	0x1874	; 0x1874 <__vector_8>
      24:	0c 94 d4 0b 	jmp	0x17a8	; 0x17a8 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 07 0c 	jmp	0x180e	; 0x180e <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e1       	ldi	r30, 0x1A	; 26
      68:	f3 e2       	ldi	r31, 0x23	; 35
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 36       	cpi	r26, 0x6E	; 110
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae e6       	ldi	r26, 0x6E	; 110
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 37       	cpi	r26, 0x76	; 118
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 07 	call	0xf46	; 0xf46 <main>
      8a:	0c 94 8b 11 	jmp	0x2316	; 0x2316 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 54 11 	jmp	0x22a8	; 0x22a8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 70 11 	jmp	0x22e0	; 0x22e0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 60 11 	jmp	0x22c0	; 0x22c0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 7c 11 	jmp	0x22f8	; 0x22f8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 60 11 	jmp	0x22c0	; 0x22c0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 7c 11 	jmp	0x22f8	; 0x22f8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 54 11 	jmp	0x22a8	; 0x22a8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 70 11 	jmp	0x22e0	; 0x22e0 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 60 11 	jmp	0x22c0	; 0x22c0 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 7c 11 	jmp	0x22f8	; 0x22f8 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 60 11 	jmp	0x22c0	; 0x22c0 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 7c 11 	jmp	0x22f8	; 0x22f8 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 60 11 	jmp	0x22c0	; 0x22c0 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 7c 11 	jmp	0x22f8	; 0x22f8 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 64 11 	jmp	0x22c8	; 0x22c8 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 80 11 	jmp	0x2300	; 0x2300 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <checkPass>:
 *                    return 0 if password false if password dosent match
 *
 *
 */
uint8 checkPass(uint8* pass)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	63 97       	sbiw	r28, 0x13	; 19
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	9a 8b       	std	Y+18, r25	; 0x12
     b5c:	89 8b       	std	Y+17, r24	; 0x11
	uint8 val,index=0;
     b5e:	1f 86       	std	Y+15, r1	; 0x0f
	for(index = 0 ; index < PASSWORDDIGITS ; index++)                 //compare the passed pass with saved pass in External EEPROM
     b60:	1f 86       	std	Y+15, r1	; 0x0f
     b62:	8e c0       	rjmp	.+284    	; 0xc80 <checkPass+0x13a>
	{
		EEPROM_readByte(0x0200+index, &val);
     b64:	8f 85       	ldd	r24, Y+15	; 0x0f
     b66:	88 2f       	mov	r24, r24
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	80 50       	subi	r24, 0x00	; 0
     b6c:	9e 4f       	sbci	r25, 0xFE	; 254
     b6e:	9e 01       	movw	r18, r28
     b70:	20 5f       	subi	r18, 0xF0	; 240
     b72:	3f 4f       	sbci	r19, 0xFF	; 255
     b74:	b9 01       	movw	r22, r18
     b76:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <EEPROM_readByte>
     b7a:	80 e0       	ldi	r24, 0x00	; 0
     b7c:	90 e0       	ldi	r25, 0x00	; 0
     b7e:	a0 e2       	ldi	r26, 0x20	; 32
     b80:	b1 e4       	ldi	r27, 0x41	; 65
     b82:	8b 87       	std	Y+11, r24	; 0x0b
     b84:	9c 87       	std	Y+12, r25	; 0x0c
     b86:	ad 87       	std	Y+13, r26	; 0x0d
     b88:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b8a:	6b 85       	ldd	r22, Y+11	; 0x0b
     b8c:	7c 85       	ldd	r23, Y+12	; 0x0c
     b8e:	8d 85       	ldd	r24, Y+13	; 0x0d
     b90:	9e 85       	ldd	r25, Y+14	; 0x0e
     b92:	20 e0       	ldi	r18, 0x00	; 0
     b94:	30 e0       	ldi	r19, 0x00	; 0
     b96:	4a ef       	ldi	r20, 0xFA	; 250
     b98:	54 e4       	ldi	r21, 0x44	; 68
     b9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     b9e:	dc 01       	movw	r26, r24
     ba0:	cb 01       	movw	r24, r22
     ba2:	8f 83       	std	Y+7, r24	; 0x07
     ba4:	98 87       	std	Y+8, r25	; 0x08
     ba6:	a9 87       	std	Y+9, r26	; 0x09
     ba8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     baa:	6f 81       	ldd	r22, Y+7	; 0x07
     bac:	78 85       	ldd	r23, Y+8	; 0x08
     bae:	89 85       	ldd	r24, Y+9	; 0x09
     bb0:	9a 85       	ldd	r25, Y+10	; 0x0a
     bb2:	20 e0       	ldi	r18, 0x00	; 0
     bb4:	30 e0       	ldi	r19, 0x00	; 0
     bb6:	40 e8       	ldi	r20, 0x80	; 128
     bb8:	5f e3       	ldi	r21, 0x3F	; 63
     bba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bbe:	88 23       	and	r24, r24
     bc0:	2c f4       	brge	.+10     	; 0xbcc <checkPass+0x86>
		__ticks = 1;
     bc2:	81 e0       	ldi	r24, 0x01	; 1
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	9e 83       	std	Y+6, r25	; 0x06
     bc8:	8d 83       	std	Y+5, r24	; 0x05
     bca:	3f c0       	rjmp	.+126    	; 0xc4a <checkPass+0x104>
	else if (__tmp > 65535)
     bcc:	6f 81       	ldd	r22, Y+7	; 0x07
     bce:	78 85       	ldd	r23, Y+8	; 0x08
     bd0:	89 85       	ldd	r24, Y+9	; 0x09
     bd2:	9a 85       	ldd	r25, Y+10	; 0x0a
     bd4:	20 e0       	ldi	r18, 0x00	; 0
     bd6:	3f ef       	ldi	r19, 0xFF	; 255
     bd8:	4f e7       	ldi	r20, 0x7F	; 127
     bda:	57 e4       	ldi	r21, 0x47	; 71
     bdc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     be0:	18 16       	cp	r1, r24
     be2:	4c f5       	brge	.+82     	; 0xc36 <checkPass+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     be4:	6b 85       	ldd	r22, Y+11	; 0x0b
     be6:	7c 85       	ldd	r23, Y+12	; 0x0c
     be8:	8d 85       	ldd	r24, Y+13	; 0x0d
     bea:	9e 85       	ldd	r25, Y+14	; 0x0e
     bec:	20 e0       	ldi	r18, 0x00	; 0
     bee:	30 e0       	ldi	r19, 0x00	; 0
     bf0:	40 e2       	ldi	r20, 0x20	; 32
     bf2:	51 e4       	ldi	r21, 0x41	; 65
     bf4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bf8:	dc 01       	movw	r26, r24
     bfa:	cb 01       	movw	r24, r22
     bfc:	bc 01       	movw	r22, r24
     bfe:	cd 01       	movw	r24, r26
     c00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c04:	dc 01       	movw	r26, r24
     c06:	cb 01       	movw	r24, r22
     c08:	9e 83       	std	Y+6, r25	; 0x06
     c0a:	8d 83       	std	Y+5, r24	; 0x05
     c0c:	0f c0       	rjmp	.+30     	; 0xc2c <checkPass+0xe6>
     c0e:	88 ec       	ldi	r24, 0xC8	; 200
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	9c 83       	std	Y+4, r25	; 0x04
     c14:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c16:	8b 81       	ldd	r24, Y+3	; 0x03
     c18:	9c 81       	ldd	r25, Y+4	; 0x04
     c1a:	01 97       	sbiw	r24, 0x01	; 1
     c1c:	f1 f7       	brne	.-4      	; 0xc1a <checkPass+0xd4>
     c1e:	9c 83       	std	Y+4, r25	; 0x04
     c20:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c22:	8d 81       	ldd	r24, Y+5	; 0x05
     c24:	9e 81       	ldd	r25, Y+6	; 0x06
     c26:	01 97       	sbiw	r24, 0x01	; 1
     c28:	9e 83       	std	Y+6, r25	; 0x06
     c2a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c2c:	8d 81       	ldd	r24, Y+5	; 0x05
     c2e:	9e 81       	ldd	r25, Y+6	; 0x06
     c30:	00 97       	sbiw	r24, 0x00	; 0
     c32:	69 f7       	brne	.-38     	; 0xc0e <checkPass+0xc8>
     c34:	14 c0       	rjmp	.+40     	; 0xc5e <checkPass+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c36:	6f 81       	ldd	r22, Y+7	; 0x07
     c38:	78 85       	ldd	r23, Y+8	; 0x08
     c3a:	89 85       	ldd	r24, Y+9	; 0x09
     c3c:	9a 85       	ldd	r25, Y+10	; 0x0a
     c3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c42:	dc 01       	movw	r26, r24
     c44:	cb 01       	movw	r24, r22
     c46:	9e 83       	std	Y+6, r25	; 0x06
     c48:	8d 83       	std	Y+5, r24	; 0x05
     c4a:	8d 81       	ldd	r24, Y+5	; 0x05
     c4c:	9e 81       	ldd	r25, Y+6	; 0x06
     c4e:	9a 83       	std	Y+2, r25	; 0x02
     c50:	89 83       	std	Y+1, r24	; 0x01
     c52:	89 81       	ldd	r24, Y+1	; 0x01
     c54:	9a 81       	ldd	r25, Y+2	; 0x02
     c56:	01 97       	sbiw	r24, 0x01	; 1
     c58:	f1 f7       	brne	.-4      	; 0xc56 <checkPass+0x110>
     c5a:	9a 83       	std	Y+2, r25	; 0x02
     c5c:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);                              //delay 10 millisecond between every 2 write byte instruction in External EEPROM(EEPROM data sheet)
		if(val != pass[index])                      //if one digit not correct return 0
     c5e:	8f 85       	ldd	r24, Y+15	; 0x0f
     c60:	28 2f       	mov	r18, r24
     c62:	30 e0       	ldi	r19, 0x00	; 0
     c64:	89 89       	ldd	r24, Y+17	; 0x11
     c66:	9a 89       	ldd	r25, Y+18	; 0x12
     c68:	fc 01       	movw	r30, r24
     c6a:	e2 0f       	add	r30, r18
     c6c:	f3 1f       	adc	r31, r19
     c6e:	90 81       	ld	r25, Z
     c70:	88 89       	ldd	r24, Y+16	; 0x10
     c72:	98 17       	cp	r25, r24
     c74:	11 f0       	breq	.+4      	; 0xc7a <checkPass+0x134>
		{
			return 0;
     c76:	1b 8a       	std	Y+19, r1	; 0x13
     c78:	09 c0       	rjmp	.+18     	; 0xc8c <checkPass+0x146>
 *
 */
uint8 checkPass(uint8* pass)
{
	uint8 val,index=0;
	for(index = 0 ; index < PASSWORDDIGITS ; index++)                 //compare the passed pass with saved pass in External EEPROM
     c7a:	8f 85       	ldd	r24, Y+15	; 0x0f
     c7c:	8f 5f       	subi	r24, 0xFF	; 255
     c7e:	8f 87       	std	Y+15, r24	; 0x0f
     c80:	8f 85       	ldd	r24, Y+15	; 0x0f
     c82:	84 30       	cpi	r24, 0x04	; 4
     c84:	08 f4       	brcc	.+2      	; 0xc88 <checkPass+0x142>
     c86:	6e cf       	rjmp	.-292    	; 0xb64 <checkPass+0x1e>
		if(val != pass[index])                      //if one digit not correct return 0
		{
			return 0;
		}
	}
	return 1;                                       //if matched return 1
     c88:	81 e0       	ldi	r24, 0x01	; 1
     c8a:	8b 8b       	std	Y+19, r24	; 0x13
     c8c:	8b 89       	ldd	r24, Y+19	; 0x13
}
     c8e:	63 96       	adiw	r28, 0x13	; 19
     c90:	0f b6       	in	r0, 0x3f	; 63
     c92:	f8 94       	cli
     c94:	de bf       	out	0x3e, r29	; 62
     c96:	0f be       	out	0x3f, r0	; 63
     c98:	cd bf       	out	0x3d, r28	; 61
     c9a:	cf 91       	pop	r28
     c9c:	df 91       	pop	r29
     c9e:	08 95       	ret

00000ca0 <receivePass>:
 *                    return 0 if password false if password dosen't match
 *
 *
 */
uint8 receivePass(uint8 *pass)
{
     ca0:	0f 93       	push	r16
     ca2:	1f 93       	push	r17
     ca4:	df 93       	push	r29
     ca6:	cf 93       	push	r28
     ca8:	00 d0       	rcall	.+0      	; 0xcaa <receivePass+0xa>
     caa:	00 d0       	rcall	.+0      	; 0xcac <receivePass+0xc>
     cac:	cd b7       	in	r28, 0x3d	; 61
     cae:	de b7       	in	r29, 0x3e	; 62
     cb0:	9b 83       	std	Y+3, r25	; 0x03
     cb2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 index=0;                                   //index variable to loop for array
     cb4:	19 82       	std	Y+1, r1	; 0x01
	for(index = 0 ; index < PASSWORDDIGITS ; index++)                 //receive the password in an array
     cb6:	19 82       	std	Y+1, r1	; 0x01
     cb8:	0f c0       	rjmp	.+30     	; 0xcd8 <receivePass+0x38>
	{
		pass[index] = UART_ReceiveByte();
     cba:	89 81       	ldd	r24, Y+1	; 0x01
     cbc:	28 2f       	mov	r18, r24
     cbe:	30 e0       	ldi	r19, 0x00	; 0
     cc0:	8a 81       	ldd	r24, Y+2	; 0x02
     cc2:	9b 81       	ldd	r25, Y+3	; 0x03
     cc4:	8c 01       	movw	r16, r24
     cc6:	02 0f       	add	r16, r18
     cc8:	13 1f       	adc	r17, r19
     cca:	0e 94 b6 10 	call	0x216c	; 0x216c <UART_ReceiveByte>
     cce:	f8 01       	movw	r30, r16
     cd0:	80 83       	st	Z, r24
 *
 */
uint8 receivePass(uint8 *pass)
{
	uint8 index=0;                                   //index variable to loop for array
	for(index = 0 ; index < PASSWORDDIGITS ; index++)                 //receive the password in an array
     cd2:	89 81       	ldd	r24, Y+1	; 0x01
     cd4:	8f 5f       	subi	r24, 0xFF	; 255
     cd6:	89 83       	std	Y+1, r24	; 0x01
     cd8:	89 81       	ldd	r24, Y+1	; 0x01
     cda:	84 30       	cpi	r24, 0x04	; 4
     cdc:	70 f3       	brcs	.-36     	; 0xcba <receivePass+0x1a>
	{
		pass[index] = UART_ReceiveByte();
	}
	if(checkPass(pass))                             //if pass is correct
     cde:	8a 81       	ldd	r24, Y+2	; 0x02
     ce0:	9b 81       	ldd	r25, Y+3	; 0x03
     ce2:	0e 94 a3 05 	call	0xb46	; 0xb46 <checkPass>
     ce6:	88 23       	and	r24, r24
     ce8:	31 f0       	breq	.+12     	; 0xcf6 <receivePass+0x56>
	{
		UART_SendByte(CORRECT);                    //send to the slave correct macro by UART
     cea:	81 e3       	ldi	r24, 0x31	; 49
     cec:	0e 94 84 10 	call	0x2108	; 0x2108 <UART_SendByte>
		return 1;                                 //and return 1
     cf0:	f1 e0       	ldi	r31, 0x01	; 1
     cf2:	fc 83       	std	Y+4, r31	; 0x04
     cf4:	04 c0       	rjmp	.+8      	; 0xcfe <receivePass+0x5e>
	}
	else                                         //if pass is not correct
	{
		UART_SendByte(FALSE);                   //send to the slave false macro by UART
     cf6:	80 e3       	ldi	r24, 0x30	; 48
     cf8:	0e 94 84 10 	call	0x2108	; 0x2108 <UART_SendByte>
		return 0;                               //and return 0
     cfc:	1c 82       	std	Y+4, r1	; 0x04
     cfe:	8c 81       	ldd	r24, Y+4	; 0x04
	}

}
     d00:	0f 90       	pop	r0
     d02:	0f 90       	pop	r0
     d04:	0f 90       	pop	r0
     d06:	0f 90       	pop	r0
     d08:	cf 91       	pop	r28
     d0a:	df 91       	pop	r29
     d0c:	1f 91       	pop	r17
     d0e:	0f 91       	pop	r16
     d10:	08 95       	ret

00000d12 <openDoor>:
 * [Returns] : No Returns
 *
 *
 */
void openDoor(void)
{
     d12:	df 93       	push	r29
     d14:	cf 93       	push	r28
     d16:	cd b7       	in	r28, 0x3d	; 61
     d18:	de b7       	in	r29, 0x3e	; 62
     d1a:	6c 97       	sbiw	r28, 0x1c	; 28
     d1c:	0f b6       	in	r0, 0x3f	; 63
     d1e:	f8 94       	cli
     d20:	de bf       	out	0x3e, r29	; 62
     d22:	0f be       	out	0x3f, r0	; 63
     d24:	cd bf       	out	0x3d, r28	; 61
	//run the DC motor clockWise for 10 seconds
	SET_BIT(PORTD,PD4);
     d26:	a2 e3       	ldi	r26, 0x32	; 50
     d28:	b0 e0       	ldi	r27, 0x00	; 0
     d2a:	e2 e3       	ldi	r30, 0x32	; 50
     d2c:	f0 e0       	ldi	r31, 0x00	; 0
     d2e:	80 81       	ld	r24, Z
     d30:	80 61       	ori	r24, 0x10	; 16
     d32:	8c 93       	st	X, r24
	CLEAR_BIT(PORTD,PD5);
     d34:	a2 e3       	ldi	r26, 0x32	; 50
     d36:	b0 e0       	ldi	r27, 0x00	; 0
     d38:	e2 e3       	ldi	r30, 0x32	; 50
     d3a:	f0 e0       	ldi	r31, 0x00	; 0
     d3c:	80 81       	ld	r24, Z
     d3e:	8f 7d       	andi	r24, 0xDF	; 223
     d40:	8c 93       	st	X, r24
     d42:	80 e0       	ldi	r24, 0x00	; 0
     d44:	90 e8       	ldi	r25, 0x80	; 128
     d46:	a9 e8       	ldi	r26, 0x89	; 137
     d48:	b4 e4       	ldi	r27, 0x44	; 68
     d4a:	89 8f       	std	Y+25, r24	; 0x19
     d4c:	9a 8f       	std	Y+26, r25	; 0x1a
     d4e:	ab 8f       	std	Y+27, r26	; 0x1b
     d50:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d52:	69 8d       	ldd	r22, Y+25	; 0x19
     d54:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d56:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d58:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d5a:	20 e0       	ldi	r18, 0x00	; 0
     d5c:	30 e0       	ldi	r19, 0x00	; 0
     d5e:	4a ef       	ldi	r20, 0xFA	; 250
     d60:	54 e4       	ldi	r21, 0x44	; 68
     d62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d66:	dc 01       	movw	r26, r24
     d68:	cb 01       	movw	r24, r22
     d6a:	8d 8b       	std	Y+21, r24	; 0x15
     d6c:	9e 8b       	std	Y+22, r25	; 0x16
     d6e:	af 8b       	std	Y+23, r26	; 0x17
     d70:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     d72:	6d 89       	ldd	r22, Y+21	; 0x15
     d74:	7e 89       	ldd	r23, Y+22	; 0x16
     d76:	8f 89       	ldd	r24, Y+23	; 0x17
     d78:	98 8d       	ldd	r25, Y+24	; 0x18
     d7a:	20 e0       	ldi	r18, 0x00	; 0
     d7c:	30 e0       	ldi	r19, 0x00	; 0
     d7e:	40 e8       	ldi	r20, 0x80	; 128
     d80:	5f e3       	ldi	r21, 0x3F	; 63
     d82:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d86:	88 23       	and	r24, r24
     d88:	2c f4       	brge	.+10     	; 0xd94 <openDoor+0x82>
		__ticks = 1;
     d8a:	81 e0       	ldi	r24, 0x01	; 1
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	9c 8b       	std	Y+20, r25	; 0x14
     d90:	8b 8b       	std	Y+19, r24	; 0x13
     d92:	3f c0       	rjmp	.+126    	; 0xe12 <openDoor+0x100>
	else if (__tmp > 65535)
     d94:	6d 89       	ldd	r22, Y+21	; 0x15
     d96:	7e 89       	ldd	r23, Y+22	; 0x16
     d98:	8f 89       	ldd	r24, Y+23	; 0x17
     d9a:	98 8d       	ldd	r25, Y+24	; 0x18
     d9c:	20 e0       	ldi	r18, 0x00	; 0
     d9e:	3f ef       	ldi	r19, 0xFF	; 255
     da0:	4f e7       	ldi	r20, 0x7F	; 127
     da2:	57 e4       	ldi	r21, 0x47	; 71
     da4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     da8:	18 16       	cp	r1, r24
     daa:	4c f5       	brge	.+82     	; 0xdfe <openDoor+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dac:	69 8d       	ldd	r22, Y+25	; 0x19
     dae:	7a 8d       	ldd	r23, Y+26	; 0x1a
     db0:	8b 8d       	ldd	r24, Y+27	; 0x1b
     db2:	9c 8d       	ldd	r25, Y+28	; 0x1c
     db4:	20 e0       	ldi	r18, 0x00	; 0
     db6:	30 e0       	ldi	r19, 0x00	; 0
     db8:	40 e2       	ldi	r20, 0x20	; 32
     dba:	51 e4       	ldi	r21, 0x41	; 65
     dbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dc0:	dc 01       	movw	r26, r24
     dc2:	cb 01       	movw	r24, r22
     dc4:	bc 01       	movw	r22, r24
     dc6:	cd 01       	movw	r24, r26
     dc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dcc:	dc 01       	movw	r26, r24
     dce:	cb 01       	movw	r24, r22
     dd0:	9c 8b       	std	Y+20, r25	; 0x14
     dd2:	8b 8b       	std	Y+19, r24	; 0x13
     dd4:	0f c0       	rjmp	.+30     	; 0xdf4 <openDoor+0xe2>
     dd6:	88 ec       	ldi	r24, 0xC8	; 200
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	9a 8b       	std	Y+18, r25	; 0x12
     ddc:	89 8b       	std	Y+17, r24	; 0x11
     dde:	89 89       	ldd	r24, Y+17	; 0x11
     de0:	9a 89       	ldd	r25, Y+18	; 0x12
     de2:	01 97       	sbiw	r24, 0x01	; 1
     de4:	f1 f7       	brne	.-4      	; 0xde2 <openDoor+0xd0>
     de6:	9a 8b       	std	Y+18, r25	; 0x12
     de8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dea:	8b 89       	ldd	r24, Y+19	; 0x13
     dec:	9c 89       	ldd	r25, Y+20	; 0x14
     dee:	01 97       	sbiw	r24, 0x01	; 1
     df0:	9c 8b       	std	Y+20, r25	; 0x14
     df2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     df4:	8b 89       	ldd	r24, Y+19	; 0x13
     df6:	9c 89       	ldd	r25, Y+20	; 0x14
     df8:	00 97       	sbiw	r24, 0x00	; 0
     dfa:	69 f7       	brne	.-38     	; 0xdd6 <openDoor+0xc4>
     dfc:	14 c0       	rjmp	.+40     	; 0xe26 <openDoor+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dfe:	6d 89       	ldd	r22, Y+21	; 0x15
     e00:	7e 89       	ldd	r23, Y+22	; 0x16
     e02:	8f 89       	ldd	r24, Y+23	; 0x17
     e04:	98 8d       	ldd	r25, Y+24	; 0x18
     e06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e0a:	dc 01       	movw	r26, r24
     e0c:	cb 01       	movw	r24, r22
     e0e:	9c 8b       	std	Y+20, r25	; 0x14
     e10:	8b 8b       	std	Y+19, r24	; 0x13
     e12:	8b 89       	ldd	r24, Y+19	; 0x13
     e14:	9c 89       	ldd	r25, Y+20	; 0x14
     e16:	98 8b       	std	Y+16, r25	; 0x10
     e18:	8f 87       	std	Y+15, r24	; 0x0f
     e1a:	8f 85       	ldd	r24, Y+15	; 0x0f
     e1c:	98 89       	ldd	r25, Y+16	; 0x10
     e1e:	01 97       	sbiw	r24, 0x01	; 1
     e20:	f1 f7       	brne	.-4      	; 0xe1e <openDoor+0x10c>
     e22:	98 8b       	std	Y+16, r25	; 0x10
     e24:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1100);
	//run the DC motor Anti clockWise for 10 seconds
	SET_BIT(PORTD,PD5);
     e26:	a2 e3       	ldi	r26, 0x32	; 50
     e28:	b0 e0       	ldi	r27, 0x00	; 0
     e2a:	e2 e3       	ldi	r30, 0x32	; 50
     e2c:	f0 e0       	ldi	r31, 0x00	; 0
     e2e:	80 81       	ld	r24, Z
     e30:	80 62       	ori	r24, 0x20	; 32
     e32:	8c 93       	st	X, r24
	CLEAR_BIT(PORTD,PD4);
     e34:	a2 e3       	ldi	r26, 0x32	; 50
     e36:	b0 e0       	ldi	r27, 0x00	; 0
     e38:	e2 e3       	ldi	r30, 0x32	; 50
     e3a:	f0 e0       	ldi	r31, 0x00	; 0
     e3c:	80 81       	ld	r24, Z
     e3e:	8f 7e       	andi	r24, 0xEF	; 239
     e40:	8c 93       	st	X, r24
     e42:	80 e0       	ldi	r24, 0x00	; 0
     e44:	90 e8       	ldi	r25, 0x80	; 128
     e46:	a9 e8       	ldi	r26, 0x89	; 137
     e48:	b4 e4       	ldi	r27, 0x44	; 68
     e4a:	8b 87       	std	Y+11, r24	; 0x0b
     e4c:	9c 87       	std	Y+12, r25	; 0x0c
     e4e:	ad 87       	std	Y+13, r26	; 0x0d
     e50:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e52:	6b 85       	ldd	r22, Y+11	; 0x0b
     e54:	7c 85       	ldd	r23, Y+12	; 0x0c
     e56:	8d 85       	ldd	r24, Y+13	; 0x0d
     e58:	9e 85       	ldd	r25, Y+14	; 0x0e
     e5a:	20 e0       	ldi	r18, 0x00	; 0
     e5c:	30 e0       	ldi	r19, 0x00	; 0
     e5e:	4a ef       	ldi	r20, 0xFA	; 250
     e60:	54 e4       	ldi	r21, 0x44	; 68
     e62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e66:	dc 01       	movw	r26, r24
     e68:	cb 01       	movw	r24, r22
     e6a:	8f 83       	std	Y+7, r24	; 0x07
     e6c:	98 87       	std	Y+8, r25	; 0x08
     e6e:	a9 87       	std	Y+9, r26	; 0x09
     e70:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e72:	6f 81       	ldd	r22, Y+7	; 0x07
     e74:	78 85       	ldd	r23, Y+8	; 0x08
     e76:	89 85       	ldd	r24, Y+9	; 0x09
     e78:	9a 85       	ldd	r25, Y+10	; 0x0a
     e7a:	20 e0       	ldi	r18, 0x00	; 0
     e7c:	30 e0       	ldi	r19, 0x00	; 0
     e7e:	40 e8       	ldi	r20, 0x80	; 128
     e80:	5f e3       	ldi	r21, 0x3F	; 63
     e82:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e86:	88 23       	and	r24, r24
     e88:	2c f4       	brge	.+10     	; 0xe94 <openDoor+0x182>
		__ticks = 1;
     e8a:	81 e0       	ldi	r24, 0x01	; 1
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	9e 83       	std	Y+6, r25	; 0x06
     e90:	8d 83       	std	Y+5, r24	; 0x05
     e92:	3f c0       	rjmp	.+126    	; 0xf12 <openDoor+0x200>
	else if (__tmp > 65535)
     e94:	6f 81       	ldd	r22, Y+7	; 0x07
     e96:	78 85       	ldd	r23, Y+8	; 0x08
     e98:	89 85       	ldd	r24, Y+9	; 0x09
     e9a:	9a 85       	ldd	r25, Y+10	; 0x0a
     e9c:	20 e0       	ldi	r18, 0x00	; 0
     e9e:	3f ef       	ldi	r19, 0xFF	; 255
     ea0:	4f e7       	ldi	r20, 0x7F	; 127
     ea2:	57 e4       	ldi	r21, 0x47	; 71
     ea4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ea8:	18 16       	cp	r1, r24
     eaa:	4c f5       	brge	.+82     	; 0xefe <openDoor+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     eac:	6b 85       	ldd	r22, Y+11	; 0x0b
     eae:	7c 85       	ldd	r23, Y+12	; 0x0c
     eb0:	8d 85       	ldd	r24, Y+13	; 0x0d
     eb2:	9e 85       	ldd	r25, Y+14	; 0x0e
     eb4:	20 e0       	ldi	r18, 0x00	; 0
     eb6:	30 e0       	ldi	r19, 0x00	; 0
     eb8:	40 e2       	ldi	r20, 0x20	; 32
     eba:	51 e4       	ldi	r21, 0x41	; 65
     ebc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ec0:	dc 01       	movw	r26, r24
     ec2:	cb 01       	movw	r24, r22
     ec4:	bc 01       	movw	r22, r24
     ec6:	cd 01       	movw	r24, r26
     ec8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ecc:	dc 01       	movw	r26, r24
     ece:	cb 01       	movw	r24, r22
     ed0:	9e 83       	std	Y+6, r25	; 0x06
     ed2:	8d 83       	std	Y+5, r24	; 0x05
     ed4:	0f c0       	rjmp	.+30     	; 0xef4 <openDoor+0x1e2>
     ed6:	88 ec       	ldi	r24, 0xC8	; 200
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	9c 83       	std	Y+4, r25	; 0x04
     edc:	8b 83       	std	Y+3, r24	; 0x03
     ede:	8b 81       	ldd	r24, Y+3	; 0x03
     ee0:	9c 81       	ldd	r25, Y+4	; 0x04
     ee2:	01 97       	sbiw	r24, 0x01	; 1
     ee4:	f1 f7       	brne	.-4      	; 0xee2 <openDoor+0x1d0>
     ee6:	9c 83       	std	Y+4, r25	; 0x04
     ee8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     eea:	8d 81       	ldd	r24, Y+5	; 0x05
     eec:	9e 81       	ldd	r25, Y+6	; 0x06
     eee:	01 97       	sbiw	r24, 0x01	; 1
     ef0:	9e 83       	std	Y+6, r25	; 0x06
     ef2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ef4:	8d 81       	ldd	r24, Y+5	; 0x05
     ef6:	9e 81       	ldd	r25, Y+6	; 0x06
     ef8:	00 97       	sbiw	r24, 0x00	; 0
     efa:	69 f7       	brne	.-38     	; 0xed6 <openDoor+0x1c4>
     efc:	14 c0       	rjmp	.+40     	; 0xf26 <openDoor+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     efe:	6f 81       	ldd	r22, Y+7	; 0x07
     f00:	78 85       	ldd	r23, Y+8	; 0x08
     f02:	89 85       	ldd	r24, Y+9	; 0x09
     f04:	9a 85       	ldd	r25, Y+10	; 0x0a
     f06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f0a:	dc 01       	movw	r26, r24
     f0c:	cb 01       	movw	r24, r22
     f0e:	9e 83       	std	Y+6, r25	; 0x06
     f10:	8d 83       	std	Y+5, r24	; 0x05
     f12:	8d 81       	ldd	r24, Y+5	; 0x05
     f14:	9e 81       	ldd	r25, Y+6	; 0x06
     f16:	9a 83       	std	Y+2, r25	; 0x02
     f18:	89 83       	std	Y+1, r24	; 0x01
     f1a:	89 81       	ldd	r24, Y+1	; 0x01
     f1c:	9a 81       	ldd	r25, Y+2	; 0x02
     f1e:	01 97       	sbiw	r24, 0x01	; 1
     f20:	f1 f7       	brne	.-4      	; 0xf1e <openDoor+0x20c>
     f22:	9a 83       	std	Y+2, r25	; 0x02
     f24:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1100);
	//turn off the DC motor
	CLEAR_BIT(PORTD,PD5);
     f26:	a2 e3       	ldi	r26, 0x32	; 50
     f28:	b0 e0       	ldi	r27, 0x00	; 0
     f2a:	e2 e3       	ldi	r30, 0x32	; 50
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	80 81       	ld	r24, Z
     f30:	8f 7d       	andi	r24, 0xDF	; 223
     f32:	8c 93       	st	X, r24
}
     f34:	6c 96       	adiw	r28, 0x1c	; 28
     f36:	0f b6       	in	r0, 0x3f	; 63
     f38:	f8 94       	cli
     f3a:	de bf       	out	0x3e, r29	; 62
     f3c:	0f be       	out	0x3f, r0	; 63
     f3e:	cd bf       	out	0x3d, r28	; 61
     f40:	cf 91       	pop	r28
     f42:	df 91       	pop	r29
     f44:	08 95       	ret

00000f46 <main>:
/**************************************Main Function***************************************/
int main()
{
     f46:	df 93       	push	r29
     f48:	cf 93       	push	r28
     f4a:	cd b7       	in	r28, 0x3d	; 61
     f4c:	de b7       	in	r29, 0x3e	; 62
     f4e:	cb 55       	subi	r28, 0x5B	; 91
     f50:	d0 40       	sbci	r29, 0x00	; 0
     f52:	0f b6       	in	r0, 0x3f	; 63
     f54:	f8 94       	cli
     f56:	de bf       	out	0x3e, r29	; 62
     f58:	0f be       	out	0x3f, r0	; 63
     f5a:	cd bf       	out	0x3d, r28	; 61
	uint8 pass[10],pass2[10],index,flag=0,value,command,counter=0;
     f5c:	1b ae       	std	Y+59, r1	; 0x3b
     f5e:	19 ae       	std	Y+57, r1	; 0x39
	/*Structure holds the configuration for UART Module*/
	UART_configType uart_config = {Asynchronous,Eight,Disabled,9600};
     f60:	ce 01       	movw	r24, r28
     f62:	8e 5a       	subi	r24, 0xAE	; 174
     f64:	9f 4f       	sbci	r25, 0xFF	; 255
     f66:	69 96       	adiw	r28, 0x19	; 25
     f68:	9f af       	std	Y+63, r25	; 0x3f
     f6a:	8e af       	std	Y+62, r24	; 0x3e
     f6c:	69 97       	sbiw	r28, 0x19	; 25
     f6e:	88 e6       	ldi	r24, 0x68	; 104
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	6b 96       	adiw	r28, 0x1b	; 27
     f74:	9f af       	std	Y+63, r25	; 0x3f
     f76:	8e af       	std	Y+62, r24	; 0x3e
     f78:	6b 97       	sbiw	r28, 0x1b	; 27
     f7a:	95 e0       	ldi	r25, 0x05	; 5
     f7c:	6c 96       	adiw	r28, 0x1c	; 28
     f7e:	9f af       	std	Y+63, r25	; 0x3f
     f80:	6c 97       	sbiw	r28, 0x1c	; 28
     f82:	6b 96       	adiw	r28, 0x1b	; 27
     f84:	ee ad       	ldd	r30, Y+62	; 0x3e
     f86:	ff ad       	ldd	r31, Y+63	; 0x3f
     f88:	6b 97       	sbiw	r28, 0x1b	; 27
     f8a:	00 80       	ld	r0, Z
     f8c:	6b 96       	adiw	r28, 0x1b	; 27
     f8e:	8e ad       	ldd	r24, Y+62	; 0x3e
     f90:	9f ad       	ldd	r25, Y+63	; 0x3f
     f92:	6b 97       	sbiw	r28, 0x1b	; 27
     f94:	01 96       	adiw	r24, 0x01	; 1
     f96:	6b 96       	adiw	r28, 0x1b	; 27
     f98:	9f af       	std	Y+63, r25	; 0x3f
     f9a:	8e af       	std	Y+62, r24	; 0x3e
     f9c:	6b 97       	sbiw	r28, 0x1b	; 27
     f9e:	69 96       	adiw	r28, 0x19	; 25
     fa0:	ee ad       	ldd	r30, Y+62	; 0x3e
     fa2:	ff ad       	ldd	r31, Y+63	; 0x3f
     fa4:	69 97       	sbiw	r28, 0x19	; 25
     fa6:	00 82       	st	Z, r0
     fa8:	69 96       	adiw	r28, 0x19	; 25
     faa:	8e ad       	ldd	r24, Y+62	; 0x3e
     fac:	9f ad       	ldd	r25, Y+63	; 0x3f
     fae:	69 97       	sbiw	r28, 0x19	; 25
     fb0:	01 96       	adiw	r24, 0x01	; 1
     fb2:	69 96       	adiw	r28, 0x19	; 25
     fb4:	9f af       	std	Y+63, r25	; 0x3f
     fb6:	8e af       	std	Y+62, r24	; 0x3e
     fb8:	69 97       	sbiw	r28, 0x19	; 25
     fba:	6c 96       	adiw	r28, 0x1c	; 28
     fbc:	9f ad       	ldd	r25, Y+63	; 0x3f
     fbe:	6c 97       	sbiw	r28, 0x1c	; 28
     fc0:	91 50       	subi	r25, 0x01	; 1
     fc2:	6c 96       	adiw	r28, 0x1c	; 28
     fc4:	9f af       	std	Y+63, r25	; 0x3f
     fc6:	6c 97       	sbiw	r28, 0x1c	; 28
     fc8:	6c 96       	adiw	r28, 0x1c	; 28
     fca:	ef ad       	ldd	r30, Y+63	; 0x3f
     fcc:	6c 97       	sbiw	r28, 0x1c	; 28
     fce:	ee 23       	and	r30, r30
     fd0:	c1 f6       	brne	.-80     	; 0xf82 <main+0x3c>
	/*initialization for UART Module*/
	UART_init(&uart_config);
     fd2:	ce 01       	movw	r24, r28
     fd4:	8e 5a       	subi	r24, 0xAE	; 174
     fd6:	9f 4f       	sbci	r25, 0xFF	; 255
     fd8:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <UART_init>
	/*initialization for EEPROM Module*/
	EEPROM_init();
     fdc:	0e 94 ad 0a 	call	0x155a	; 0x155a <EEPROM_init>
	/* make PD4,PD5 as output pins for motor*/
	SET_BIT(DDRD,PD4);
     fe0:	a1 e3       	ldi	r26, 0x31	; 49
     fe2:	b0 e0       	ldi	r27, 0x00	; 0
     fe4:	e1 e3       	ldi	r30, 0x31	; 49
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	80 81       	ld	r24, Z
     fea:	80 61       	ori	r24, 0x10	; 16
     fec:	8c 93       	st	X, r24
	SET_BIT(DDRD,PD5);
     fee:	a1 e3       	ldi	r26, 0x31	; 49
     ff0:	b0 e0       	ldi	r27, 0x00	; 0
     ff2:	e1 e3       	ldi	r30, 0x31	; 49
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	80 81       	ld	r24, Z
     ff8:	80 62       	ori	r24, 0x20	; 32
     ffa:	8c 93       	st	X, r24
	/* make PD6 as output pin for buzzer*/
	SET_BIT(DDRD,PD6);
     ffc:	a1 e3       	ldi	r26, 0x31	; 49
     ffe:	b0 e0       	ldi	r27, 0x00	; 0
    1000:	e1 e3       	ldi	r30, 0x31	; 49
    1002:	f0 e0       	ldi	r31, 0x00	; 0
    1004:	80 81       	ld	r24, Z
    1006:	80 64       	ori	r24, 0x40	; 64
    1008:	8c 93       	st	X, r24
	/*if you need to reset the application and set the pass as first time ever then -> un comment next 2 lines*/
	//EEPROM_writeByte(0x0100,0);
	//_delay_ms(10);

	//read byte from address 0x0100 in External EEPROM
	EEPROM_readByte(0x0100,&value);
    100a:	9e 01       	movw	r18, r28
    100c:	2f 5a       	subi	r18, 0xAF	; 175
    100e:	3f 4f       	sbci	r19, 0xFF	; 255
    1010:	80 e0       	ldi	r24, 0x00	; 0
    1012:	91 e0       	ldi	r25, 0x01	; 1
    1014:	b9 01       	movw	r22, r18
    1016:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <EEPROM_readByte>
	//And if this byte holds zero then this is the first time ever this Application runs and ask the user for the password
	if(value == 0)
    101a:	fe 01       	movw	r30, r28
    101c:	ef 5a       	subi	r30, 0xAF	; 175
    101e:	ff 4f       	sbci	r31, 0xFF	; 255
    1020:	80 81       	ld	r24, Z
    1022:	88 23       	and	r24, r24
    1024:	09 f0       	breq	.+2      	; 0x1028 <main+0xe2>
    1026:	c4 c0       	rjmp	.+392    	; 0x11b0 <main+0x26a>
	{
		flag = 0;
    1028:	1b ae       	std	Y+59, r1	; 0x3b
		//Send to the slave FIRSTTIME Macro to indicate the first time
		UART_SendByte(FIRSTTIME);
    102a:	83 e2       	ldi	r24, 0x23	; 35
    102c:	0e 94 84 10 	call	0x2108	; 0x2108 <UART_SendByte>
    1030:	04 c0       	rjmp	.+8      	; 0x103a <main+0xf4>
		//if password confirmation dosen't match ask the user to enter the password again until 2 passwords matched
		while(UART_ReceiveByte() == AGAIN)
		//get the password from slave and save it in external EEPROM for the first time
		receivePass(pass);
    1032:	ce 01       	movw	r24, r28
    1034:	cd 96       	adiw	r24, 0x3d	; 61
    1036:	0e 94 50 06 	call	0xca0	; 0xca0 <receivePass>
	{
		flag = 0;
		//Send to the slave FIRSTTIME Macro to indicate the first time
		UART_SendByte(FIRSTTIME);
		//if password confirmation dosen't match ask the user to enter the password again until 2 passwords matched
		while(UART_ReceiveByte() == AGAIN)
    103a:	0e 94 b6 10 	call	0x216c	; 0x216c <UART_ReceiveByte>
    103e:	81 34       	cpi	r24, 0x41	; 65
    1040:	c1 f3       	breq	.-16     	; 0x1032 <main+0xec>
		//get the password from slave and save it in external EEPROM for the first time
		receivePass(pass);
		//confirm the password
		receivePass(pass2);
    1042:	ce 01       	movw	r24, r28
    1044:	89 5b       	subi	r24, 0xB9	; 185
    1046:	9f 4f       	sbci	r25, 0xFF	; 255
    1048:	0e 94 50 06 	call	0xca0	; 0xca0 <receivePass>
		//check the 2 passes is matched
		for(index = 0 ; index < PASSWORDDIGITS ; index++)
    104c:	1c ae       	std	Y+60, r1	; 0x3c
    104e:	1a c0       	rjmp	.+52     	; 0x1084 <main+0x13e>
		{
			if(!(pass[index] == pass2[index]))
    1050:	8c ad       	ldd	r24, Y+60	; 0x3c
    1052:	28 2f       	mov	r18, r24
    1054:	30 e0       	ldi	r19, 0x00	; 0
    1056:	ce 01       	movw	r24, r28
    1058:	cd 96       	adiw	r24, 0x3d	; 61
    105a:	fc 01       	movw	r30, r24
    105c:	e2 0f       	add	r30, r18
    105e:	f3 1f       	adc	r31, r19
    1060:	40 81       	ld	r20, Z
    1062:	8c ad       	ldd	r24, Y+60	; 0x3c
    1064:	28 2f       	mov	r18, r24
    1066:	30 e0       	ldi	r19, 0x00	; 0
    1068:	ce 01       	movw	r24, r28
    106a:	89 5b       	subi	r24, 0xB9	; 185
    106c:	9f 4f       	sbci	r25, 0xFF	; 255
    106e:	fc 01       	movw	r30, r24
    1070:	e2 0f       	add	r30, r18
    1072:	f3 1f       	adc	r31, r19
    1074:	80 81       	ld	r24, Z
    1076:	48 17       	cp	r20, r24
    1078:	11 f0       	breq	.+4      	; 0x107e <main+0x138>
				flag =1;
    107a:	81 e0       	ldi	r24, 0x01	; 1
    107c:	8b af       	std	Y+59, r24	; 0x3b
		//get the password from slave and save it in external EEPROM for the first time
		receivePass(pass);
		//confirm the password
		receivePass(pass2);
		//check the 2 passes is matched
		for(index = 0 ; index < PASSWORDDIGITS ; index++)
    107e:	8c ad       	ldd	r24, Y+60	; 0x3c
    1080:	8f 5f       	subi	r24, 0xFF	; 255
    1082:	8c af       	std	Y+60, r24	; 0x3c
    1084:	8c ad       	ldd	r24, Y+60	; 0x3c
    1086:	84 30       	cpi	r24, 0x04	; 4
    1088:	18 f3       	brcs	.-58     	; 0x1050 <main+0x10a>
		{
			if(!(pass[index] == pass2[index]))
				flag =1;
		}
		//if matched save it in EEPROM
		if(!flag)
    108a:	8b ad       	ldd	r24, Y+59	; 0x3b
    108c:	88 23       	and	r24, r24
    108e:	09 f0       	breq	.+2      	; 0x1092 <main+0x14c>
    1090:	8f c0       	rjmp	.+286    	; 0x11b0 <main+0x26a>
		{
			for(index = 0 ; index < PASSWORDDIGITS ; index++)
    1092:	1c ae       	std	Y+60, r1	; 0x3c
    1094:	89 c0       	rjmp	.+274    	; 0x11a8 <main+0x262>
			{
				EEPROM_writeByte(0x0200+index,pass2[index]);
    1096:	8c ad       	ldd	r24, Y+60	; 0x3c
    1098:	88 2f       	mov	r24, r24
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	80 50       	subi	r24, 0x00	; 0
    109e:	9e 4f       	sbci	r25, 0xFE	; 254
    10a0:	ac 01       	movw	r20, r24
    10a2:	8c ad       	ldd	r24, Y+60	; 0x3c
    10a4:	28 2f       	mov	r18, r24
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	ce 01       	movw	r24, r28
    10aa:	89 5b       	subi	r24, 0xB9	; 185
    10ac:	9f 4f       	sbci	r25, 0xFF	; 255
    10ae:	fc 01       	movw	r30, r24
    10b0:	e2 0f       	add	r30, r18
    10b2:	f3 1f       	adc	r31, r19
    10b4:	20 81       	ld	r18, Z
    10b6:	ca 01       	movw	r24, r20
    10b8:	62 2f       	mov	r22, r18
    10ba:	0e 94 b6 0a 	call	0x156c	; 0x156c <EEPROM_writeByte>
    10be:	80 e0       	ldi	r24, 0x00	; 0
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	a0 e2       	ldi	r26, 0x20	; 32
    10c4:	b1 e4       	ldi	r27, 0x41	; 65
    10c6:	8d ab       	std	Y+53, r24	; 0x35
    10c8:	9e ab       	std	Y+54, r25	; 0x36
    10ca:	af ab       	std	Y+55, r26	; 0x37
    10cc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10ce:	6d a9       	ldd	r22, Y+53	; 0x35
    10d0:	7e a9       	ldd	r23, Y+54	; 0x36
    10d2:	8f a9       	ldd	r24, Y+55	; 0x37
    10d4:	98 ad       	ldd	r25, Y+56	; 0x38
    10d6:	20 e0       	ldi	r18, 0x00	; 0
    10d8:	30 e0       	ldi	r19, 0x00	; 0
    10da:	4a ef       	ldi	r20, 0xFA	; 250
    10dc:	54 e4       	ldi	r21, 0x44	; 68
    10de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10e2:	dc 01       	movw	r26, r24
    10e4:	cb 01       	movw	r24, r22
    10e6:	89 ab       	std	Y+49, r24	; 0x31
    10e8:	9a ab       	std	Y+50, r25	; 0x32
    10ea:	ab ab       	std	Y+51, r26	; 0x33
    10ec:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    10ee:	69 a9       	ldd	r22, Y+49	; 0x31
    10f0:	7a a9       	ldd	r23, Y+50	; 0x32
    10f2:	8b a9       	ldd	r24, Y+51	; 0x33
    10f4:	9c a9       	ldd	r25, Y+52	; 0x34
    10f6:	20 e0       	ldi	r18, 0x00	; 0
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	40 e8       	ldi	r20, 0x80	; 128
    10fc:	5f e3       	ldi	r21, 0x3F	; 63
    10fe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1102:	88 23       	and	r24, r24
    1104:	2c f4       	brge	.+10     	; 0x1110 <main+0x1ca>
		__ticks = 1;
    1106:	81 e0       	ldi	r24, 0x01	; 1
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	98 ab       	std	Y+48, r25	; 0x30
    110c:	8f a7       	std	Y+47, r24	; 0x2f
    110e:	3f c0       	rjmp	.+126    	; 0x118e <main+0x248>
	else if (__tmp > 65535)
    1110:	69 a9       	ldd	r22, Y+49	; 0x31
    1112:	7a a9       	ldd	r23, Y+50	; 0x32
    1114:	8b a9       	ldd	r24, Y+51	; 0x33
    1116:	9c a9       	ldd	r25, Y+52	; 0x34
    1118:	20 e0       	ldi	r18, 0x00	; 0
    111a:	3f ef       	ldi	r19, 0xFF	; 255
    111c:	4f e7       	ldi	r20, 0x7F	; 127
    111e:	57 e4       	ldi	r21, 0x47	; 71
    1120:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1124:	18 16       	cp	r1, r24
    1126:	4c f5       	brge	.+82     	; 0x117a <main+0x234>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1128:	6d a9       	ldd	r22, Y+53	; 0x35
    112a:	7e a9       	ldd	r23, Y+54	; 0x36
    112c:	8f a9       	ldd	r24, Y+55	; 0x37
    112e:	98 ad       	ldd	r25, Y+56	; 0x38
    1130:	20 e0       	ldi	r18, 0x00	; 0
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	40 e2       	ldi	r20, 0x20	; 32
    1136:	51 e4       	ldi	r21, 0x41	; 65
    1138:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    113c:	dc 01       	movw	r26, r24
    113e:	cb 01       	movw	r24, r22
    1140:	bc 01       	movw	r22, r24
    1142:	cd 01       	movw	r24, r26
    1144:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1148:	dc 01       	movw	r26, r24
    114a:	cb 01       	movw	r24, r22
    114c:	98 ab       	std	Y+48, r25	; 0x30
    114e:	8f a7       	std	Y+47, r24	; 0x2f
    1150:	0f c0       	rjmp	.+30     	; 0x1170 <main+0x22a>
    1152:	88 ec       	ldi	r24, 0xC8	; 200
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	9e a7       	std	Y+46, r25	; 0x2e
    1158:	8d a7       	std	Y+45, r24	; 0x2d
    115a:	8d a5       	ldd	r24, Y+45	; 0x2d
    115c:	9e a5       	ldd	r25, Y+46	; 0x2e
    115e:	01 97       	sbiw	r24, 0x01	; 1
    1160:	f1 f7       	brne	.-4      	; 0x115e <main+0x218>
    1162:	9e a7       	std	Y+46, r25	; 0x2e
    1164:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1166:	8f a5       	ldd	r24, Y+47	; 0x2f
    1168:	98 a9       	ldd	r25, Y+48	; 0x30
    116a:	01 97       	sbiw	r24, 0x01	; 1
    116c:	98 ab       	std	Y+48, r25	; 0x30
    116e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1170:	8f a5       	ldd	r24, Y+47	; 0x2f
    1172:	98 a9       	ldd	r25, Y+48	; 0x30
    1174:	00 97       	sbiw	r24, 0x00	; 0
    1176:	69 f7       	brne	.-38     	; 0x1152 <main+0x20c>
    1178:	14 c0       	rjmp	.+40     	; 0x11a2 <main+0x25c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    117a:	69 a9       	ldd	r22, Y+49	; 0x31
    117c:	7a a9       	ldd	r23, Y+50	; 0x32
    117e:	8b a9       	ldd	r24, Y+51	; 0x33
    1180:	9c a9       	ldd	r25, Y+52	; 0x34
    1182:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1186:	dc 01       	movw	r26, r24
    1188:	cb 01       	movw	r24, r22
    118a:	98 ab       	std	Y+48, r25	; 0x30
    118c:	8f a7       	std	Y+47, r24	; 0x2f
    118e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1190:	98 a9       	ldd	r25, Y+48	; 0x30
    1192:	9c a7       	std	Y+44, r25	; 0x2c
    1194:	8b a7       	std	Y+43, r24	; 0x2b
    1196:	8b a5       	ldd	r24, Y+43	; 0x2b
    1198:	9c a5       	ldd	r25, Y+44	; 0x2c
    119a:	01 97       	sbiw	r24, 0x01	; 1
    119c:	f1 f7       	brne	.-4      	; 0x119a <main+0x254>
    119e:	9c a7       	std	Y+44, r25	; 0x2c
    11a0:	8b a7       	std	Y+43, r24	; 0x2b
				flag =1;
		}
		//if matched save it in EEPROM
		if(!flag)
		{
			for(index = 0 ; index < PASSWORDDIGITS ; index++)
    11a2:	8c ad       	ldd	r24, Y+60	; 0x3c
    11a4:	8f 5f       	subi	r24, 0xFF	; 255
    11a6:	8c af       	std	Y+60, r24	; 0x3c
    11a8:	8c ad       	ldd	r24, Y+60	; 0x3c
    11aa:	84 30       	cpi	r24, 0x04	; 4
    11ac:	08 f4       	brcc	.+2      	; 0x11b0 <main+0x26a>
    11ae:	73 cf       	rjmp	.-282    	; 0x1096 <main+0x150>
			}
		}

	}
	//write 1 in address 0x0100 in External EEPROM indicating that is not the first time this app runs
	EEPROM_writeByte(0x0100,1);
    11b0:	80 e0       	ldi	r24, 0x00	; 0
    11b2:	91 e0       	ldi	r25, 0x01	; 1
    11b4:	61 e0       	ldi	r22, 0x01	; 1
    11b6:	0e 94 b6 0a 	call	0x156c	; 0x156c <EEPROM_writeByte>
    11ba:	80 e0       	ldi	r24, 0x00	; 0
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	a0 e2       	ldi	r26, 0x20	; 32
    11c0:	b1 e4       	ldi	r27, 0x41	; 65
    11c2:	8f a3       	std	Y+39, r24	; 0x27
    11c4:	98 a7       	std	Y+40, r25	; 0x28
    11c6:	a9 a7       	std	Y+41, r26	; 0x29
    11c8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11ca:	6f a1       	ldd	r22, Y+39	; 0x27
    11cc:	78 a5       	ldd	r23, Y+40	; 0x28
    11ce:	89 a5       	ldd	r24, Y+41	; 0x29
    11d0:	9a a5       	ldd	r25, Y+42	; 0x2a
    11d2:	20 e0       	ldi	r18, 0x00	; 0
    11d4:	30 e0       	ldi	r19, 0x00	; 0
    11d6:	4a ef       	ldi	r20, 0xFA	; 250
    11d8:	54 e4       	ldi	r21, 0x44	; 68
    11da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11de:	dc 01       	movw	r26, r24
    11e0:	cb 01       	movw	r24, r22
    11e2:	8b a3       	std	Y+35, r24	; 0x23
    11e4:	9c a3       	std	Y+36, r25	; 0x24
    11e6:	ad a3       	std	Y+37, r26	; 0x25
    11e8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    11ea:	6b a1       	ldd	r22, Y+35	; 0x23
    11ec:	7c a1       	ldd	r23, Y+36	; 0x24
    11ee:	8d a1       	ldd	r24, Y+37	; 0x25
    11f0:	9e a1       	ldd	r25, Y+38	; 0x26
    11f2:	20 e0       	ldi	r18, 0x00	; 0
    11f4:	30 e0       	ldi	r19, 0x00	; 0
    11f6:	40 e8       	ldi	r20, 0x80	; 128
    11f8:	5f e3       	ldi	r21, 0x3F	; 63
    11fa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11fe:	88 23       	and	r24, r24
    1200:	2c f4       	brge	.+10     	; 0x120c <main+0x2c6>
		__ticks = 1;
    1202:	81 e0       	ldi	r24, 0x01	; 1
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	9a a3       	std	Y+34, r25	; 0x22
    1208:	89 a3       	std	Y+33, r24	; 0x21
    120a:	3f c0       	rjmp	.+126    	; 0x128a <main+0x344>
	else if (__tmp > 65535)
    120c:	6b a1       	ldd	r22, Y+35	; 0x23
    120e:	7c a1       	ldd	r23, Y+36	; 0x24
    1210:	8d a1       	ldd	r24, Y+37	; 0x25
    1212:	9e a1       	ldd	r25, Y+38	; 0x26
    1214:	20 e0       	ldi	r18, 0x00	; 0
    1216:	3f ef       	ldi	r19, 0xFF	; 255
    1218:	4f e7       	ldi	r20, 0x7F	; 127
    121a:	57 e4       	ldi	r21, 0x47	; 71
    121c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1220:	18 16       	cp	r1, r24
    1222:	4c f5       	brge	.+82     	; 0x1276 <main+0x330>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1224:	6f a1       	ldd	r22, Y+39	; 0x27
    1226:	78 a5       	ldd	r23, Y+40	; 0x28
    1228:	89 a5       	ldd	r24, Y+41	; 0x29
    122a:	9a a5       	ldd	r25, Y+42	; 0x2a
    122c:	20 e0       	ldi	r18, 0x00	; 0
    122e:	30 e0       	ldi	r19, 0x00	; 0
    1230:	40 e2       	ldi	r20, 0x20	; 32
    1232:	51 e4       	ldi	r21, 0x41	; 65
    1234:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1238:	dc 01       	movw	r26, r24
    123a:	cb 01       	movw	r24, r22
    123c:	bc 01       	movw	r22, r24
    123e:	cd 01       	movw	r24, r26
    1240:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1244:	dc 01       	movw	r26, r24
    1246:	cb 01       	movw	r24, r22
    1248:	9a a3       	std	Y+34, r25	; 0x22
    124a:	89 a3       	std	Y+33, r24	; 0x21
    124c:	0f c0       	rjmp	.+30     	; 0x126c <main+0x326>
    124e:	88 ec       	ldi	r24, 0xC8	; 200
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	98 a3       	std	Y+32, r25	; 0x20
    1254:	8f 8f       	std	Y+31, r24	; 0x1f
    1256:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1258:	98 a1       	ldd	r25, Y+32	; 0x20
    125a:	01 97       	sbiw	r24, 0x01	; 1
    125c:	f1 f7       	brne	.-4      	; 0x125a <main+0x314>
    125e:	98 a3       	std	Y+32, r25	; 0x20
    1260:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1262:	89 a1       	ldd	r24, Y+33	; 0x21
    1264:	9a a1       	ldd	r25, Y+34	; 0x22
    1266:	01 97       	sbiw	r24, 0x01	; 1
    1268:	9a a3       	std	Y+34, r25	; 0x22
    126a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    126c:	89 a1       	ldd	r24, Y+33	; 0x21
    126e:	9a a1       	ldd	r25, Y+34	; 0x22
    1270:	00 97       	sbiw	r24, 0x00	; 0
    1272:	69 f7       	brne	.-38     	; 0x124e <main+0x308>
    1274:	14 c0       	rjmp	.+40     	; 0x129e <main+0x358>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1276:	6b a1       	ldd	r22, Y+35	; 0x23
    1278:	7c a1       	ldd	r23, Y+36	; 0x24
    127a:	8d a1       	ldd	r24, Y+37	; 0x25
    127c:	9e a1       	ldd	r25, Y+38	; 0x26
    127e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1282:	dc 01       	movw	r26, r24
    1284:	cb 01       	movw	r24, r22
    1286:	9a a3       	std	Y+34, r25	; 0x22
    1288:	89 a3       	std	Y+33, r24	; 0x21
    128a:	89 a1       	ldd	r24, Y+33	; 0x21
    128c:	9a a1       	ldd	r25, Y+34	; 0x22
    128e:	9e 8f       	std	Y+30, r25	; 0x1e
    1290:	8d 8f       	std	Y+29, r24	; 0x1d
    1292:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1294:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1296:	01 97       	sbiw	r24, 0x01	; 1
    1298:	f1 f7       	brne	.-4      	; 0x1296 <main+0x350>
    129a:	9e 8f       	std	Y+30, r25	; 0x1e
    129c:	8d 8f       	std	Y+29, r24	; 0x1d
	//delay 10 millisecond between every 2 write byte instruction in External EEPROM(EEPROM data sheet)
	_delay_ms(10);
	//read byte from address 0x0100 in External EEPROM
	EEPROM_readByte(0x0100,&value);
    129e:	9e 01       	movw	r18, r28
    12a0:	2f 5a       	subi	r18, 0xAF	; 175
    12a2:	3f 4f       	sbci	r19, 0xFF	; 255
    12a4:	80 e0       	ldi	r24, 0x00	; 0
    12a6:	91 e0       	ldi	r25, 0x01	; 1
    12a8:	b9 01       	movw	r22, r18
    12aa:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <EEPROM_readByte>
	//if this value equal 1 then this not the first time
	if(value == 1)
    12ae:	fe 01       	movw	r30, r28
    12b0:	ef 5a       	subi	r30, 0xAF	; 175
    12b2:	ff 4f       	sbci	r31, 0xFF	; 255
    12b4:	80 81       	ld	r24, Z
    12b6:	81 30       	cpi	r24, 0x01	; 1
    12b8:	09 f0       	breq	.+2      	; 0x12bc <main+0x376>
    12ba:	43 c1       	rjmp	.+646    	; 0x1542 <main+0x5fc>
	{
		//send to the salve SECONDTIME Macro by UART to indicate that is not the first time to go to main screen
		UART_SendByte(SECONDTIME);
    12bc:	8a e2       	ldi	r24, 0x2A	; 42
    12be:	0e 94 84 10 	call	0x2108	; 0x2108 <UART_SendByte>
		//then go in super loop
		while(1)
		{
			//if password entered 3 times wrong then turn on the buzzer and tell salve to show a thief massage
			if(counter == 3)
    12c2:	89 ad       	ldd	r24, Y+57	; 0x39
    12c4:	83 30       	cpi	r24, 0x03	; 3
    12c6:	09 f0       	breq	.+2      	; 0x12ca <main+0x384>
    12c8:	81 c0       	rjmp	.+258    	; 0x13cc <main+0x486>
			{
				counter = 0;
    12ca:	19 ae       	std	Y+57, r1	; 0x39
				SET_BIT(PORTD,PD6);
    12cc:	a2 e3       	ldi	r26, 0x32	; 50
    12ce:	b0 e0       	ldi	r27, 0x00	; 0
    12d0:	e2 e3       	ldi	r30, 0x32	; 50
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	80 81       	ld	r24, Z
    12d6:	80 64       	ori	r24, 0x40	; 64
    12d8:	8c 93       	st	X, r24
    12da:	80 e0       	ldi	r24, 0x00	; 0
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	aa e7       	ldi	r26, 0x7A	; 122
    12e0:	b4 e4       	ldi	r27, 0x44	; 68
    12e2:	89 8f       	std	Y+25, r24	; 0x19
    12e4:	9a 8f       	std	Y+26, r25	; 0x1a
    12e6:	ab 8f       	std	Y+27, r26	; 0x1b
    12e8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12ea:	69 8d       	ldd	r22, Y+25	; 0x19
    12ec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12f2:	20 e0       	ldi	r18, 0x00	; 0
    12f4:	30 e0       	ldi	r19, 0x00	; 0
    12f6:	4a ef       	ldi	r20, 0xFA	; 250
    12f8:	54 e4       	ldi	r21, 0x44	; 68
    12fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12fe:	dc 01       	movw	r26, r24
    1300:	cb 01       	movw	r24, r22
    1302:	8d 8b       	std	Y+21, r24	; 0x15
    1304:	9e 8b       	std	Y+22, r25	; 0x16
    1306:	af 8b       	std	Y+23, r26	; 0x17
    1308:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    130a:	6d 89       	ldd	r22, Y+21	; 0x15
    130c:	7e 89       	ldd	r23, Y+22	; 0x16
    130e:	8f 89       	ldd	r24, Y+23	; 0x17
    1310:	98 8d       	ldd	r25, Y+24	; 0x18
    1312:	20 e0       	ldi	r18, 0x00	; 0
    1314:	30 e0       	ldi	r19, 0x00	; 0
    1316:	40 e8       	ldi	r20, 0x80	; 128
    1318:	5f e3       	ldi	r21, 0x3F	; 63
    131a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    131e:	88 23       	and	r24, r24
    1320:	2c f4       	brge	.+10     	; 0x132c <main+0x3e6>
		__ticks = 1;
    1322:	81 e0       	ldi	r24, 0x01	; 1
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	9c 8b       	std	Y+20, r25	; 0x14
    1328:	8b 8b       	std	Y+19, r24	; 0x13
    132a:	3f c0       	rjmp	.+126    	; 0x13aa <main+0x464>
	else if (__tmp > 65535)
    132c:	6d 89       	ldd	r22, Y+21	; 0x15
    132e:	7e 89       	ldd	r23, Y+22	; 0x16
    1330:	8f 89       	ldd	r24, Y+23	; 0x17
    1332:	98 8d       	ldd	r25, Y+24	; 0x18
    1334:	20 e0       	ldi	r18, 0x00	; 0
    1336:	3f ef       	ldi	r19, 0xFF	; 255
    1338:	4f e7       	ldi	r20, 0x7F	; 127
    133a:	57 e4       	ldi	r21, 0x47	; 71
    133c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1340:	18 16       	cp	r1, r24
    1342:	4c f5       	brge	.+82     	; 0x1396 <main+0x450>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1344:	69 8d       	ldd	r22, Y+25	; 0x19
    1346:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1348:	8b 8d       	ldd	r24, Y+27	; 0x1b
    134a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    134c:	20 e0       	ldi	r18, 0x00	; 0
    134e:	30 e0       	ldi	r19, 0x00	; 0
    1350:	40 e2       	ldi	r20, 0x20	; 32
    1352:	51 e4       	ldi	r21, 0x41	; 65
    1354:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1358:	dc 01       	movw	r26, r24
    135a:	cb 01       	movw	r24, r22
    135c:	bc 01       	movw	r22, r24
    135e:	cd 01       	movw	r24, r26
    1360:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1364:	dc 01       	movw	r26, r24
    1366:	cb 01       	movw	r24, r22
    1368:	9c 8b       	std	Y+20, r25	; 0x14
    136a:	8b 8b       	std	Y+19, r24	; 0x13
    136c:	0f c0       	rjmp	.+30     	; 0x138c <main+0x446>
    136e:	88 ec       	ldi	r24, 0xC8	; 200
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	9a 8b       	std	Y+18, r25	; 0x12
    1374:	89 8b       	std	Y+17, r24	; 0x11
    1376:	89 89       	ldd	r24, Y+17	; 0x11
    1378:	9a 89       	ldd	r25, Y+18	; 0x12
    137a:	01 97       	sbiw	r24, 0x01	; 1
    137c:	f1 f7       	brne	.-4      	; 0x137a <main+0x434>
    137e:	9a 8b       	std	Y+18, r25	; 0x12
    1380:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1382:	8b 89       	ldd	r24, Y+19	; 0x13
    1384:	9c 89       	ldd	r25, Y+20	; 0x14
    1386:	01 97       	sbiw	r24, 0x01	; 1
    1388:	9c 8b       	std	Y+20, r25	; 0x14
    138a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    138c:	8b 89       	ldd	r24, Y+19	; 0x13
    138e:	9c 89       	ldd	r25, Y+20	; 0x14
    1390:	00 97       	sbiw	r24, 0x00	; 0
    1392:	69 f7       	brne	.-38     	; 0x136e <main+0x428>
    1394:	14 c0       	rjmp	.+40     	; 0x13be <main+0x478>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1396:	6d 89       	ldd	r22, Y+21	; 0x15
    1398:	7e 89       	ldd	r23, Y+22	; 0x16
    139a:	8f 89       	ldd	r24, Y+23	; 0x17
    139c:	98 8d       	ldd	r25, Y+24	; 0x18
    139e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13a2:	dc 01       	movw	r26, r24
    13a4:	cb 01       	movw	r24, r22
    13a6:	9c 8b       	std	Y+20, r25	; 0x14
    13a8:	8b 8b       	std	Y+19, r24	; 0x13
    13aa:	8b 89       	ldd	r24, Y+19	; 0x13
    13ac:	9c 89       	ldd	r25, Y+20	; 0x14
    13ae:	98 8b       	std	Y+16, r25	; 0x10
    13b0:	8f 87       	std	Y+15, r24	; 0x0f
    13b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    13b4:	98 89       	ldd	r25, Y+16	; 0x10
    13b6:	01 97       	sbiw	r24, 0x01	; 1
    13b8:	f1 f7       	brne	.-4      	; 0x13b6 <main+0x470>
    13ba:	98 8b       	std	Y+16, r25	; 0x10
    13bc:	8f 87       	std	Y+15, r24	; 0x0f
				// turn on buzzer for 10 seconds
				_delay_ms(1000);
				//turn off the buzzer
				CLEAR_BIT(PORTD,PD6);
    13be:	a2 e3       	ldi	r26, 0x32	; 50
    13c0:	b0 e0       	ldi	r27, 0x00	; 0
    13c2:	e2 e3       	ldi	r30, 0x32	; 50
    13c4:	f0 e0       	ldi	r31, 0x00	; 0
    13c6:	80 81       	ld	r24, Z
    13c8:	8f 7b       	andi	r24, 0xBF	; 191
    13ca:	8c 93       	st	X, r24
			}
			//Receive the command from the slave if open the door or change the password
			command = UART_ReceiveByte();
    13cc:	0e 94 b6 10 	call	0x216c	; 0x216c <UART_ReceiveByte>
    13d0:	8a af       	std	Y+58, r24	; 0x3a
			//if command open
			if(command == OPEN)
    13d2:	8a ad       	ldd	r24, Y+58	; 0x3a
    13d4:	8f 36       	cpi	r24, 0x6F	; 111
    13d6:	79 f4       	brne	.+30     	; 0x13f6 <main+0x4b0>
			{
				//check the pass entered
				if(receivePass(pass2))
    13d8:	ce 01       	movw	r24, r28
    13da:	89 5b       	subi	r24, 0xB9	; 185
    13dc:	9f 4f       	sbci	r25, 0xFF	; 255
    13de:	0e 94 50 06 	call	0xca0	; 0xca0 <receivePass>
    13e2:	88 23       	and	r24, r24
    13e4:	21 f0       	breq	.+8      	; 0x13ee <main+0x4a8>
				{
					//reset the thief counter
					counter = 0;
    13e6:	19 ae       	std	Y+57, r1	; 0x39
					//open the door
					openDoor();
    13e8:	0e 94 89 06 	call	0xd12	; 0xd12 <openDoor>
    13ec:	6a cf       	rjmp	.-300    	; 0x12c2 <main+0x37c>
				}
				else
					//if entered password wrong increment the thief counter
					counter++;
    13ee:	89 ad       	ldd	r24, Y+57	; 0x39
    13f0:	8f 5f       	subi	r24, 0xFF	; 255
    13f2:	89 af       	std	Y+57, r24	; 0x39
    13f4:	66 cf       	rjmp	.-308    	; 0x12c2 <main+0x37c>
			}
			//if command change
			else if(command == CHANGE)
    13f6:	8a ad       	ldd	r24, Y+58	; 0x3a
    13f8:	83 36       	cpi	r24, 0x63	; 99
    13fa:	09 f0       	breq	.+2      	; 0x13fe <main+0x4b8>
    13fc:	62 cf       	rjmp	.-316    	; 0x12c2 <main+0x37c>
			{
				//Receive the pass from the slave
				receivePass(pass2);
    13fe:	ce 01       	movw	r24, r28
    1400:	89 5b       	subi	r24, 0xB9	; 185
    1402:	9f 4f       	sbci	r25, 0xFF	; 255
    1404:	0e 94 50 06 	call	0xca0	; 0xca0 <receivePass>
				//Receive the command again
				command = UART_ReceiveByte();
    1408:	0e 94 b6 10 	call	0x216c	; 0x216c <UART_ReceiveByte>
    140c:	8a af       	std	Y+58, r24	; 0x3a
				//if master Resends the change command again then the pass is correct
				if(command == CHANGE)
    140e:	8a ad       	ldd	r24, Y+58	; 0x3a
    1410:	83 36       	cpi	r24, 0x63	; 99
    1412:	09 f0       	breq	.+2      	; 0x1416 <main+0x4d0>
    1414:	56 cf       	rjmp	.-340    	; 0x12c2 <main+0x37c>
				{
					//reset the thief counter
					counter = 0;
    1416:	19 ae       	std	Y+57, r1	; 0x39
					//Receive the new password
					receivePass(pass2);
    1418:	ce 01       	movw	r24, r28
    141a:	89 5b       	subi	r24, 0xB9	; 185
    141c:	9f 4f       	sbci	r25, 0xFF	; 255
    141e:	0e 94 50 06 	call	0xca0	; 0xca0 <receivePass>
					//save the new password in External EEPROM
					for(index = 0 ; index < PASSWORDDIGITS ; index++)
    1422:	1c ae       	std	Y+60, r1	; 0x3c
    1424:	89 c0       	rjmp	.+274    	; 0x1538 <main+0x5f2>
					{
						EEPROM_writeByte(0x0200+index,pass2[index]);
    1426:	8c ad       	ldd	r24, Y+60	; 0x3c
    1428:	88 2f       	mov	r24, r24
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	80 50       	subi	r24, 0x00	; 0
    142e:	9e 4f       	sbci	r25, 0xFE	; 254
    1430:	ac 01       	movw	r20, r24
    1432:	8c ad       	ldd	r24, Y+60	; 0x3c
    1434:	28 2f       	mov	r18, r24
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	ce 01       	movw	r24, r28
    143a:	89 5b       	subi	r24, 0xB9	; 185
    143c:	9f 4f       	sbci	r25, 0xFF	; 255
    143e:	fc 01       	movw	r30, r24
    1440:	e2 0f       	add	r30, r18
    1442:	f3 1f       	adc	r31, r19
    1444:	20 81       	ld	r18, Z
    1446:	ca 01       	movw	r24, r20
    1448:	62 2f       	mov	r22, r18
    144a:	0e 94 b6 0a 	call	0x156c	; 0x156c <EEPROM_writeByte>
    144e:	80 e0       	ldi	r24, 0x00	; 0
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	a0 e2       	ldi	r26, 0x20	; 32
    1454:	b1 e4       	ldi	r27, 0x41	; 65
    1456:	8b 87       	std	Y+11, r24	; 0x0b
    1458:	9c 87       	std	Y+12, r25	; 0x0c
    145a:	ad 87       	std	Y+13, r26	; 0x0d
    145c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    145e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1460:	7c 85       	ldd	r23, Y+12	; 0x0c
    1462:	8d 85       	ldd	r24, Y+13	; 0x0d
    1464:	9e 85       	ldd	r25, Y+14	; 0x0e
    1466:	20 e0       	ldi	r18, 0x00	; 0
    1468:	30 e0       	ldi	r19, 0x00	; 0
    146a:	4a ef       	ldi	r20, 0xFA	; 250
    146c:	54 e4       	ldi	r21, 0x44	; 68
    146e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1472:	dc 01       	movw	r26, r24
    1474:	cb 01       	movw	r24, r22
    1476:	8f 83       	std	Y+7, r24	; 0x07
    1478:	98 87       	std	Y+8, r25	; 0x08
    147a:	a9 87       	std	Y+9, r26	; 0x09
    147c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    147e:	6f 81       	ldd	r22, Y+7	; 0x07
    1480:	78 85       	ldd	r23, Y+8	; 0x08
    1482:	89 85       	ldd	r24, Y+9	; 0x09
    1484:	9a 85       	ldd	r25, Y+10	; 0x0a
    1486:	20 e0       	ldi	r18, 0x00	; 0
    1488:	30 e0       	ldi	r19, 0x00	; 0
    148a:	40 e8       	ldi	r20, 0x80	; 128
    148c:	5f e3       	ldi	r21, 0x3F	; 63
    148e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1492:	88 23       	and	r24, r24
    1494:	2c f4       	brge	.+10     	; 0x14a0 <main+0x55a>
		__ticks = 1;
    1496:	81 e0       	ldi	r24, 0x01	; 1
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	9e 83       	std	Y+6, r25	; 0x06
    149c:	8d 83       	std	Y+5, r24	; 0x05
    149e:	3f c0       	rjmp	.+126    	; 0x151e <main+0x5d8>
	else if (__tmp > 65535)
    14a0:	6f 81       	ldd	r22, Y+7	; 0x07
    14a2:	78 85       	ldd	r23, Y+8	; 0x08
    14a4:	89 85       	ldd	r24, Y+9	; 0x09
    14a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    14a8:	20 e0       	ldi	r18, 0x00	; 0
    14aa:	3f ef       	ldi	r19, 0xFF	; 255
    14ac:	4f e7       	ldi	r20, 0x7F	; 127
    14ae:	57 e4       	ldi	r21, 0x47	; 71
    14b0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14b4:	18 16       	cp	r1, r24
    14b6:	4c f5       	brge	.+82     	; 0x150a <main+0x5c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    14ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    14bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    14be:	9e 85       	ldd	r25, Y+14	; 0x0e
    14c0:	20 e0       	ldi	r18, 0x00	; 0
    14c2:	30 e0       	ldi	r19, 0x00	; 0
    14c4:	40 e2       	ldi	r20, 0x20	; 32
    14c6:	51 e4       	ldi	r21, 0x41	; 65
    14c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14cc:	dc 01       	movw	r26, r24
    14ce:	cb 01       	movw	r24, r22
    14d0:	bc 01       	movw	r22, r24
    14d2:	cd 01       	movw	r24, r26
    14d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14d8:	dc 01       	movw	r26, r24
    14da:	cb 01       	movw	r24, r22
    14dc:	9e 83       	std	Y+6, r25	; 0x06
    14de:	8d 83       	std	Y+5, r24	; 0x05
    14e0:	0f c0       	rjmp	.+30     	; 0x1500 <main+0x5ba>
    14e2:	88 ec       	ldi	r24, 0xC8	; 200
    14e4:	90 e0       	ldi	r25, 0x00	; 0
    14e6:	9c 83       	std	Y+4, r25	; 0x04
    14e8:	8b 83       	std	Y+3, r24	; 0x03
    14ea:	8b 81       	ldd	r24, Y+3	; 0x03
    14ec:	9c 81       	ldd	r25, Y+4	; 0x04
    14ee:	01 97       	sbiw	r24, 0x01	; 1
    14f0:	f1 f7       	brne	.-4      	; 0x14ee <main+0x5a8>
    14f2:	9c 83       	std	Y+4, r25	; 0x04
    14f4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14f6:	8d 81       	ldd	r24, Y+5	; 0x05
    14f8:	9e 81       	ldd	r25, Y+6	; 0x06
    14fa:	01 97       	sbiw	r24, 0x01	; 1
    14fc:	9e 83       	std	Y+6, r25	; 0x06
    14fe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1500:	8d 81       	ldd	r24, Y+5	; 0x05
    1502:	9e 81       	ldd	r25, Y+6	; 0x06
    1504:	00 97       	sbiw	r24, 0x00	; 0
    1506:	69 f7       	brne	.-38     	; 0x14e2 <main+0x59c>
    1508:	14 c0       	rjmp	.+40     	; 0x1532 <main+0x5ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    150a:	6f 81       	ldd	r22, Y+7	; 0x07
    150c:	78 85       	ldd	r23, Y+8	; 0x08
    150e:	89 85       	ldd	r24, Y+9	; 0x09
    1510:	9a 85       	ldd	r25, Y+10	; 0x0a
    1512:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1516:	dc 01       	movw	r26, r24
    1518:	cb 01       	movw	r24, r22
    151a:	9e 83       	std	Y+6, r25	; 0x06
    151c:	8d 83       	std	Y+5, r24	; 0x05
    151e:	8d 81       	ldd	r24, Y+5	; 0x05
    1520:	9e 81       	ldd	r25, Y+6	; 0x06
    1522:	9a 83       	std	Y+2, r25	; 0x02
    1524:	89 83       	std	Y+1, r24	; 0x01
    1526:	89 81       	ldd	r24, Y+1	; 0x01
    1528:	9a 81       	ldd	r25, Y+2	; 0x02
    152a:	01 97       	sbiw	r24, 0x01	; 1
    152c:	f1 f7       	brne	.-4      	; 0x152a <main+0x5e4>
    152e:	9a 83       	std	Y+2, r25	; 0x02
    1530:	89 83       	std	Y+1, r24	; 0x01
					//reset the thief counter
					counter = 0;
					//Receive the new password
					receivePass(pass2);
					//save the new password in External EEPROM
					for(index = 0 ; index < PASSWORDDIGITS ; index++)
    1532:	8c ad       	ldd	r24, Y+60	; 0x3c
    1534:	8f 5f       	subi	r24, 0xFF	; 255
    1536:	8c af       	std	Y+60, r24	; 0x3c
    1538:	8c ad       	ldd	r24, Y+60	; 0x3c
    153a:	84 30       	cpi	r24, 0x04	; 4
    153c:	08 f4       	brcc	.+2      	; 0x1540 <main+0x5fa>
    153e:	73 cf       	rjmp	.-282    	; 0x1426 <main+0x4e0>
    1540:	c0 ce       	rjmp	.-640    	; 0x12c2 <main+0x37c>
    1542:	80 e0       	ldi	r24, 0x00	; 0
    1544:	90 e0       	ldi	r25, 0x00	; 0
					}
				}
			}
		}
	}
}
    1546:	c5 5a       	subi	r28, 0xA5	; 165
    1548:	df 4f       	sbci	r29, 0xFF	; 255
    154a:	0f b6       	in	r0, 0x3f	; 63
    154c:	f8 94       	cli
    154e:	de bf       	out	0x3e, r29	; 62
    1550:	0f be       	out	0x3f, r0	; 63
    1552:	cd bf       	out	0x3d, r28	; 61
    1554:	cf 91       	pop	r28
    1556:	df 91       	pop	r29
    1558:	08 95       	ret

0000155a <EEPROM_init>:
 *******************************************************************************/
#include "i2c.h"
#include "external_eeprom.h"

void EEPROM_init(void)
{
    155a:	df 93       	push	r29
    155c:	cf 93       	push	r28
    155e:	cd b7       	in	r28, 0x3d	; 61
    1560:	de b7       	in	r29, 0x3e	; 62
	/* just initialize the I2C(TWI) module inside the MC */
	TWI_init();
    1562:	0e 94 57 0b 	call	0x16ae	; 0x16ae <TWI_init>
}
    1566:	cf 91       	pop	r28
    1568:	df 91       	pop	r29
    156a:	08 95       	ret

0000156c <EEPROM_writeByte>:

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    156c:	df 93       	push	r29
    156e:	cf 93       	push	r28
    1570:	00 d0       	rcall	.+0      	; 0x1572 <EEPROM_writeByte+0x6>
    1572:	00 d0       	rcall	.+0      	; 0x1574 <EEPROM_writeByte+0x8>
    1574:	cd b7       	in	r28, 0x3d	; 61
    1576:	de b7       	in	r29, 0x3e	; 62
    1578:	9a 83       	std	Y+2, r25	; 0x02
    157a:	89 83       	std	Y+1, r24	; 0x01
    157c:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    157e:	0e 94 6d 0b 	call	0x16da	; 0x16da <TWI_start>
    if (TWI_getStatus() != TW_START)
    1582:	0e 94 c5 0b 	call	0x178a	; 0x178a <TWI_getStatus>
    1586:	88 30       	cpi	r24, 0x08	; 8
    1588:	11 f0       	breq	.+4      	; 0x158e <EEPROM_writeByte+0x22>
        return ERROR;
    158a:	1c 82       	std	Y+4, r1	; 0x04
    158c:	28 c0       	rjmp	.+80     	; 0x15de <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_write((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    158e:	89 81       	ldd	r24, Y+1	; 0x01
    1590:	9a 81       	ldd	r25, Y+2	; 0x02
    1592:	80 70       	andi	r24, 0x00	; 0
    1594:	97 70       	andi	r25, 0x07	; 7
    1596:	88 0f       	add	r24, r24
    1598:	89 2f       	mov	r24, r25
    159a:	88 1f       	adc	r24, r24
    159c:	99 0b       	sbc	r25, r25
    159e:	91 95       	neg	r25
    15a0:	80 6a       	ori	r24, 0xA0	; 160
    15a2:	0e 94 88 0b 	call	0x1710	; 0x1710 <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
    15a6:	0e 94 c5 0b 	call	0x178a	; 0x178a <TWI_getStatus>
    15aa:	88 31       	cpi	r24, 0x18	; 24
    15ac:	11 f0       	breq	.+4      	; 0x15b2 <EEPROM_writeByte+0x46>
        return ERROR; 
    15ae:	1c 82       	std	Y+4, r1	; 0x04
    15b0:	16 c0       	rjmp	.+44     	; 0x15de <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_write((uint8)(u16addr));
    15b2:	89 81       	ldd	r24, Y+1	; 0x01
    15b4:	0e 94 88 0b 	call	0x1710	; 0x1710 <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
    15b8:	0e 94 c5 0b 	call	0x178a	; 0x178a <TWI_getStatus>
    15bc:	88 32       	cpi	r24, 0x28	; 40
    15be:	11 f0       	breq	.+4      	; 0x15c4 <EEPROM_writeByte+0x58>
        return ERROR;
    15c0:	1c 82       	std	Y+4, r1	; 0x04
    15c2:	0d c0       	rjmp	.+26     	; 0x15de <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_write(u8data);
    15c4:	8b 81       	ldd	r24, Y+3	; 0x03
    15c6:	0e 94 88 0b 	call	0x1710	; 0x1710 <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
    15ca:	0e 94 c5 0b 	call	0x178a	; 0x178a <TWI_getStatus>
    15ce:	88 32       	cpi	r24, 0x28	; 40
    15d0:	11 f0       	breq	.+4      	; 0x15d6 <EEPROM_writeByte+0x6a>
        return ERROR;
    15d2:	1c 82       	std	Y+4, r1	; 0x04
    15d4:	04 c0       	rjmp	.+8      	; 0x15de <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    15d6:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <TWI_stop>
	
    return SUCCESS;
    15da:	81 e0       	ldi	r24, 0x01	; 1
    15dc:	8c 83       	std	Y+4, r24	; 0x04
    15de:	8c 81       	ldd	r24, Y+4	; 0x04
}
    15e0:	0f 90       	pop	r0
    15e2:	0f 90       	pop	r0
    15e4:	0f 90       	pop	r0
    15e6:	0f 90       	pop	r0
    15e8:	cf 91       	pop	r28
    15ea:	df 91       	pop	r29
    15ec:	08 95       	ret

000015ee <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    15ee:	df 93       	push	r29
    15f0:	cf 93       	push	r28
    15f2:	00 d0       	rcall	.+0      	; 0x15f4 <EEPROM_readByte+0x6>
    15f4:	00 d0       	rcall	.+0      	; 0x15f6 <EEPROM_readByte+0x8>
    15f6:	0f 92       	push	r0
    15f8:	cd b7       	in	r28, 0x3d	; 61
    15fa:	de b7       	in	r29, 0x3e	; 62
    15fc:	9a 83       	std	Y+2, r25	; 0x02
    15fe:	89 83       	std	Y+1, r24	; 0x01
    1600:	7c 83       	std	Y+4, r23	; 0x04
    1602:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1604:	0e 94 6d 0b 	call	0x16da	; 0x16da <TWI_start>
    if (TWI_getStatus() != TW_START)
    1608:	0e 94 c5 0b 	call	0x178a	; 0x178a <TWI_getStatus>
    160c:	88 30       	cpi	r24, 0x08	; 8
    160e:	11 f0       	breq	.+4      	; 0x1614 <EEPROM_readByte+0x26>
        return ERROR;
    1610:	1d 82       	std	Y+5, r1	; 0x05
    1612:	44 c0       	rjmp	.+136    	; 0x169c <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    1614:	89 81       	ldd	r24, Y+1	; 0x01
    1616:	9a 81       	ldd	r25, Y+2	; 0x02
    1618:	80 70       	andi	r24, 0x00	; 0
    161a:	97 70       	andi	r25, 0x07	; 7
    161c:	88 0f       	add	r24, r24
    161e:	89 2f       	mov	r24, r25
    1620:	88 1f       	adc	r24, r24
    1622:	99 0b       	sbc	r25, r25
    1624:	91 95       	neg	r25
    1626:	80 6a       	ori	r24, 0xA0	; 160
    1628:	0e 94 88 0b 	call	0x1710	; 0x1710 <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
    162c:	0e 94 c5 0b 	call	0x178a	; 0x178a <TWI_getStatus>
    1630:	88 31       	cpi	r24, 0x18	; 24
    1632:	11 f0       	breq	.+4      	; 0x1638 <EEPROM_readByte+0x4a>
        return ERROR;
    1634:	1d 82       	std	Y+5, r1	; 0x05
    1636:	32 c0       	rjmp	.+100    	; 0x169c <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_write((uint8)(u16addr));
    1638:	89 81       	ldd	r24, Y+1	; 0x01
    163a:	0e 94 88 0b 	call	0x1710	; 0x1710 <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
    163e:	0e 94 c5 0b 	call	0x178a	; 0x178a <TWI_getStatus>
    1642:	88 32       	cpi	r24, 0x28	; 40
    1644:	11 f0       	breq	.+4      	; 0x164a <EEPROM_readByte+0x5c>
        return ERROR;
    1646:	1d 82       	std	Y+5, r1	; 0x05
    1648:	29 c0       	rjmp	.+82     	; 0x169c <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    164a:	0e 94 6d 0b 	call	0x16da	; 0x16da <TWI_start>
    if (TWI_getStatus() != TW_REP_START)
    164e:	0e 94 c5 0b 	call	0x178a	; 0x178a <TWI_getStatus>
    1652:	80 31       	cpi	r24, 0x10	; 16
    1654:	11 f0       	breq	.+4      	; 0x165a <EEPROM_readByte+0x6c>
        return ERROR;
    1656:	1d 82       	std	Y+5, r1	; 0x05
    1658:	21 c0       	rjmp	.+66     	; 0x169c <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    165a:	89 81       	ldd	r24, Y+1	; 0x01
    165c:	9a 81       	ldd	r25, Y+2	; 0x02
    165e:	80 70       	andi	r24, 0x00	; 0
    1660:	97 70       	andi	r25, 0x07	; 7
    1662:	88 0f       	add	r24, r24
    1664:	89 2f       	mov	r24, r25
    1666:	88 1f       	adc	r24, r24
    1668:	99 0b       	sbc	r25, r25
    166a:	91 95       	neg	r25
    166c:	81 6a       	ori	r24, 0xA1	; 161
    166e:	0e 94 88 0b 	call	0x1710	; 0x1710 <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_R_ACK)
    1672:	0e 94 c5 0b 	call	0x178a	; 0x178a <TWI_getStatus>
    1676:	80 34       	cpi	r24, 0x40	; 64
    1678:	11 f0       	breq	.+4      	; 0x167e <EEPROM_readByte+0x90>
        return ERROR;
    167a:	1d 82       	std	Y+5, r1	; 0x05
    167c:	0f c0       	rjmp	.+30     	; 0x169c <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readWithNACK();
    167e:	0e 94 b2 0b 	call	0x1764	; 0x1764 <TWI_readWithNACK>
    1682:	eb 81       	ldd	r30, Y+3	; 0x03
    1684:	fc 81       	ldd	r31, Y+4	; 0x04
    1686:	80 83       	st	Z, r24
    if (TWI_getStatus() != TW_MR_DATA_NACK)
    1688:	0e 94 c5 0b 	call	0x178a	; 0x178a <TWI_getStatus>
    168c:	88 35       	cpi	r24, 0x58	; 88
    168e:	11 f0       	breq	.+4      	; 0x1694 <EEPROM_readByte+0xa6>
        return ERROR;
    1690:	1d 82       	std	Y+5, r1	; 0x05
    1692:	04 c0       	rjmp	.+8      	; 0x169c <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    1694:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <TWI_stop>
    return SUCCESS;
    1698:	81 e0       	ldi	r24, 0x01	; 1
    169a:	8d 83       	std	Y+5, r24	; 0x05
    169c:	8d 81       	ldd	r24, Y+5	; 0x05
}
    169e:	0f 90       	pop	r0
    16a0:	0f 90       	pop	r0
    16a2:	0f 90       	pop	r0
    16a4:	0f 90       	pop	r0
    16a6:	0f 90       	pop	r0
    16a8:	cf 91       	pop	r28
    16aa:	df 91       	pop	r29
    16ac:	08 95       	ret

000016ae <TWI_init>:
 *******************************************************************************/
 
#include "i2c.h"

void TWI_init(void)
{
    16ae:	df 93       	push	r29
    16b0:	cf 93       	push	r28
    16b2:	cd b7       	in	r28, 0x3d	; 61
    16b4:	de b7       	in	r29, 0x3e	; 62
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = 0x02;
    16b6:	e0 e2       	ldi	r30, 0x20	; 32
    16b8:	f0 e0       	ldi	r31, 0x00	; 0
    16ba:	82 e0       	ldi	r24, 0x02	; 2
    16bc:	80 83       	st	Z, r24
	TWSR = 0x00;
    16be:	e1 e2       	ldi	r30, 0x21	; 33
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	10 82       	st	Z, r1
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = 0b00000010; // my address = 0x01 :) 
    16c4:	e2 e2       	ldi	r30, 0x22	; 34
    16c6:	f0 e0       	ldi	r31, 0x00	; 0
    16c8:	82 e0       	ldi	r24, 0x02	; 2
    16ca:	80 83       	st	Z, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    16cc:	e6 e5       	ldi	r30, 0x56	; 86
    16ce:	f0 e0       	ldi	r31, 0x00	; 0
    16d0:	84 e0       	ldi	r24, 0x04	; 4
    16d2:	80 83       	st	Z, r24
}
    16d4:	cf 91       	pop	r28
    16d6:	df 91       	pop	r29
    16d8:	08 95       	ret

000016da <TWI_start>:

void TWI_start(void)
{
    16da:	df 93       	push	r29
    16dc:	cf 93       	push	r28
    16de:	cd b7       	in	r28, 0x3d	; 61
    16e0:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    16e2:	e6 e5       	ldi	r30, 0x56	; 86
    16e4:	f0 e0       	ldi	r31, 0x00	; 0
    16e6:	84 ea       	ldi	r24, 0xA4	; 164
    16e8:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    16ea:	e6 e5       	ldi	r30, 0x56	; 86
    16ec:	f0 e0       	ldi	r31, 0x00	; 0
    16ee:	80 81       	ld	r24, Z
    16f0:	88 23       	and	r24, r24
    16f2:	dc f7       	brge	.-10     	; 0x16ea <TWI_start+0x10>
}
    16f4:	cf 91       	pop	r28
    16f6:	df 91       	pop	r29
    16f8:	08 95       	ret

000016fa <TWI_stop>:

void TWI_stop(void)
{
    16fa:	df 93       	push	r29
    16fc:	cf 93       	push	r28
    16fe:	cd b7       	in	r28, 0x3d	; 61
    1700:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    1702:	e6 e5       	ldi	r30, 0x56	; 86
    1704:	f0 e0       	ldi	r31, 0x00	; 0
    1706:	84 e9       	ldi	r24, 0x94	; 148
    1708:	80 83       	st	Z, r24
}
    170a:	cf 91       	pop	r28
    170c:	df 91       	pop	r29
    170e:	08 95       	ret

00001710 <TWI_write>:

void TWI_write(uint8 data)
{
    1710:	df 93       	push	r29
    1712:	cf 93       	push	r28
    1714:	0f 92       	push	r0
    1716:	cd b7       	in	r28, 0x3d	; 61
    1718:	de b7       	in	r29, 0x3e	; 62
    171a:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    171c:	e3 e2       	ldi	r30, 0x23	; 35
    171e:	f0 e0       	ldi	r31, 0x00	; 0
    1720:	89 81       	ldd	r24, Y+1	; 0x01
    1722:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    1724:	e6 e5       	ldi	r30, 0x56	; 86
    1726:	f0 e0       	ldi	r31, 0x00	; 0
    1728:	84 e8       	ldi	r24, 0x84	; 132
    172a:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    172c:	e6 e5       	ldi	r30, 0x56	; 86
    172e:	f0 e0       	ldi	r31, 0x00	; 0
    1730:	80 81       	ld	r24, Z
    1732:	88 23       	and	r24, r24
    1734:	dc f7       	brge	.-10     	; 0x172c <TWI_write+0x1c>
}
    1736:	0f 90       	pop	r0
    1738:	cf 91       	pop	r28
    173a:	df 91       	pop	r29
    173c:	08 95       	ret

0000173e <TWI_readWithACK>:

uint8 TWI_readWithACK(void)
{
    173e:	df 93       	push	r29
    1740:	cf 93       	push	r28
    1742:	cd b7       	in	r28, 0x3d	; 61
    1744:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    1746:	e6 e5       	ldi	r30, 0x56	; 86
    1748:	f0 e0       	ldi	r31, 0x00	; 0
    174a:	84 ec       	ldi	r24, 0xC4	; 196
    174c:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    174e:	e6 e5       	ldi	r30, 0x56	; 86
    1750:	f0 e0       	ldi	r31, 0x00	; 0
    1752:	80 81       	ld	r24, Z
    1754:	88 23       	and	r24, r24
    1756:	dc f7       	brge	.-10     	; 0x174e <TWI_readWithACK+0x10>
    /* Read Data */
    return TWDR;
    1758:	e3 e2       	ldi	r30, 0x23	; 35
    175a:	f0 e0       	ldi	r31, 0x00	; 0
    175c:	80 81       	ld	r24, Z
}
    175e:	cf 91       	pop	r28
    1760:	df 91       	pop	r29
    1762:	08 95       	ret

00001764 <TWI_readWithNACK>:

uint8 TWI_readWithNACK(void)
{
    1764:	df 93       	push	r29
    1766:	cf 93       	push	r28
    1768:	cd b7       	in	r28, 0x3d	; 61
    176a:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    176c:	e6 e5       	ldi	r30, 0x56	; 86
    176e:	f0 e0       	ldi	r31, 0x00	; 0
    1770:	84 e8       	ldi	r24, 0x84	; 132
    1772:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1774:	e6 e5       	ldi	r30, 0x56	; 86
    1776:	f0 e0       	ldi	r31, 0x00	; 0
    1778:	80 81       	ld	r24, Z
    177a:	88 23       	and	r24, r24
    177c:	dc f7       	brge	.-10     	; 0x1774 <TWI_readWithNACK+0x10>
    /* Read Data */
    return TWDR;
    177e:	e3 e2       	ldi	r30, 0x23	; 35
    1780:	f0 e0       	ldi	r31, 0x00	; 0
    1782:	80 81       	ld	r24, Z
}
    1784:	cf 91       	pop	r28
    1786:	df 91       	pop	r29
    1788:	08 95       	ret

0000178a <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    178a:	df 93       	push	r29
    178c:	cf 93       	push	r28
    178e:	0f 92       	push	r0
    1790:	cd b7       	in	r28, 0x3d	; 61
    1792:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    1794:	e1 e2       	ldi	r30, 0x21	; 33
    1796:	f0 e0       	ldi	r31, 0x00	; 0
    1798:	80 81       	ld	r24, Z
    179a:	88 7f       	andi	r24, 0xF8	; 248
    179c:	89 83       	std	Y+1, r24	; 0x01
    return status;
    179e:	89 81       	ldd	r24, Y+1	; 0x01
}
    17a0:	0f 90       	pop	r0
    17a2:	cf 91       	pop	r28
    17a4:	df 91       	pop	r29
    17a6:	08 95       	ret

000017a8 <__vector_9>:
static volatile void (*g_Timer1_callBackPtrB) (void) = NULL_PTR ;
static volatile void (*g_Timer2_callBackPtr) (void) = NULL_PTR ;

/**********************************************INTERRUPT SERVICES ROUTINES******************************************/
ISR(TIMER0_OVF_vect)
{
    17a8:	1f 92       	push	r1
    17aa:	0f 92       	push	r0
    17ac:	0f b6       	in	r0, 0x3f	; 63
    17ae:	0f 92       	push	r0
    17b0:	11 24       	eor	r1, r1
    17b2:	2f 93       	push	r18
    17b4:	3f 93       	push	r19
    17b6:	4f 93       	push	r20
    17b8:	5f 93       	push	r21
    17ba:	6f 93       	push	r22
    17bc:	7f 93       	push	r23
    17be:	8f 93       	push	r24
    17c0:	9f 93       	push	r25
    17c2:	af 93       	push	r26
    17c4:	bf 93       	push	r27
    17c6:	ef 93       	push	r30
    17c8:	ff 93       	push	r31
    17ca:	df 93       	push	r29
    17cc:	cf 93       	push	r28
    17ce:	cd b7       	in	r28, 0x3d	; 61
    17d0:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer0_callBackPtr != NULL_PTR)
    17d2:	80 91 6e 00 	lds	r24, 0x006E
    17d6:	90 91 6f 00 	lds	r25, 0x006F
    17da:	00 97       	sbiw	r24, 0x00	; 0
    17dc:	29 f0       	breq	.+10     	; 0x17e8 <__vector_9+0x40>
	{
		(*g_Timer0_callBackPtr)();
    17de:	e0 91 6e 00 	lds	r30, 0x006E
    17e2:	f0 91 6f 00 	lds	r31, 0x006F
    17e6:	09 95       	icall
	}

}
    17e8:	cf 91       	pop	r28
    17ea:	df 91       	pop	r29
    17ec:	ff 91       	pop	r31
    17ee:	ef 91       	pop	r30
    17f0:	bf 91       	pop	r27
    17f2:	af 91       	pop	r26
    17f4:	9f 91       	pop	r25
    17f6:	8f 91       	pop	r24
    17f8:	7f 91       	pop	r23
    17fa:	6f 91       	pop	r22
    17fc:	5f 91       	pop	r21
    17fe:	4f 91       	pop	r20
    1800:	3f 91       	pop	r19
    1802:	2f 91       	pop	r18
    1804:	0f 90       	pop	r0
    1806:	0f be       	out	0x3f, r0	; 63
    1808:	0f 90       	pop	r0
    180a:	1f 90       	pop	r1
    180c:	18 95       	reti

0000180e <__vector_19>:
ISR(TIMER0_COMP_vect)
{
    180e:	1f 92       	push	r1
    1810:	0f 92       	push	r0
    1812:	0f b6       	in	r0, 0x3f	; 63
    1814:	0f 92       	push	r0
    1816:	11 24       	eor	r1, r1
    1818:	2f 93       	push	r18
    181a:	3f 93       	push	r19
    181c:	4f 93       	push	r20
    181e:	5f 93       	push	r21
    1820:	6f 93       	push	r22
    1822:	7f 93       	push	r23
    1824:	8f 93       	push	r24
    1826:	9f 93       	push	r25
    1828:	af 93       	push	r26
    182a:	bf 93       	push	r27
    182c:	ef 93       	push	r30
    182e:	ff 93       	push	r31
    1830:	df 93       	push	r29
    1832:	cf 93       	push	r28
    1834:	cd b7       	in	r28, 0x3d	; 61
    1836:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer0_callBackPtr != NULL_PTR)
    1838:	80 91 6e 00 	lds	r24, 0x006E
    183c:	90 91 6f 00 	lds	r25, 0x006F
    1840:	00 97       	sbiw	r24, 0x00	; 0
    1842:	29 f0       	breq	.+10     	; 0x184e <__vector_19+0x40>
	{
		(*g_Timer0_callBackPtr)();
    1844:	e0 91 6e 00 	lds	r30, 0x006E
    1848:	f0 91 6f 00 	lds	r31, 0x006F
    184c:	09 95       	icall
	}

}
    184e:	cf 91       	pop	r28
    1850:	df 91       	pop	r29
    1852:	ff 91       	pop	r31
    1854:	ef 91       	pop	r30
    1856:	bf 91       	pop	r27
    1858:	af 91       	pop	r26
    185a:	9f 91       	pop	r25
    185c:	8f 91       	pop	r24
    185e:	7f 91       	pop	r23
    1860:	6f 91       	pop	r22
    1862:	5f 91       	pop	r21
    1864:	4f 91       	pop	r20
    1866:	3f 91       	pop	r19
    1868:	2f 91       	pop	r18
    186a:	0f 90       	pop	r0
    186c:	0f be       	out	0x3f, r0	; 63
    186e:	0f 90       	pop	r0
    1870:	1f 90       	pop	r1
    1872:	18 95       	reti

00001874 <__vector_8>:


ISR(TIMER1_OVF_vect)
{
    1874:	1f 92       	push	r1
    1876:	0f 92       	push	r0
    1878:	0f b6       	in	r0, 0x3f	; 63
    187a:	0f 92       	push	r0
    187c:	11 24       	eor	r1, r1
    187e:	2f 93       	push	r18
    1880:	3f 93       	push	r19
    1882:	4f 93       	push	r20
    1884:	5f 93       	push	r21
    1886:	6f 93       	push	r22
    1888:	7f 93       	push	r23
    188a:	8f 93       	push	r24
    188c:	9f 93       	push	r25
    188e:	af 93       	push	r26
    1890:	bf 93       	push	r27
    1892:	ef 93       	push	r30
    1894:	ff 93       	push	r31
    1896:	df 93       	push	r29
    1898:	cf 93       	push	r28
    189a:	cd b7       	in	r28, 0x3d	; 61
    189c:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer1_callBackPtrA != NULL_PTR)
    189e:	80 91 70 00 	lds	r24, 0x0070
    18a2:	90 91 71 00 	lds	r25, 0x0071
    18a6:	00 97       	sbiw	r24, 0x00	; 0
    18a8:	29 f0       	breq	.+10     	; 0x18b4 <__vector_8+0x40>
	{
		(*g_Timer1_callBackPtrA)();
    18aa:	e0 91 70 00 	lds	r30, 0x0070
    18ae:	f0 91 71 00 	lds	r31, 0x0071
    18b2:	09 95       	icall
	}

}
    18b4:	cf 91       	pop	r28
    18b6:	df 91       	pop	r29
    18b8:	ff 91       	pop	r31
    18ba:	ef 91       	pop	r30
    18bc:	bf 91       	pop	r27
    18be:	af 91       	pop	r26
    18c0:	9f 91       	pop	r25
    18c2:	8f 91       	pop	r24
    18c4:	7f 91       	pop	r23
    18c6:	6f 91       	pop	r22
    18c8:	5f 91       	pop	r21
    18ca:	4f 91       	pop	r20
    18cc:	3f 91       	pop	r19
    18ce:	2f 91       	pop	r18
    18d0:	0f 90       	pop	r0
    18d2:	0f be       	out	0x3f, r0	; 63
    18d4:	0f 90       	pop	r0
    18d6:	1f 90       	pop	r1
    18d8:	18 95       	reti

000018da <__vector_6>:
ISR(TIMER1_COMPA_vect)
{
    18da:	1f 92       	push	r1
    18dc:	0f 92       	push	r0
    18de:	0f b6       	in	r0, 0x3f	; 63
    18e0:	0f 92       	push	r0
    18e2:	11 24       	eor	r1, r1
    18e4:	2f 93       	push	r18
    18e6:	3f 93       	push	r19
    18e8:	4f 93       	push	r20
    18ea:	5f 93       	push	r21
    18ec:	6f 93       	push	r22
    18ee:	7f 93       	push	r23
    18f0:	8f 93       	push	r24
    18f2:	9f 93       	push	r25
    18f4:	af 93       	push	r26
    18f6:	bf 93       	push	r27
    18f8:	ef 93       	push	r30
    18fa:	ff 93       	push	r31
    18fc:	df 93       	push	r29
    18fe:	cf 93       	push	r28
    1900:	cd b7       	in	r28, 0x3d	; 61
    1902:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer1_callBackPtrA != NULL_PTR)
    1904:	80 91 70 00 	lds	r24, 0x0070
    1908:	90 91 71 00 	lds	r25, 0x0071
    190c:	00 97       	sbiw	r24, 0x00	; 0
    190e:	29 f0       	breq	.+10     	; 0x191a <__vector_6+0x40>
	{
		(*g_Timer1_callBackPtrA)();
    1910:	e0 91 70 00 	lds	r30, 0x0070
    1914:	f0 91 71 00 	lds	r31, 0x0071
    1918:	09 95       	icall
	}

}
    191a:	cf 91       	pop	r28
    191c:	df 91       	pop	r29
    191e:	ff 91       	pop	r31
    1920:	ef 91       	pop	r30
    1922:	bf 91       	pop	r27
    1924:	af 91       	pop	r26
    1926:	9f 91       	pop	r25
    1928:	8f 91       	pop	r24
    192a:	7f 91       	pop	r23
    192c:	6f 91       	pop	r22
    192e:	5f 91       	pop	r21
    1930:	4f 91       	pop	r20
    1932:	3f 91       	pop	r19
    1934:	2f 91       	pop	r18
    1936:	0f 90       	pop	r0
    1938:	0f be       	out	0x3f, r0	; 63
    193a:	0f 90       	pop	r0
    193c:	1f 90       	pop	r1
    193e:	18 95       	reti

00001940 <__vector_7>:
ISR(TIMER1_COMPB_vect)
{
    1940:	1f 92       	push	r1
    1942:	0f 92       	push	r0
    1944:	0f b6       	in	r0, 0x3f	; 63
    1946:	0f 92       	push	r0
    1948:	11 24       	eor	r1, r1
    194a:	2f 93       	push	r18
    194c:	3f 93       	push	r19
    194e:	4f 93       	push	r20
    1950:	5f 93       	push	r21
    1952:	6f 93       	push	r22
    1954:	7f 93       	push	r23
    1956:	8f 93       	push	r24
    1958:	9f 93       	push	r25
    195a:	af 93       	push	r26
    195c:	bf 93       	push	r27
    195e:	ef 93       	push	r30
    1960:	ff 93       	push	r31
    1962:	df 93       	push	r29
    1964:	cf 93       	push	r28
    1966:	cd b7       	in	r28, 0x3d	; 61
    1968:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer1_callBackPtrB != NULL_PTR)
    196a:	80 91 72 00 	lds	r24, 0x0072
    196e:	90 91 73 00 	lds	r25, 0x0073
    1972:	00 97       	sbiw	r24, 0x00	; 0
    1974:	29 f0       	breq	.+10     	; 0x1980 <__vector_7+0x40>
	{
		(*g_Timer1_callBackPtrB)();
    1976:	e0 91 72 00 	lds	r30, 0x0072
    197a:	f0 91 73 00 	lds	r31, 0x0073
    197e:	09 95       	icall
	}

}
    1980:	cf 91       	pop	r28
    1982:	df 91       	pop	r29
    1984:	ff 91       	pop	r31
    1986:	ef 91       	pop	r30
    1988:	bf 91       	pop	r27
    198a:	af 91       	pop	r26
    198c:	9f 91       	pop	r25
    198e:	8f 91       	pop	r24
    1990:	7f 91       	pop	r23
    1992:	6f 91       	pop	r22
    1994:	5f 91       	pop	r21
    1996:	4f 91       	pop	r20
    1998:	3f 91       	pop	r19
    199a:	2f 91       	pop	r18
    199c:	0f 90       	pop	r0
    199e:	0f be       	out	0x3f, r0	; 63
    19a0:	0f 90       	pop	r0
    19a2:	1f 90       	pop	r1
    19a4:	18 95       	reti

000019a6 <__vector_3>:
ISR(TIMER2_COMP_vect)
{
    19a6:	1f 92       	push	r1
    19a8:	0f 92       	push	r0
    19aa:	0f b6       	in	r0, 0x3f	; 63
    19ac:	0f 92       	push	r0
    19ae:	11 24       	eor	r1, r1
    19b0:	2f 93       	push	r18
    19b2:	3f 93       	push	r19
    19b4:	4f 93       	push	r20
    19b6:	5f 93       	push	r21
    19b8:	6f 93       	push	r22
    19ba:	7f 93       	push	r23
    19bc:	8f 93       	push	r24
    19be:	9f 93       	push	r25
    19c0:	af 93       	push	r26
    19c2:	bf 93       	push	r27
    19c4:	ef 93       	push	r30
    19c6:	ff 93       	push	r31
    19c8:	df 93       	push	r29
    19ca:	cf 93       	push	r28
    19cc:	cd b7       	in	r28, 0x3d	; 61
    19ce:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer2_callBackPtr != NULL_PTR)
    19d0:	80 91 74 00 	lds	r24, 0x0074
    19d4:	90 91 75 00 	lds	r25, 0x0075
    19d8:	00 97       	sbiw	r24, 0x00	; 0
    19da:	29 f0       	breq	.+10     	; 0x19e6 <__vector_3+0x40>
	{
		(*g_Timer2_callBackPtr)();
    19dc:	e0 91 74 00 	lds	r30, 0x0074
    19e0:	f0 91 75 00 	lds	r31, 0x0075
    19e4:	09 95       	icall
	}

}
    19e6:	cf 91       	pop	r28
    19e8:	df 91       	pop	r29
    19ea:	ff 91       	pop	r31
    19ec:	ef 91       	pop	r30
    19ee:	bf 91       	pop	r27
    19f0:	af 91       	pop	r26
    19f2:	9f 91       	pop	r25
    19f4:	8f 91       	pop	r24
    19f6:	7f 91       	pop	r23
    19f8:	6f 91       	pop	r22
    19fa:	5f 91       	pop	r21
    19fc:	4f 91       	pop	r20
    19fe:	3f 91       	pop	r19
    1a00:	2f 91       	pop	r18
    1a02:	0f 90       	pop	r0
    1a04:	0f be       	out	0x3f, r0	; 63
    1a06:	0f 90       	pop	r0
    1a08:	1f 90       	pop	r1
    1a0a:	18 95       	reti

00001a0c <__vector_4>:
ISR(TIMER2_OVF_vect)
{
    1a0c:	1f 92       	push	r1
    1a0e:	0f 92       	push	r0
    1a10:	0f b6       	in	r0, 0x3f	; 63
    1a12:	0f 92       	push	r0
    1a14:	11 24       	eor	r1, r1
    1a16:	2f 93       	push	r18
    1a18:	3f 93       	push	r19
    1a1a:	4f 93       	push	r20
    1a1c:	5f 93       	push	r21
    1a1e:	6f 93       	push	r22
    1a20:	7f 93       	push	r23
    1a22:	8f 93       	push	r24
    1a24:	9f 93       	push	r25
    1a26:	af 93       	push	r26
    1a28:	bf 93       	push	r27
    1a2a:	ef 93       	push	r30
    1a2c:	ff 93       	push	r31
    1a2e:	df 93       	push	r29
    1a30:	cf 93       	push	r28
    1a32:	cd b7       	in	r28, 0x3d	; 61
    1a34:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer2_callBackPtr != NULL_PTR)
    1a36:	80 91 74 00 	lds	r24, 0x0074
    1a3a:	90 91 75 00 	lds	r25, 0x0075
    1a3e:	00 97       	sbiw	r24, 0x00	; 0
    1a40:	29 f0       	breq	.+10     	; 0x1a4c <__vector_4+0x40>
	{
		(*g_Timer2_callBackPtr)();
    1a42:	e0 91 74 00 	lds	r30, 0x0074
    1a46:	f0 91 75 00 	lds	r31, 0x0075
    1a4a:	09 95       	icall
	}

}
    1a4c:	cf 91       	pop	r28
    1a4e:	df 91       	pop	r29
    1a50:	ff 91       	pop	r31
    1a52:	ef 91       	pop	r30
    1a54:	bf 91       	pop	r27
    1a56:	af 91       	pop	r26
    1a58:	9f 91       	pop	r25
    1a5a:	8f 91       	pop	r24
    1a5c:	7f 91       	pop	r23
    1a5e:	6f 91       	pop	r22
    1a60:	5f 91       	pop	r21
    1a62:	4f 91       	pop	r20
    1a64:	3f 91       	pop	r19
    1a66:	2f 91       	pop	r18
    1a68:	0f 90       	pop	r0
    1a6a:	0f be       	out	0x3f, r0	; 63
    1a6c:	0f 90       	pop	r0
    1a6e:	1f 90       	pop	r1
    1a70:	18 95       	reti

00001a72 <Timer_init>:


/**************************************************************FUNCTIONS DEFENTIONS*****************************************/
void Timer_init(Timer_configType* ptrTimer_configType){
    1a72:	df 93       	push	r29
    1a74:	cf 93       	push	r28
    1a76:	00 d0       	rcall	.+0      	; 0x1a78 <Timer_init+0x6>
    1a78:	cd b7       	in	r28, 0x3d	; 61
    1a7a:	de b7       	in	r29, 0x3e	; 62
    1a7c:	9a 83       	std	Y+2, r25	; 0x02
    1a7e:	89 83       	std	Y+1, r24	; 0x01
	TCCR0 = (1<<FOC0);                                          //Non PWM Mode
    1a80:	e3 e5       	ldi	r30, 0x53	; 83
    1a82:	f0 e0       	ldi	r31, 0x00	; 0
    1a84:	80 e8       	ldi	r24, 0x80	; 128
    1a86:	80 83       	st	Z, r24

	if(ptrTimer_configType->timer == Timer0)
    1a88:	e9 81       	ldd	r30, Y+1	; 0x01
    1a8a:	fa 81       	ldd	r31, Y+2	; 0x02
    1a8c:	80 81       	ld	r24, Z
    1a8e:	88 23       	and	r24, r24
    1a90:	09 f5       	brne	.+66     	; 0x1ad4 <Timer_init+0x62>
	{
		/*SET MODE FOR TIMER 0*/
		if(ptrTimer_configType->mode == CTC)
    1a92:	e9 81       	ldd	r30, Y+1	; 0x01
    1a94:	fa 81       	ldd	r31, Y+2	; 0x02
    1a96:	82 81       	ldd	r24, Z+2	; 0x02
    1a98:	81 30       	cpi	r24, 0x01	; 1
    1a9a:	39 f4       	brne	.+14     	; 0x1aaa <Timer_init+0x38>
			SET_BIT(TCCR0,WGM00);
    1a9c:	a3 e5       	ldi	r26, 0x53	; 83
    1a9e:	b0 e0       	ldi	r27, 0x00	; 0
    1aa0:	e3 e5       	ldi	r30, 0x53	; 83
    1aa2:	f0 e0       	ldi	r31, 0x00	; 0
    1aa4:	80 81       	ld	r24, Z
    1aa6:	80 64       	ori	r24, 0x40	; 64
    1aa8:	8c 93       	st	X, r24

		//TCCR0 |= (TCCR0 & (0xF8))|( ptrTimer_configType->clock & (0x07)) ;       //pre-scaler insert in LS 3 bits in TCCR0 register

		OCR0 = ptrTimer_configType->compareValue;                              //set compare value in OCR0 timer 0 compare register
    1aaa:	ac e5       	ldi	r26, 0x5C	; 92
    1aac:	b0 e0       	ldi	r27, 0x00	; 0
    1aae:	e9 81       	ldd	r30, Y+1	; 0x01
    1ab0:	fa 81       	ldd	r31, Y+2	; 0x02
    1ab2:	84 81       	ldd	r24, Z+4	; 0x04
    1ab4:	8c 93       	st	X, r24

		SET_BIT(TIMSK,TOIE0);                                                  //enable timer0 interrupt
    1ab6:	a9 e5       	ldi	r26, 0x59	; 89
    1ab8:	b0 e0       	ldi	r27, 0x00	; 0
    1aba:	e9 e5       	ldi	r30, 0x59	; 89
    1abc:	f0 e0       	ldi	r31, 0x00	; 0
    1abe:	80 81       	ld	r24, Z
    1ac0:	81 60       	ori	r24, 0x01	; 1
    1ac2:	8c 93       	st	X, r24

		TCNT0 = ptrTimer_configType-> initTime ;
    1ac4:	a2 e5       	ldi	r26, 0x52	; 82
    1ac6:	b0 e0       	ldi	r27, 0x00	; 0
    1ac8:	e9 81       	ldd	r30, Y+1	; 0x01
    1aca:	fa 81       	ldd	r31, Y+2	; 0x02
    1acc:	85 81       	ldd	r24, Z+5	; 0x05
    1ace:	96 81       	ldd	r25, Z+6	; 0x06
    1ad0:	8c 93       	st	X, r24
    1ad2:	c3 c0       	rjmp	.+390    	; 0x1c5a <Timer_init+0x1e8>
	}

	else if(ptrTimer_configType->timer == Timer1)
    1ad4:	e9 81       	ldd	r30, Y+1	; 0x01
    1ad6:	fa 81       	ldd	r31, Y+2	; 0x02
    1ad8:	80 81       	ld	r24, Z
    1ada:	81 30       	cpi	r24, 0x01	; 1
    1adc:	09 f0       	breq	.+2      	; 0x1ae0 <Timer_init+0x6e>
    1ade:	98 c0       	rjmp	.+304    	; 0x1c10 <Timer_init+0x19e>
	{
		TCCR1A = (1 << FOC1A) | (1 << FOC1B) ;
    1ae0:	ef e4       	ldi	r30, 0x4F	; 79
    1ae2:	f0 e0       	ldi	r31, 0x00	; 0
    1ae4:	8c e0       	ldi	r24, 0x0C	; 12
    1ae6:	80 83       	st	Z, r24

		TCCR1B = (TCCR1B & 0xF7) | ( (ptrTimer_configType ->mode) << 3 ) ;
    1ae8:	ae e4       	ldi	r26, 0x4E	; 78
    1aea:	b0 e0       	ldi	r27, 0x00	; 0
    1aec:	ee e4       	ldi	r30, 0x4E	; 78
    1aee:	f0 e0       	ldi	r31, 0x00	; 0
    1af0:	80 81       	ld	r24, Z
    1af2:	28 2f       	mov	r18, r24
    1af4:	27 7f       	andi	r18, 0xF7	; 247
    1af6:	e9 81       	ldd	r30, Y+1	; 0x01
    1af8:	fa 81       	ldd	r31, Y+2	; 0x02
    1afa:	82 81       	ldd	r24, Z+2	; 0x02
    1afc:	88 2f       	mov	r24, r24
    1afe:	90 e0       	ldi	r25, 0x00	; 0
    1b00:	88 0f       	add	r24, r24
    1b02:	99 1f       	adc	r25, r25
    1b04:	88 0f       	add	r24, r24
    1b06:	99 1f       	adc	r25, r25
    1b08:	88 0f       	add	r24, r24
    1b0a:	99 1f       	adc	r25, r25
    1b0c:	82 2b       	or	r24, r18
    1b0e:	8c 93       	st	X, r24

		if(ptrTimer_configType->mode == CTCA)
    1b10:	e9 81       	ldd	r30, Y+1	; 0x01
    1b12:	fa 81       	ldd	r31, Y+2	; 0x02
    1b14:	82 81       	ldd	r24, Z+2	; 0x02
    1b16:	82 30       	cpi	r24, 0x02	; 2
    1b18:	69 f5       	brne	.+90     	; 0x1b74 <Timer_init+0x102>
		{
			TCCR1A = (TCCR1A & 0x3F) | ( (ptrTimer_configType ->out) << 6 ) ;
    1b1a:	af e4       	ldi	r26, 0x4F	; 79
    1b1c:	b0 e0       	ldi	r27, 0x00	; 0
    1b1e:	ef e4       	ldi	r30, 0x4F	; 79
    1b20:	f0 e0       	ldi	r31, 0x00	; 0
    1b22:	80 81       	ld	r24, Z
    1b24:	28 2f       	mov	r18, r24
    1b26:	2f 73       	andi	r18, 0x3F	; 63
    1b28:	e9 81       	ldd	r30, Y+1	; 0x01
    1b2a:	fa 81       	ldd	r31, Y+2	; 0x02
    1b2c:	83 81       	ldd	r24, Z+3	; 0x03
    1b2e:	88 2f       	mov	r24, r24
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	00 24       	eor	r0, r0
    1b34:	96 95       	lsr	r25
    1b36:	87 95       	ror	r24
    1b38:	07 94       	ror	r0
    1b3a:	96 95       	lsr	r25
    1b3c:	87 95       	ror	r24
    1b3e:	07 94       	ror	r0
    1b40:	98 2f       	mov	r25, r24
    1b42:	80 2d       	mov	r24, r0
    1b44:	82 2b       	or	r24, r18
    1b46:	8c 93       	st	X, r24
			OCR1A = ptrTimer_configType->compareAValue ;
    1b48:	aa e4       	ldi	r26, 0x4A	; 74
    1b4a:	b0 e0       	ldi	r27, 0x00	; 0
    1b4c:	e9 81       	ldd	r30, Y+1	; 0x01
    1b4e:	fa 81       	ldd	r31, Y+2	; 0x02
    1b50:	87 81       	ldd	r24, Z+7	; 0x07
    1b52:	90 85       	ldd	r25, Z+8	; 0x08
    1b54:	11 96       	adiw	r26, 0x01	; 1
    1b56:	9c 93       	st	X, r25
    1b58:	8e 93       	st	-X, r24

			if(ptrTimer_configType->out != disconnected)
    1b5a:	e9 81       	ldd	r30, Y+1	; 0x01
    1b5c:	fa 81       	ldd	r31, Y+2	; 0x02
    1b5e:	83 81       	ldd	r24, Z+3	; 0x03
    1b60:	88 23       	and	r24, r24
    1b62:	b1 f1       	breq	.+108    	; 0x1bd0 <Timer_init+0x15e>
			{
				SET_BIT(DDRD,PD5);
    1b64:	a1 e3       	ldi	r26, 0x31	; 49
    1b66:	b0 e0       	ldi	r27, 0x00	; 0
    1b68:	e1 e3       	ldi	r30, 0x31	; 49
    1b6a:	f0 e0       	ldi	r31, 0x00	; 0
    1b6c:	80 81       	ld	r24, Z
    1b6e:	80 62       	ori	r24, 0x20	; 32
    1b70:	8c 93       	st	X, r24
    1b72:	2e c0       	rjmp	.+92     	; 0x1bd0 <Timer_init+0x15e>
			}
		}
		else if (ptrTimer_configType->mode == CTCB)
    1b74:	e9 81       	ldd	r30, Y+1	; 0x01
    1b76:	fa 81       	ldd	r31, Y+2	; 0x02
    1b78:	82 81       	ldd	r24, Z+2	; 0x02
    1b7a:	83 30       	cpi	r24, 0x03	; 3
    1b7c:	49 f5       	brne	.+82     	; 0x1bd0 <Timer_init+0x15e>
		{
			TCCR1A = (TCCR1A & 0x3F) | ( (ptrTimer_configType ->out) << 4 ) ;
    1b7e:	af e4       	ldi	r26, 0x4F	; 79
    1b80:	b0 e0       	ldi	r27, 0x00	; 0
    1b82:	ef e4       	ldi	r30, 0x4F	; 79
    1b84:	f0 e0       	ldi	r31, 0x00	; 0
    1b86:	80 81       	ld	r24, Z
    1b88:	28 2f       	mov	r18, r24
    1b8a:	2f 73       	andi	r18, 0x3F	; 63
    1b8c:	e9 81       	ldd	r30, Y+1	; 0x01
    1b8e:	fa 81       	ldd	r31, Y+2	; 0x02
    1b90:	83 81       	ldd	r24, Z+3	; 0x03
    1b92:	88 2f       	mov	r24, r24
    1b94:	90 e0       	ldi	r25, 0x00	; 0
    1b96:	82 95       	swap	r24
    1b98:	92 95       	swap	r25
    1b9a:	90 7f       	andi	r25, 0xF0	; 240
    1b9c:	98 27       	eor	r25, r24
    1b9e:	80 7f       	andi	r24, 0xF0	; 240
    1ba0:	98 27       	eor	r25, r24
    1ba2:	82 2b       	or	r24, r18
    1ba4:	8c 93       	st	X, r24
			OCR1B = ptrTimer_configType->compareBValue ;
    1ba6:	a8 e4       	ldi	r26, 0x48	; 72
    1ba8:	b0 e0       	ldi	r27, 0x00	; 0
    1baa:	e9 81       	ldd	r30, Y+1	; 0x01
    1bac:	fa 81       	ldd	r31, Y+2	; 0x02
    1bae:	81 85       	ldd	r24, Z+9	; 0x09
    1bb0:	92 85       	ldd	r25, Z+10	; 0x0a
    1bb2:	11 96       	adiw	r26, 0x01	; 1
    1bb4:	9c 93       	st	X, r25
    1bb6:	8e 93       	st	-X, r24

			if(ptrTimer_configType-> out != disconnected)
    1bb8:	e9 81       	ldd	r30, Y+1	; 0x01
    1bba:	fa 81       	ldd	r31, Y+2	; 0x02
    1bbc:	83 81       	ldd	r24, Z+3	; 0x03
    1bbe:	88 23       	and	r24, r24
    1bc0:	39 f0       	breq	.+14     	; 0x1bd0 <Timer_init+0x15e>
			{
				SET_BIT(DDRD,PD4);
    1bc2:	a1 e3       	ldi	r26, 0x31	; 49
    1bc4:	b0 e0       	ldi	r27, 0x00	; 0
    1bc6:	e1 e3       	ldi	r30, 0x31	; 49
    1bc8:	f0 e0       	ldi	r31, 0x00	; 0
    1bca:	80 81       	ld	r24, Z
    1bcc:	80 61       	ori	r24, 0x10	; 16
    1bce:	8c 93       	st	X, r24
			}
		}

		//TCCR1B = (TCCR1B & 0xF8) | ( (ptrTimer_configType ->clock)) ;

		TIMSK = (TIMSK & 0xC3) | (1 << ptrTimer_configType->mode) ;
    1bd0:	a9 e5       	ldi	r26, 0x59	; 89
    1bd2:	b0 e0       	ldi	r27, 0x00	; 0
    1bd4:	e9 e5       	ldi	r30, 0x59	; 89
    1bd6:	f0 e0       	ldi	r31, 0x00	; 0
    1bd8:	80 81       	ld	r24, Z
    1bda:	48 2f       	mov	r20, r24
    1bdc:	43 7c       	andi	r20, 0xC3	; 195
    1bde:	e9 81       	ldd	r30, Y+1	; 0x01
    1be0:	fa 81       	ldd	r31, Y+2	; 0x02
    1be2:	82 81       	ldd	r24, Z+2	; 0x02
    1be4:	28 2f       	mov	r18, r24
    1be6:	30 e0       	ldi	r19, 0x00	; 0
    1be8:	81 e0       	ldi	r24, 0x01	; 1
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	02 2e       	mov	r0, r18
    1bee:	02 c0       	rjmp	.+4      	; 0x1bf4 <Timer_init+0x182>
    1bf0:	88 0f       	add	r24, r24
    1bf2:	99 1f       	adc	r25, r25
    1bf4:	0a 94       	dec	r0
    1bf6:	e2 f7       	brpl	.-8      	; 0x1bf0 <Timer_init+0x17e>
    1bf8:	84 2b       	or	r24, r20
    1bfa:	8c 93       	st	X, r24

		TCNT1 = ptrTimer_configType-> initTime ;
    1bfc:	ac e4       	ldi	r26, 0x4C	; 76
    1bfe:	b0 e0       	ldi	r27, 0x00	; 0
    1c00:	e9 81       	ldd	r30, Y+1	; 0x01
    1c02:	fa 81       	ldd	r31, Y+2	; 0x02
    1c04:	85 81       	ldd	r24, Z+5	; 0x05
    1c06:	96 81       	ldd	r25, Z+6	; 0x06
    1c08:	11 96       	adiw	r26, 0x01	; 1
    1c0a:	9c 93       	st	X, r25
    1c0c:	8e 93       	st	-X, r24
    1c0e:	25 c0       	rjmp	.+74     	; 0x1c5a <Timer_init+0x1e8>
	}

	else if(ptrTimer_configType->timer == Timer2)
    1c10:	e9 81       	ldd	r30, Y+1	; 0x01
    1c12:	fa 81       	ldd	r31, Y+2	; 0x02
    1c14:	80 81       	ld	r24, Z
    1c16:	82 30       	cpi	r24, 0x02	; 2
    1c18:	01 f5       	brne	.+64     	; 0x1c5a <Timer_init+0x1e8>
	{
		/*SET MODE FOR TIMER 0*/
		if(ptrTimer_configType->mode == CTC)
    1c1a:	e9 81       	ldd	r30, Y+1	; 0x01
    1c1c:	fa 81       	ldd	r31, Y+2	; 0x02
    1c1e:	82 81       	ldd	r24, Z+2	; 0x02
    1c20:	81 30       	cpi	r24, 0x01	; 1
    1c22:	39 f4       	brne	.+14     	; 0x1c32 <Timer_init+0x1c0>
			SET_BIT(TCCR2,WGM00);
    1c24:	a5 e4       	ldi	r26, 0x45	; 69
    1c26:	b0 e0       	ldi	r27, 0x00	; 0
    1c28:	e5 e4       	ldi	r30, 0x45	; 69
    1c2a:	f0 e0       	ldi	r31, 0x00	; 0
    1c2c:	80 81       	ld	r24, Z
    1c2e:	80 64       	ori	r24, 0x40	; 64
    1c30:	8c 93       	st	X, r24

		//TCCR2 |= (TCCR2 & (0xF8))|( ptrTimer_configType->clock & (0x07)) ;       //pre-scaler insert in LS 3 bits in TCC register

		OCR2 = ptrTimer_configType->compareValue;                              //set compare value in OCR2 timer 0 compare register
    1c32:	a3 e4       	ldi	r26, 0x43	; 67
    1c34:	b0 e0       	ldi	r27, 0x00	; 0
    1c36:	e9 81       	ldd	r30, Y+1	; 0x01
    1c38:	fa 81       	ldd	r31, Y+2	; 0x02
    1c3a:	84 81       	ldd	r24, Z+4	; 0x04
    1c3c:	8c 93       	st	X, r24

		SET_BIT(TIMSK,TOIE2);                                                  //enable timer2 interrupt
    1c3e:	a9 e5       	ldi	r26, 0x59	; 89
    1c40:	b0 e0       	ldi	r27, 0x00	; 0
    1c42:	e9 e5       	ldi	r30, 0x59	; 89
    1c44:	f0 e0       	ldi	r31, 0x00	; 0
    1c46:	80 81       	ld	r24, Z
    1c48:	80 64       	ori	r24, 0x40	; 64
    1c4a:	8c 93       	st	X, r24

		TCNT2 = ptrTimer_configType-> initTime ;
    1c4c:	a4 e4       	ldi	r26, 0x44	; 68
    1c4e:	b0 e0       	ldi	r27, 0x00	; 0
    1c50:	e9 81       	ldd	r30, Y+1	; 0x01
    1c52:	fa 81       	ldd	r31, Y+2	; 0x02
    1c54:	85 81       	ldd	r24, Z+5	; 0x05
    1c56:	96 81       	ldd	r25, Z+6	; 0x06
    1c58:	8c 93       	st	X, r24
	}
}
    1c5a:	0f 90       	pop	r0
    1c5c:	0f 90       	pop	r0
    1c5e:	cf 91       	pop	r28
    1c60:	df 91       	pop	r29
    1c62:	08 95       	ret

00001c64 <Timer_start>:
void Timer_start(Timer_configType* ptrTimer_configType )
{
    1c64:	df 93       	push	r29
    1c66:	cf 93       	push	r28
    1c68:	00 d0       	rcall	.+0      	; 0x1c6a <Timer_start+0x6>
    1c6a:	cd b7       	in	r28, 0x3d	; 61
    1c6c:	de b7       	in	r29, 0x3e	; 62
    1c6e:	9a 83       	std	Y+2, r25	; 0x02
    1c70:	89 83       	std	Y+1, r24	; 0x01
	if(ptrTimer_configType->timer == Timer0)
    1c72:	e9 81       	ldd	r30, Y+1	; 0x01
    1c74:	fa 81       	ldd	r31, Y+2	; 0x02
    1c76:	80 81       	ld	r24, Z
    1c78:	88 23       	and	r24, r24
    1c7a:	99 f4       	brne	.+38     	; 0x1ca2 <Timer_start+0x3e>
	{
		TCCR0 |= (TCCR0 & (0xF8))|( (ptrTimer_configType->clock) & (0x07) ) ;       //pre-scaler insert in LS 3 bits in TCCR0 register
    1c7c:	a3 e5       	ldi	r26, 0x53	; 83
    1c7e:	b0 e0       	ldi	r27, 0x00	; 0
    1c80:	e3 e5       	ldi	r30, 0x53	; 83
    1c82:	f0 e0       	ldi	r31, 0x00	; 0
    1c84:	80 81       	ld	r24, Z
    1c86:	28 2f       	mov	r18, r24
    1c88:	e3 e5       	ldi	r30, 0x53	; 83
    1c8a:	f0 e0       	ldi	r31, 0x00	; 0
    1c8c:	80 81       	ld	r24, Z
    1c8e:	98 2f       	mov	r25, r24
    1c90:	98 7f       	andi	r25, 0xF8	; 248
    1c92:	e9 81       	ldd	r30, Y+1	; 0x01
    1c94:	fa 81       	ldd	r31, Y+2	; 0x02
    1c96:	81 81       	ldd	r24, Z+1	; 0x01
    1c98:	87 70       	andi	r24, 0x07	; 7
    1c9a:	89 2b       	or	r24, r25
    1c9c:	82 2b       	or	r24, r18
    1c9e:	8c 93       	st	X, r24
    1ca0:	2a c0       	rjmp	.+84     	; 0x1cf6 <Timer_start+0x92>
	}
	else if(ptrTimer_configType->timer == Timer1)
    1ca2:	e9 81       	ldd	r30, Y+1	; 0x01
    1ca4:	fa 81       	ldd	r31, Y+2	; 0x02
    1ca6:	80 81       	ld	r24, Z
    1ca8:	81 30       	cpi	r24, 0x01	; 1
    1caa:	71 f4       	brne	.+28     	; 0x1cc8 <Timer_start+0x64>
	{
		TCCR1B = (TCCR1B & 0xF8) | ( (ptrTimer_configType ->clock) & (0x07) ) ;    //pre-scaler insert in LS 3 bits in TCCR1B register
    1cac:	ae e4       	ldi	r26, 0x4E	; 78
    1cae:	b0 e0       	ldi	r27, 0x00	; 0
    1cb0:	ee e4       	ldi	r30, 0x4E	; 78
    1cb2:	f0 e0       	ldi	r31, 0x00	; 0
    1cb4:	80 81       	ld	r24, Z
    1cb6:	98 2f       	mov	r25, r24
    1cb8:	98 7f       	andi	r25, 0xF8	; 248
    1cba:	e9 81       	ldd	r30, Y+1	; 0x01
    1cbc:	fa 81       	ldd	r31, Y+2	; 0x02
    1cbe:	81 81       	ldd	r24, Z+1	; 0x01
    1cc0:	87 70       	andi	r24, 0x07	; 7
    1cc2:	89 2b       	or	r24, r25
    1cc4:	8c 93       	st	X, r24
    1cc6:	17 c0       	rjmp	.+46     	; 0x1cf6 <Timer_start+0x92>
	}
	else if(ptrTimer_configType->timer == Timer2)
    1cc8:	e9 81       	ldd	r30, Y+1	; 0x01
    1cca:	fa 81       	ldd	r31, Y+2	; 0x02
    1ccc:	80 81       	ld	r24, Z
    1cce:	82 30       	cpi	r24, 0x02	; 2
    1cd0:	91 f4       	brne	.+36     	; 0x1cf6 <Timer_start+0x92>
	{
		TCCR2 |= (TCCR2 & (0xF8))|( (ptrTimer_configType->clock) & (0x07) ) ;       //pre-scaler insert in LS 3 bits in TCCR2 register
    1cd2:	a5 e4       	ldi	r26, 0x45	; 69
    1cd4:	b0 e0       	ldi	r27, 0x00	; 0
    1cd6:	e5 e4       	ldi	r30, 0x45	; 69
    1cd8:	f0 e0       	ldi	r31, 0x00	; 0
    1cda:	80 81       	ld	r24, Z
    1cdc:	28 2f       	mov	r18, r24
    1cde:	e5 e4       	ldi	r30, 0x45	; 69
    1ce0:	f0 e0       	ldi	r31, 0x00	; 0
    1ce2:	80 81       	ld	r24, Z
    1ce4:	98 2f       	mov	r25, r24
    1ce6:	98 7f       	andi	r25, 0xF8	; 248
    1ce8:	e9 81       	ldd	r30, Y+1	; 0x01
    1cea:	fa 81       	ldd	r31, Y+2	; 0x02
    1cec:	81 81       	ldd	r24, Z+1	; 0x01
    1cee:	87 70       	andi	r24, 0x07	; 7
    1cf0:	89 2b       	or	r24, r25
    1cf2:	82 2b       	or	r24, r18
    1cf4:	8c 93       	st	X, r24
	}
}
    1cf6:	0f 90       	pop	r0
    1cf8:	0f 90       	pop	r0
    1cfa:	cf 91       	pop	r28
    1cfc:	df 91       	pop	r29
    1cfe:	08 95       	ret

00001d00 <Timer_stop>:
void Timer_stop(TimerNumber timer)
{
    1d00:	df 93       	push	r29
    1d02:	cf 93       	push	r28
    1d04:	0f 92       	push	r0
    1d06:	cd b7       	in	r28, 0x3d	; 61
    1d08:	de b7       	in	r29, 0x3e	; 62
    1d0a:	89 83       	std	Y+1, r24	; 0x01
	if(timer == Timer0)
    1d0c:	89 81       	ldd	r24, Y+1	; 0x01
    1d0e:	88 23       	and	r24, r24
    1d10:	c9 f4       	brne	.+50     	; 0x1d44 <Timer_stop+0x44>
	{
		/*clear Pre-scaler for timer 0,and clear timer register value*/
		CLEAR_BIT(TCCR0,0);
    1d12:	a3 e5       	ldi	r26, 0x53	; 83
    1d14:	b0 e0       	ldi	r27, 0x00	; 0
    1d16:	e3 e5       	ldi	r30, 0x53	; 83
    1d18:	f0 e0       	ldi	r31, 0x00	; 0
    1d1a:	80 81       	ld	r24, Z
    1d1c:	8e 7f       	andi	r24, 0xFE	; 254
    1d1e:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0,1);
    1d20:	a3 e5       	ldi	r26, 0x53	; 83
    1d22:	b0 e0       	ldi	r27, 0x00	; 0
    1d24:	e3 e5       	ldi	r30, 0x53	; 83
    1d26:	f0 e0       	ldi	r31, 0x00	; 0
    1d28:	80 81       	ld	r24, Z
    1d2a:	8d 7f       	andi	r24, 0xFD	; 253
    1d2c:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0,2);
    1d2e:	a3 e5       	ldi	r26, 0x53	; 83
    1d30:	b0 e0       	ldi	r27, 0x00	; 0
    1d32:	e3 e5       	ldi	r30, 0x53	; 83
    1d34:	f0 e0       	ldi	r31, 0x00	; 0
    1d36:	80 81       	ld	r24, Z
    1d38:	8b 7f       	andi	r24, 0xFB	; 251
    1d3a:	8c 93       	st	X, r24
		Timer_clearTimerValue(timer);
    1d3c:	89 81       	ldd	r24, Y+1	; 0x01
    1d3e:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <Timer_clearTimerValue>
    1d42:	37 c0       	rjmp	.+110    	; 0x1db2 <Timer_stop+0xb2>
	}
	else if(timer == Timer1)
    1d44:	89 81       	ldd	r24, Y+1	; 0x01
    1d46:	81 30       	cpi	r24, 0x01	; 1
    1d48:	c9 f4       	brne	.+50     	; 0x1d7c <Timer_stop+0x7c>
	{
		/*clear Pre-scaler for timer 1,and clear timer register value*/
		CLEAR_BIT(TCCR1B,0);
    1d4a:	ae e4       	ldi	r26, 0x4E	; 78
    1d4c:	b0 e0       	ldi	r27, 0x00	; 0
    1d4e:	ee e4       	ldi	r30, 0x4E	; 78
    1d50:	f0 e0       	ldi	r31, 0x00	; 0
    1d52:	80 81       	ld	r24, Z
    1d54:	8e 7f       	andi	r24, 0xFE	; 254
    1d56:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,1);
    1d58:	ae e4       	ldi	r26, 0x4E	; 78
    1d5a:	b0 e0       	ldi	r27, 0x00	; 0
    1d5c:	ee e4       	ldi	r30, 0x4E	; 78
    1d5e:	f0 e0       	ldi	r31, 0x00	; 0
    1d60:	80 81       	ld	r24, Z
    1d62:	8d 7f       	andi	r24, 0xFD	; 253
    1d64:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,2);
    1d66:	ae e4       	ldi	r26, 0x4E	; 78
    1d68:	b0 e0       	ldi	r27, 0x00	; 0
    1d6a:	ee e4       	ldi	r30, 0x4E	; 78
    1d6c:	f0 e0       	ldi	r31, 0x00	; 0
    1d6e:	80 81       	ld	r24, Z
    1d70:	8b 7f       	andi	r24, 0xFB	; 251
    1d72:	8c 93       	st	X, r24
		Timer_clearTimerValue(timer);
    1d74:	89 81       	ldd	r24, Y+1	; 0x01
    1d76:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <Timer_clearTimerValue>
    1d7a:	1b c0       	rjmp	.+54     	; 0x1db2 <Timer_stop+0xb2>
	}
	else if(timer == Timer2)
    1d7c:	89 81       	ldd	r24, Y+1	; 0x01
    1d7e:	82 30       	cpi	r24, 0x02	; 2
    1d80:	c1 f4       	brne	.+48     	; 0x1db2 <Timer_stop+0xb2>
	{
		/*clear Pre-scaler for timer 2,and clear timer register value*/
		CLEAR_BIT(TCCR2,0);
    1d82:	a5 e4       	ldi	r26, 0x45	; 69
    1d84:	b0 e0       	ldi	r27, 0x00	; 0
    1d86:	e5 e4       	ldi	r30, 0x45	; 69
    1d88:	f0 e0       	ldi	r31, 0x00	; 0
    1d8a:	80 81       	ld	r24, Z
    1d8c:	8e 7f       	andi	r24, 0xFE	; 254
    1d8e:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR2,1);
    1d90:	a5 e4       	ldi	r26, 0x45	; 69
    1d92:	b0 e0       	ldi	r27, 0x00	; 0
    1d94:	e5 e4       	ldi	r30, 0x45	; 69
    1d96:	f0 e0       	ldi	r31, 0x00	; 0
    1d98:	80 81       	ld	r24, Z
    1d9a:	8d 7f       	andi	r24, 0xFD	; 253
    1d9c:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR2,2);
    1d9e:	a5 e4       	ldi	r26, 0x45	; 69
    1da0:	b0 e0       	ldi	r27, 0x00	; 0
    1da2:	e5 e4       	ldi	r30, 0x45	; 69
    1da4:	f0 e0       	ldi	r31, 0x00	; 0
    1da6:	80 81       	ld	r24, Z
    1da8:	8b 7f       	andi	r24, 0xFB	; 251
    1daa:	8c 93       	st	X, r24
		Timer_clearTimerValue(timer);
    1dac:	89 81       	ldd	r24, Y+1	; 0x01
    1dae:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <Timer_clearTimerValue>
	}
}
    1db2:	0f 90       	pop	r0
    1db4:	cf 91       	pop	r28
    1db6:	df 91       	pop	r29
    1db8:	08 95       	ret

00001dba <Timer_clearTimerValue>:
void Timer_clearTimerValue(TimerNumber timer){
    1dba:	df 93       	push	r29
    1dbc:	cf 93       	push	r28
    1dbe:	0f 92       	push	r0
    1dc0:	cd b7       	in	r28, 0x3d	; 61
    1dc2:	de b7       	in	r29, 0x3e	; 62
    1dc4:	89 83       	std	Y+1, r24	; 0x01
	if(timer == Timer0)
    1dc6:	89 81       	ldd	r24, Y+1	; 0x01
    1dc8:	88 23       	and	r24, r24
    1dca:	21 f4       	brne	.+8      	; 0x1dd4 <Timer_clearTimerValue+0x1a>
		TCNT0 = 0;
    1dcc:	e2 e5       	ldi	r30, 0x52	; 82
    1dce:	f0 e0       	ldi	r31, 0x00	; 0
    1dd0:	10 82       	st	Z, r1
    1dd2:	0e c0       	rjmp	.+28     	; 0x1df0 <Timer_clearTimerValue+0x36>
	else if(timer == Timer1)
    1dd4:	89 81       	ldd	r24, Y+1	; 0x01
    1dd6:	81 30       	cpi	r24, 0x01	; 1
    1dd8:	29 f4       	brne	.+10     	; 0x1de4 <Timer_clearTimerValue+0x2a>
			TCNT1= 0 ;
    1dda:	ec e4       	ldi	r30, 0x4C	; 76
    1ddc:	f0 e0       	ldi	r31, 0x00	; 0
    1dde:	11 82       	std	Z+1, r1	; 0x01
    1de0:	10 82       	st	Z, r1
    1de2:	06 c0       	rjmp	.+12     	; 0x1df0 <Timer_clearTimerValue+0x36>
	else if(timer == Timer2)
    1de4:	89 81       	ldd	r24, Y+1	; 0x01
    1de6:	82 30       	cpi	r24, 0x02	; 2
    1de8:	19 f4       	brne	.+6      	; 0x1df0 <Timer_clearTimerValue+0x36>
			TCNT2= 0 ;
    1dea:	e4 e4       	ldi	r30, 0x44	; 68
    1dec:	f0 e0       	ldi	r31, 0x00	; 0
    1dee:	10 82       	st	Z, r1
}
    1df0:	0f 90       	pop	r0
    1df2:	cf 91       	pop	r28
    1df4:	df 91       	pop	r29
    1df6:	08 95       	ret

00001df8 <Timer_getTimerValue>:

uint16 Timer_getTimerValue(TimerNumber timer){
    1df8:	df 93       	push	r29
    1dfa:	cf 93       	push	r28
    1dfc:	00 d0       	rcall	.+0      	; 0x1dfe <Timer_getTimerValue+0x6>
    1dfe:	0f 92       	push	r0
    1e00:	cd b7       	in	r28, 0x3d	; 61
    1e02:	de b7       	in	r29, 0x3e	; 62
    1e04:	89 83       	std	Y+1, r24	; 0x01
	if(timer == Timer0)
    1e06:	89 81       	ldd	r24, Y+1	; 0x01
    1e08:	88 23       	and	r24, r24
    1e0a:	41 f4       	brne	.+16     	; 0x1e1c <Timer_getTimerValue+0x24>
		return TCNT0;
    1e0c:	e2 e5       	ldi	r30, 0x52	; 82
    1e0e:	f0 e0       	ldi	r31, 0x00	; 0
    1e10:	80 81       	ld	r24, Z
    1e12:	28 2f       	mov	r18, r24
    1e14:	30 e0       	ldi	r19, 0x00	; 0
    1e16:	3b 83       	std	Y+3, r19	; 0x03
    1e18:	2a 83       	std	Y+2, r18	; 0x02
    1e1a:	11 c0       	rjmp	.+34     	; 0x1e3e <Timer_getTimerValue+0x46>
	else if(timer == Timer1)
    1e1c:	89 81       	ldd	r24, Y+1	; 0x01
    1e1e:	81 30       	cpi	r24, 0x01	; 1
    1e20:	39 f4       	brne	.+14     	; 0x1e30 <Timer_getTimerValue+0x38>
		return TCNT1;
    1e22:	ec e4       	ldi	r30, 0x4C	; 76
    1e24:	f0 e0       	ldi	r31, 0x00	; 0
    1e26:	80 81       	ld	r24, Z
    1e28:	91 81       	ldd	r25, Z+1	; 0x01
    1e2a:	9b 83       	std	Y+3, r25	; 0x03
    1e2c:	8a 83       	std	Y+2, r24	; 0x02
    1e2e:	07 c0       	rjmp	.+14     	; 0x1e3e <Timer_getTimerValue+0x46>
	else
		return TCNT2;
    1e30:	e4 e4       	ldi	r30, 0x44	; 68
    1e32:	f0 e0       	ldi	r31, 0x00	; 0
    1e34:	80 81       	ld	r24, Z
    1e36:	28 2f       	mov	r18, r24
    1e38:	30 e0       	ldi	r19, 0x00	; 0
    1e3a:	3b 83       	std	Y+3, r19	; 0x03
    1e3c:	2a 83       	std	Y+2, r18	; 0x02
    1e3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e40:	9b 81       	ldd	r25, Y+3	; 0x03
}
    1e42:	0f 90       	pop	r0
    1e44:	0f 90       	pop	r0
    1e46:	0f 90       	pop	r0
    1e48:	cf 91       	pop	r28
    1e4a:	df 91       	pop	r29
    1e4c:	08 95       	ret

00001e4e <Timer_deinit>:


void Timer_deinit(TimerNumber timer){
    1e4e:	df 93       	push	r29
    1e50:	cf 93       	push	r28
    1e52:	0f 92       	push	r0
    1e54:	cd b7       	in	r28, 0x3d	; 61
    1e56:	de b7       	in	r29, 0x3e	; 62
    1e58:	89 83       	std	Y+1, r24	; 0x01
	if(timer == Timer0)
    1e5a:	89 81       	ldd	r24, Y+1	; 0x01
    1e5c:	88 23       	and	r24, r24
    1e5e:	71 f4       	brne	.+28     	; 0x1e7c <Timer_deinit+0x2e>
	{
		TCCR0 = 0;
    1e60:	e3 e5       	ldi	r30, 0x53	; 83
    1e62:	f0 e0       	ldi	r31, 0x00	; 0
    1e64:	10 82       	st	Z, r1
		OCR0 = 0;
    1e66:	ec e5       	ldi	r30, 0x5C	; 92
    1e68:	f0 e0       	ldi	r31, 0x00	; 0
    1e6a:	10 82       	st	Z, r1
		CLEAR_BIT(TIMSK,TOIE0);
    1e6c:	a9 e5       	ldi	r26, 0x59	; 89
    1e6e:	b0 e0       	ldi	r27, 0x00	; 0
    1e70:	e9 e5       	ldi	r30, 0x59	; 89
    1e72:	f0 e0       	ldi	r31, 0x00	; 0
    1e74:	80 81       	ld	r24, Z
    1e76:	8e 7f       	andi	r24, 0xFE	; 254
    1e78:	8c 93       	st	X, r24
    1e7a:	3b c0       	rjmp	.+118    	; 0x1ef2 <Timer_deinit+0xa4>
	}
	else if(timer == Timer1)
    1e7c:	89 81       	ldd	r24, Y+1	; 0x01
    1e7e:	81 30       	cpi	r24, 0x01	; 1
    1e80:	41 f5       	brne	.+80     	; 0x1ed2 <Timer_deinit+0x84>
	{
		TCCR1A = 0;
    1e82:	ef e4       	ldi	r30, 0x4F	; 79
    1e84:	f0 e0       	ldi	r31, 0x00	; 0
    1e86:	10 82       	st	Z, r1
		TCCR1B = 0;
    1e88:	ee e4       	ldi	r30, 0x4E	; 78
    1e8a:	f0 e0       	ldi	r31, 0x00	; 0
    1e8c:	10 82       	st	Z, r1
		OCR1A = 0;
    1e8e:	ea e4       	ldi	r30, 0x4A	; 74
    1e90:	f0 e0       	ldi	r31, 0x00	; 0
    1e92:	11 82       	std	Z+1, r1	; 0x01
    1e94:	10 82       	st	Z, r1
		OCR1B = 0;
    1e96:	e8 e4       	ldi	r30, 0x48	; 72
    1e98:	f0 e0       	ldi	r31, 0x00	; 0
    1e9a:	11 82       	std	Z+1, r1	; 0x01
    1e9c:	10 82       	st	Z, r1
		TCNT1 = 0;
    1e9e:	ec e4       	ldi	r30, 0x4C	; 76
    1ea0:	f0 e0       	ldi	r31, 0x00	; 0
    1ea2:	11 82       	std	Z+1, r1	; 0x01
    1ea4:	10 82       	st	Z, r1
		CLEAR_BIT(TIMSK,TOIE1);
    1ea6:	a9 e5       	ldi	r26, 0x59	; 89
    1ea8:	b0 e0       	ldi	r27, 0x00	; 0
    1eaa:	e9 e5       	ldi	r30, 0x59	; 89
    1eac:	f0 e0       	ldi	r31, 0x00	; 0
    1eae:	80 81       	ld	r24, Z
    1eb0:	8b 7f       	andi	r24, 0xFB	; 251
    1eb2:	8c 93       	st	X, r24
		CLEAR_BIT(TIMSK,OCIE1B) ;
    1eb4:	a9 e5       	ldi	r26, 0x59	; 89
    1eb6:	b0 e0       	ldi	r27, 0x00	; 0
    1eb8:	e9 e5       	ldi	r30, 0x59	; 89
    1eba:	f0 e0       	ldi	r31, 0x00	; 0
    1ebc:	80 81       	ld	r24, Z
    1ebe:	87 7f       	andi	r24, 0xF7	; 247
    1ec0:	8c 93       	st	X, r24
		CLEAR_BIT(TIMSK,OCIE1A) ;
    1ec2:	a9 e5       	ldi	r26, 0x59	; 89
    1ec4:	b0 e0       	ldi	r27, 0x00	; 0
    1ec6:	e9 e5       	ldi	r30, 0x59	; 89
    1ec8:	f0 e0       	ldi	r31, 0x00	; 0
    1eca:	80 81       	ld	r24, Z
    1ecc:	8f 7e       	andi	r24, 0xEF	; 239
    1ece:	8c 93       	st	X, r24
    1ed0:	10 c0       	rjmp	.+32     	; 0x1ef2 <Timer_deinit+0xa4>
	}
	else if(timer == Timer2)
    1ed2:	89 81       	ldd	r24, Y+1	; 0x01
    1ed4:	82 30       	cpi	r24, 0x02	; 2
    1ed6:	69 f4       	brne	.+26     	; 0x1ef2 <Timer_deinit+0xa4>
	{
		TCCR2 = 0;
    1ed8:	e5 e4       	ldi	r30, 0x45	; 69
    1eda:	f0 e0       	ldi	r31, 0x00	; 0
    1edc:	10 82       	st	Z, r1
		OCR2 = 0;
    1ede:	e3 e4       	ldi	r30, 0x43	; 67
    1ee0:	f0 e0       	ldi	r31, 0x00	; 0
    1ee2:	10 82       	st	Z, r1
		CLEAR_BIT(TIMSK,TOIE2);
    1ee4:	a9 e5       	ldi	r26, 0x59	; 89
    1ee6:	b0 e0       	ldi	r27, 0x00	; 0
    1ee8:	e9 e5       	ldi	r30, 0x59	; 89
    1eea:	f0 e0       	ldi	r31, 0x00	; 0
    1eec:	80 81       	ld	r24, Z
    1eee:	8f 7b       	andi	r24, 0xBF	; 191
    1ef0:	8c 93       	st	X, r24
	}
}
    1ef2:	0f 90       	pop	r0
    1ef4:	cf 91       	pop	r28
    1ef6:	df 91       	pop	r29
    1ef8:	08 95       	ret

00001efa <Timer_setCallBack>:

void Timer_setCallBack(TimerNumber timer,Mode mode,void(*a_ptr)(void))
{
    1efa:	df 93       	push	r29
    1efc:	cf 93       	push	r28
    1efe:	00 d0       	rcall	.+0      	; 0x1f00 <Timer_setCallBack+0x6>
    1f00:	00 d0       	rcall	.+0      	; 0x1f02 <Timer_setCallBack+0x8>
    1f02:	cd b7       	in	r28, 0x3d	; 61
    1f04:	de b7       	in	r29, 0x3e	; 62
    1f06:	89 83       	std	Y+1, r24	; 0x01
    1f08:	6a 83       	std	Y+2, r22	; 0x02
    1f0a:	5c 83       	std	Y+4, r21	; 0x04
    1f0c:	4b 83       	std	Y+3, r20	; 0x03
	if(timer == Timer0)
    1f0e:	89 81       	ldd	r24, Y+1	; 0x01
    1f10:	88 23       	and	r24, r24
    1f12:	39 f4       	brne	.+14     	; 0x1f22 <Timer_setCallBack+0x28>
	{
		g_Timer0_callBackPtr = a_ptr ;
    1f14:	8b 81       	ldd	r24, Y+3	; 0x03
    1f16:	9c 81       	ldd	r25, Y+4	; 0x04
    1f18:	90 93 6f 00 	sts	0x006F, r25
    1f1c:	80 93 6e 00 	sts	0x006E, r24
    1f20:	26 c0       	rjmp	.+76     	; 0x1f6e <Timer_setCallBack+0x74>
	}
	else if (timer == Timer1 && (mode == CTCA || mode == Normal)  )
    1f22:	89 81       	ldd	r24, Y+1	; 0x01
    1f24:	81 30       	cpi	r24, 0x01	; 1
    1f26:	69 f4       	brne	.+26     	; 0x1f42 <Timer_setCallBack+0x48>
    1f28:	8a 81       	ldd	r24, Y+2	; 0x02
    1f2a:	82 30       	cpi	r24, 0x02	; 2
    1f2c:	19 f0       	breq	.+6      	; 0x1f34 <Timer_setCallBack+0x3a>
    1f2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f30:	88 23       	and	r24, r24
    1f32:	39 f4       	brne	.+14     	; 0x1f42 <Timer_setCallBack+0x48>
	{
		g_Timer1_callBackPtrA = a_ptr ;
    1f34:	8b 81       	ldd	r24, Y+3	; 0x03
    1f36:	9c 81       	ldd	r25, Y+4	; 0x04
    1f38:	90 93 71 00 	sts	0x0071, r25
    1f3c:	80 93 70 00 	sts	0x0070, r24
    1f40:	16 c0       	rjmp	.+44     	; 0x1f6e <Timer_setCallBack+0x74>
	}
	else if (timer == Timer1 && mode ==CTCB)
    1f42:	89 81       	ldd	r24, Y+1	; 0x01
    1f44:	81 30       	cpi	r24, 0x01	; 1
    1f46:	51 f4       	brne	.+20     	; 0x1f5c <Timer_setCallBack+0x62>
    1f48:	8a 81       	ldd	r24, Y+2	; 0x02
    1f4a:	83 30       	cpi	r24, 0x03	; 3
    1f4c:	39 f4       	brne	.+14     	; 0x1f5c <Timer_setCallBack+0x62>
	{
		g_Timer1_callBackPtrB = a_ptr ;
    1f4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f50:	9c 81       	ldd	r25, Y+4	; 0x04
    1f52:	90 93 73 00 	sts	0x0073, r25
    1f56:	80 93 72 00 	sts	0x0072, r24
    1f5a:	09 c0       	rjmp	.+18     	; 0x1f6e <Timer_setCallBack+0x74>
	}
	else if (timer == Timer2)
    1f5c:	89 81       	ldd	r24, Y+1	; 0x01
    1f5e:	82 30       	cpi	r24, 0x02	; 2
    1f60:	31 f4       	brne	.+12     	; 0x1f6e <Timer_setCallBack+0x74>
	{
		g_Timer2_callBackPtr = a_ptr ;
    1f62:	8b 81       	ldd	r24, Y+3	; 0x03
    1f64:	9c 81       	ldd	r25, Y+4	; 0x04
    1f66:	90 93 75 00 	sts	0x0075, r25
    1f6a:	80 93 74 00 	sts	0x0074, r24
	}
}
    1f6e:	0f 90       	pop	r0
    1f70:	0f 90       	pop	r0
    1f72:	0f 90       	pop	r0
    1f74:	0f 90       	pop	r0
    1f76:	cf 91       	pop	r28
    1f78:	df 91       	pop	r29
    1f7a:	08 95       	ret

00001f7c <UART_init>:
 *******************************************************************************/


#include "uart.h"

void UART_init(UART_configType* UART_configTypePtr){
    1f7c:	0f 93       	push	r16
    1f7e:	1f 93       	push	r17
    1f80:	df 93       	push	r29
    1f82:	cf 93       	push	r28
    1f84:	00 d0       	rcall	.+0      	; 0x1f86 <UART_init+0xa>
    1f86:	cd b7       	in	r28, 0x3d	; 61
    1f88:	de b7       	in	r29, 0x3e	; 62
    1f8a:	9a 83       	std	Y+2, r25	; 0x02
    1f8c:	89 83       	std	Y+1, r24	; 0x01
	UCSRA = (1<<U2X);                         //double speed mode
    1f8e:	eb e2       	ldi	r30, 0x2B	; 43
    1f90:	f0 e0       	ldi	r31, 0x00	; 0
    1f92:	82 e0       	ldi	r24, 0x02	; 2
    1f94:	80 83       	st	Z, r24
	UCSRB = (1<<RXEN) | (1<<TXEN) ;          //Receiver and Transmitter enable
    1f96:	ea e2       	ldi	r30, 0x2A	; 42
    1f98:	f0 e0       	ldi	r31, 0x00	; 0
    1f9a:	88 e1       	ldi	r24, 0x18	; 24
    1f9c:	80 83       	st	Z, r24
	UCSRC = (1<<URSEL);                     //select bit for write and read from UCSRC
    1f9e:	e0 e4       	ldi	r30, 0x40	; 64
    1fa0:	f0 e0       	ldi	r31, 0x00	; 0
    1fa2:	80 e8       	ldi	r24, 0x80	; 128
    1fa4:	80 83       	st	Z, r24
	if(UART_configTypePtr->type)
    1fa6:	e9 81       	ldd	r30, Y+1	; 0x01
    1fa8:	fa 81       	ldd	r31, Y+2	; 0x02
    1faa:	80 81       	ld	r24, Z
    1fac:	88 23       	and	r24, r24
    1fae:	39 f0       	breq	.+14     	; 0x1fbe <UART_init+0x42>
		SET_BIT(UCSRC,UMSEL);                //synchronous mode
    1fb0:	a0 e4       	ldi	r26, 0x40	; 64
    1fb2:	b0 e0       	ldi	r27, 0x00	; 0
    1fb4:	e0 e4       	ldi	r30, 0x40	; 64
    1fb6:	f0 e0       	ldi	r31, 0x00	; 0
    1fb8:	80 81       	ld	r24, Z
    1fba:	80 64       	ori	r24, 0x40	; 64
    1fbc:	8c 93       	st	X, r24
	//parity bit mode(disabled,even or odd)
	UCSRC = (UCSRC & 0xCF) | ( ((UART_configTypePtr->parity)<<4) & 0x30 ) ;
    1fbe:	a0 e4       	ldi	r26, 0x40	; 64
    1fc0:	b0 e0       	ldi	r27, 0x00	; 0
    1fc2:	e0 e4       	ldi	r30, 0x40	; 64
    1fc4:	f0 e0       	ldi	r31, 0x00	; 0
    1fc6:	80 81       	ld	r24, Z
    1fc8:	28 2f       	mov	r18, r24
    1fca:	2f 7c       	andi	r18, 0xCF	; 207
    1fcc:	e9 81       	ldd	r30, Y+1	; 0x01
    1fce:	fa 81       	ldd	r31, Y+2	; 0x02
    1fd0:	82 81       	ldd	r24, Z+2	; 0x02
    1fd2:	88 2f       	mov	r24, r24
    1fd4:	90 e0       	ldi	r25, 0x00	; 0
    1fd6:	82 95       	swap	r24
    1fd8:	92 95       	swap	r25
    1fda:	90 7f       	andi	r25, 0xF0	; 240
    1fdc:	98 27       	eor	r25, r24
    1fde:	80 7f       	andi	r24, 0xF0	; 240
    1fe0:	98 27       	eor	r25, r24
    1fe2:	80 73       	andi	r24, 0x30	; 48
    1fe4:	82 2b       	or	r24, r18
    1fe6:	8c 93       	st	X, r24
	/*number of bits in one UART frame*/
	UCSRC = (UCSRC & 0xF9) | ( ((UART_configTypePtr->number)<<1) & 0x06 ) ;
    1fe8:	a0 e4       	ldi	r26, 0x40	; 64
    1fea:	b0 e0       	ldi	r27, 0x00	; 0
    1fec:	e0 e4       	ldi	r30, 0x40	; 64
    1fee:	f0 e0       	ldi	r31, 0x00	; 0
    1ff0:	80 81       	ld	r24, Z
    1ff2:	28 2f       	mov	r18, r24
    1ff4:	29 7f       	andi	r18, 0xF9	; 249
    1ff6:	e9 81       	ldd	r30, Y+1	; 0x01
    1ff8:	fa 81       	ldd	r31, Y+2	; 0x02
    1ffa:	81 81       	ldd	r24, Z+1	; 0x01
    1ffc:	88 2f       	mov	r24, r24
    1ffe:	90 e0       	ldi	r25, 0x00	; 0
    2000:	88 0f       	add	r24, r24
    2002:	99 1f       	adc	r25, r25
    2004:	86 70       	andi	r24, 0x06	; 6
    2006:	82 2b       	or	r24, r18
    2008:	8c 93       	st	X, r24
	if(UART_configTypePtr->number == Nine)
    200a:	e9 81       	ldd	r30, Y+1	; 0x01
    200c:	fa 81       	ldd	r31, Y+2	; 0x02
    200e:	81 81       	ldd	r24, Z+1	; 0x01
    2010:	87 30       	cpi	r24, 0x07	; 7
    2012:	39 f4       	brne	.+14     	; 0x2022 <UART_init+0xa6>
		SET_BIT(UCSRB,UCSZ2);
    2014:	aa e2       	ldi	r26, 0x2A	; 42
    2016:	b0 e0       	ldi	r27, 0x00	; 0
    2018:	ea e2       	ldi	r30, 0x2A	; 42
    201a:	f0 e0       	ldi	r31, 0x00	; 0
    201c:	80 81       	ld	r24, Z
    201e:	84 60       	ori	r24, 0x04	; 4
    2020:	8c 93       	st	X, r24
	//CLEAR_BIT(UBRRH,URSEL);             //select bit for write and read from UBRRH
	UBRRL =( ( F_CPU/(8UL * UART_configTypePtr->buadRate) ) -1);
    2022:	09 e2       	ldi	r16, 0x29	; 41
    2024:	10 e0       	ldi	r17, 0x00	; 0
    2026:	e9 81       	ldd	r30, Y+1	; 0x01
    2028:	fa 81       	ldd	r31, Y+2	; 0x02
    202a:	83 81       	ldd	r24, Z+3	; 0x03
    202c:	94 81       	ldd	r25, Z+4	; 0x04
    202e:	cc 01       	movw	r24, r24
    2030:	a0 e0       	ldi	r26, 0x00	; 0
    2032:	b0 e0       	ldi	r27, 0x00	; 0
    2034:	88 0f       	add	r24, r24
    2036:	99 1f       	adc	r25, r25
    2038:	aa 1f       	adc	r26, r26
    203a:	bb 1f       	adc	r27, r27
    203c:	88 0f       	add	r24, r24
    203e:	99 1f       	adc	r25, r25
    2040:	aa 1f       	adc	r26, r26
    2042:	bb 1f       	adc	r27, r27
    2044:	88 0f       	add	r24, r24
    2046:	99 1f       	adc	r25, r25
    2048:	aa 1f       	adc	r26, r26
    204a:	bb 1f       	adc	r27, r27
    204c:	9c 01       	movw	r18, r24
    204e:	ad 01       	movw	r20, r26
    2050:	80 e0       	ldi	r24, 0x00	; 0
    2052:	92 e1       	ldi	r25, 0x12	; 18
    2054:	aa e7       	ldi	r26, 0x7A	; 122
    2056:	b0 e0       	ldi	r27, 0x00	; 0
    2058:	bc 01       	movw	r22, r24
    205a:	cd 01       	movw	r24, r26
    205c:	0e 94 32 11 	call	0x2264	; 0x2264 <__udivmodsi4>
    2060:	da 01       	movw	r26, r20
    2062:	c9 01       	movw	r24, r18
    2064:	81 50       	subi	r24, 0x01	; 1
    2066:	f8 01       	movw	r30, r16
    2068:	80 83       	st	Z, r24
	UBRRH = ((( F_CPU/(8UL * UART_configTypePtr->buadRate) ) -1)>>8);
    206a:	00 e4       	ldi	r16, 0x40	; 64
    206c:	10 e0       	ldi	r17, 0x00	; 0
    206e:	e9 81       	ldd	r30, Y+1	; 0x01
    2070:	fa 81       	ldd	r31, Y+2	; 0x02
    2072:	83 81       	ldd	r24, Z+3	; 0x03
    2074:	94 81       	ldd	r25, Z+4	; 0x04
    2076:	cc 01       	movw	r24, r24
    2078:	a0 e0       	ldi	r26, 0x00	; 0
    207a:	b0 e0       	ldi	r27, 0x00	; 0
    207c:	88 0f       	add	r24, r24
    207e:	99 1f       	adc	r25, r25
    2080:	aa 1f       	adc	r26, r26
    2082:	bb 1f       	adc	r27, r27
    2084:	88 0f       	add	r24, r24
    2086:	99 1f       	adc	r25, r25
    2088:	aa 1f       	adc	r26, r26
    208a:	bb 1f       	adc	r27, r27
    208c:	88 0f       	add	r24, r24
    208e:	99 1f       	adc	r25, r25
    2090:	aa 1f       	adc	r26, r26
    2092:	bb 1f       	adc	r27, r27
    2094:	9c 01       	movw	r18, r24
    2096:	ad 01       	movw	r20, r26
    2098:	80 e0       	ldi	r24, 0x00	; 0
    209a:	92 e1       	ldi	r25, 0x12	; 18
    209c:	aa e7       	ldi	r26, 0x7A	; 122
    209e:	b0 e0       	ldi	r27, 0x00	; 0
    20a0:	bc 01       	movw	r22, r24
    20a2:	cd 01       	movw	r24, r26
    20a4:	0e 94 32 11 	call	0x2264	; 0x2264 <__udivmodsi4>
    20a8:	da 01       	movw	r26, r20
    20aa:	c9 01       	movw	r24, r18
    20ac:	01 97       	sbiw	r24, 0x01	; 1
    20ae:	a1 09       	sbc	r26, r1
    20b0:	b1 09       	sbc	r27, r1
    20b2:	89 2f       	mov	r24, r25
    20b4:	9a 2f       	mov	r25, r26
    20b6:	ab 2f       	mov	r26, r27
    20b8:	bb 27       	eor	r27, r27
    20ba:	f8 01       	movw	r30, r16
    20bc:	80 83       	st	Z, r24
}
    20be:	0f 90       	pop	r0
    20c0:	0f 90       	pop	r0
    20c2:	cf 91       	pop	r28
    20c4:	df 91       	pop	r29
    20c6:	1f 91       	pop	r17
    20c8:	0f 91       	pop	r16
    20ca:	08 95       	ret

000020cc <UART_sendByte>:


void UART_sendByte(uint8 data){
    20cc:	df 93       	push	r29
    20ce:	cf 93       	push	r28
    20d0:	0f 92       	push	r0
    20d2:	cd b7       	in	r28, 0x3d	; 61
    20d4:	de b7       	in	r29, 0x3e	; 62
    20d6:	89 83       	std	Y+1, r24	; 0x01
	UDR = data;                            //put data in UART data register
    20d8:	ec e2       	ldi	r30, 0x2C	; 44
    20da:	f0 e0       	ldi	r31, 0x00	; 0
    20dc:	89 81       	ldd	r24, Y+1	; 0x01
    20de:	80 83       	st	Z, r24
	while(BIT_IS_CLEAR(UCSRA,TXC));        //wait until transition complete
    20e0:	eb e2       	ldi	r30, 0x2B	; 43
    20e2:	f0 e0       	ldi	r31, 0x00	; 0
    20e4:	80 81       	ld	r24, Z
    20e6:	88 2f       	mov	r24, r24
    20e8:	90 e0       	ldi	r25, 0x00	; 0
    20ea:	80 74       	andi	r24, 0x40	; 64
    20ec:	90 70       	andi	r25, 0x00	; 0
    20ee:	00 97       	sbiw	r24, 0x00	; 0
    20f0:	b9 f3       	breq	.-18     	; 0x20e0 <UART_sendByte+0x14>
	SET_BIT(UCSRA,TXC);                    //clear the flag
    20f2:	ab e2       	ldi	r26, 0x2B	; 43
    20f4:	b0 e0       	ldi	r27, 0x00	; 0
    20f6:	eb e2       	ldi	r30, 0x2B	; 43
    20f8:	f0 e0       	ldi	r31, 0x00	; 0
    20fa:	80 81       	ld	r24, Z
    20fc:	80 64       	ori	r24, 0x40	; 64
    20fe:	8c 93       	st	X, r24
}
    2100:	0f 90       	pop	r0
    2102:	cf 91       	pop	r28
    2104:	df 91       	pop	r29
    2106:	08 95       	ret

00002108 <UART_SendByte>:

void UART_SendByte(uint8 data)
{
    2108:	df 93       	push	r29
    210a:	cf 93       	push	r28
    210c:	0f 92       	push	r0
    210e:	cd b7       	in	r28, 0x3d	; 61
    2110:	de b7       	in	r29, 0x3e	; 62
    2112:	89 83       	std	Y+1, r24	; 0x01
	while(UART_receiveByte() != UARTREADY);
    2114:	0e 94 98 10 	call	0x2130	; 0x2130 <UART_receiveByte>
    2118:	82 35       	cpi	r24, 0x52	; 82
    211a:	e1 f7       	brne	.-8      	; 0x2114 <UART_SendByte+0xc>
	UART_sendByte(UARTREADY);
    211c:	82 e5       	ldi	r24, 0x52	; 82
    211e:	0e 94 66 10 	call	0x20cc	; 0x20cc <UART_sendByte>
	UART_sendByte(data);
    2122:	89 81       	ldd	r24, Y+1	; 0x01
    2124:	0e 94 66 10 	call	0x20cc	; 0x20cc <UART_sendByte>
}
    2128:	0f 90       	pop	r0
    212a:	cf 91       	pop	r28
    212c:	df 91       	pop	r29
    212e:	08 95       	ret

00002130 <UART_receiveByte>:

uint8 UART_receiveByte(void){
    2130:	df 93       	push	r29
    2132:	cf 93       	push	r28
    2134:	0f 92       	push	r0
    2136:	cd b7       	in	r28, 0x3d	; 61
    2138:	de b7       	in	r29, 0x3e	; 62
	while(BIT_IS_CLEAR(UCSRA,RXC));      //wait until receive complete
    213a:	eb e2       	ldi	r30, 0x2B	; 43
    213c:	f0 e0       	ldi	r31, 0x00	; 0
    213e:	80 81       	ld	r24, Z
    2140:	88 23       	and	r24, r24
    2142:	dc f7       	brge	.-10     	; 0x213a <UART_receiveByte+0xa>
	if(!( UCSRA & 0x1C ))                //check for errors
    2144:	eb e2       	ldi	r30, 0x2B	; 43
    2146:	f0 e0       	ldi	r31, 0x00	; 0
    2148:	80 81       	ld	r24, Z
    214a:	88 2f       	mov	r24, r24
    214c:	90 e0       	ldi	r25, 0x00	; 0
    214e:	8c 71       	andi	r24, 0x1C	; 28
    2150:	90 70       	andi	r25, 0x00	; 0
    2152:	00 97       	sbiw	r24, 0x00	; 0
    2154:	29 f4       	brne	.+10     	; 0x2160 <UART_receiveByte+0x30>
	return UDR;
    2156:	ec e2       	ldi	r30, 0x2C	; 44
    2158:	f0 e0       	ldi	r31, 0x00	; 0
    215a:	80 81       	ld	r24, Z
    215c:	89 83       	std	Y+1, r24	; 0x01
    215e:	01 c0       	rjmp	.+2      	; 0x2162 <UART_receiveByte+0x32>
	else
		return 0;
    2160:	19 82       	std	Y+1, r1	; 0x01
    2162:	89 81       	ldd	r24, Y+1	; 0x01
}
    2164:	0f 90       	pop	r0
    2166:	cf 91       	pop	r28
    2168:	df 91       	pop	r29
    216a:	08 95       	ret

0000216c <UART_ReceiveByte>:

uint8 UART_ReceiveByte(void)
{
    216c:	df 93       	push	r29
    216e:	cf 93       	push	r28
    2170:	cd b7       	in	r28, 0x3d	; 61
    2172:	de b7       	in	r29, 0x3e	; 62
	//check if master is ready for UART connection
	UART_sendByte(UARTREADY);
    2174:	82 e5       	ldi	r24, 0x52	; 82
    2176:	0e 94 66 10 	call	0x20cc	; 0x20cc <UART_sendByte>
	while(UART_receiveByte() != UARTREADY);
    217a:	0e 94 98 10 	call	0x2130	; 0x2130 <UART_receiveByte>
    217e:	82 35       	cpi	r24, 0x52	; 82
    2180:	e1 f7       	brne	.-8      	; 0x217a <UART_ReceiveByte+0xe>
	return UART_receiveByte();
    2182:	0e 94 98 10 	call	0x2130	; 0x2130 <UART_receiveByte>
}
    2186:	cf 91       	pop	r28
    2188:	df 91       	pop	r29
    218a:	08 95       	ret

0000218c <UART_sendString>:
void UART_sendString(const uint8 *Str)
{
    218c:	df 93       	push	r29
    218e:	cf 93       	push	r28
    2190:	00 d0       	rcall	.+0      	; 0x2192 <UART_sendString+0x6>
    2192:	0f 92       	push	r0
    2194:	cd b7       	in	r28, 0x3d	; 61
    2196:	de b7       	in	r29, 0x3e	; 62
    2198:	9b 83       	std	Y+3, r25	; 0x03
    219a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    219c:	19 82       	std	Y+1, r1	; 0x01
    219e:	0e c0       	rjmp	.+28     	; 0x21bc <UART_sendString+0x30>
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    21a0:	89 81       	ldd	r24, Y+1	; 0x01
    21a2:	28 2f       	mov	r18, r24
    21a4:	30 e0       	ldi	r19, 0x00	; 0
    21a6:	8a 81       	ldd	r24, Y+2	; 0x02
    21a8:	9b 81       	ldd	r25, Y+3	; 0x03
    21aa:	fc 01       	movw	r30, r24
    21ac:	e2 0f       	add	r30, r18
    21ae:	f3 1f       	adc	r31, r19
    21b0:	80 81       	ld	r24, Z
    21b2:	0e 94 66 10 	call	0x20cc	; 0x20cc <UART_sendByte>
		i++;
    21b6:	89 81       	ldd	r24, Y+1	; 0x01
    21b8:	8f 5f       	subi	r24, 0xFF	; 255
    21ba:	89 83       	std	Y+1, r24	; 0x01
	return UART_receiveByte();
}
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    21bc:	89 81       	ldd	r24, Y+1	; 0x01
    21be:	28 2f       	mov	r18, r24
    21c0:	30 e0       	ldi	r19, 0x00	; 0
    21c2:	8a 81       	ldd	r24, Y+2	; 0x02
    21c4:	9b 81       	ldd	r25, Y+3	; 0x03
    21c6:	fc 01       	movw	r30, r24
    21c8:	e2 0f       	add	r30, r18
    21ca:	f3 1f       	adc	r31, r19
    21cc:	80 81       	ld	r24, Z
    21ce:	88 23       	and	r24, r24
    21d0:	39 f7       	brne	.-50     	; 0x21a0 <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
		i++;
	}
}
    21d2:	0f 90       	pop	r0
    21d4:	0f 90       	pop	r0
    21d6:	0f 90       	pop	r0
    21d8:	cf 91       	pop	r28
    21da:	df 91       	pop	r29
    21dc:	08 95       	ret

000021de <UART_receiveString>:

void UART_receiveString(uint8 *Str)
{
    21de:	0f 93       	push	r16
    21e0:	1f 93       	push	r17
    21e2:	df 93       	push	r29
    21e4:	cf 93       	push	r28
    21e6:	00 d0       	rcall	.+0      	; 0x21e8 <UART_receiveString+0xa>
    21e8:	0f 92       	push	r0
    21ea:	cd b7       	in	r28, 0x3d	; 61
    21ec:	de b7       	in	r29, 0x3e	; 62
    21ee:	9b 83       	std	Y+3, r25	; 0x03
    21f0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    21f2:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = UART_receiveByte();
    21f4:	89 81       	ldd	r24, Y+1	; 0x01
    21f6:	28 2f       	mov	r18, r24
    21f8:	30 e0       	ldi	r19, 0x00	; 0
    21fa:	8a 81       	ldd	r24, Y+2	; 0x02
    21fc:	9b 81       	ldd	r25, Y+3	; 0x03
    21fe:	8c 01       	movw	r16, r24
    2200:	02 0f       	add	r16, r18
    2202:	13 1f       	adc	r17, r19
    2204:	0e 94 98 10 	call	0x2130	; 0x2130 <UART_receiveByte>
    2208:	f8 01       	movw	r30, r16
    220a:	80 83       	st	Z, r24
    220c:	0f c0       	rjmp	.+30     	; 0x222c <UART_receiveString+0x4e>
	while(Str[i] != '#')
	{
		i++;
    220e:	89 81       	ldd	r24, Y+1	; 0x01
    2210:	8f 5f       	subi	r24, 0xFF	; 255
    2212:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_receiveByte();
    2214:	89 81       	ldd	r24, Y+1	; 0x01
    2216:	28 2f       	mov	r18, r24
    2218:	30 e0       	ldi	r19, 0x00	; 0
    221a:	8a 81       	ldd	r24, Y+2	; 0x02
    221c:	9b 81       	ldd	r25, Y+3	; 0x03
    221e:	8c 01       	movw	r16, r24
    2220:	02 0f       	add	r16, r18
    2222:	13 1f       	adc	r17, r19
    2224:	0e 94 98 10 	call	0x2130	; 0x2130 <UART_receiveByte>
    2228:	f8 01       	movw	r30, r16
    222a:	80 83       	st	Z, r24

void UART_receiveString(uint8 *Str)
{
	uint8 i = 0;
	Str[i] = UART_receiveByte();
	while(Str[i] != '#')
    222c:	89 81       	ldd	r24, Y+1	; 0x01
    222e:	28 2f       	mov	r18, r24
    2230:	30 e0       	ldi	r19, 0x00	; 0
    2232:	8a 81       	ldd	r24, Y+2	; 0x02
    2234:	9b 81       	ldd	r25, Y+3	; 0x03
    2236:	fc 01       	movw	r30, r24
    2238:	e2 0f       	add	r30, r18
    223a:	f3 1f       	adc	r31, r19
    223c:	80 81       	ld	r24, Z
    223e:	83 32       	cpi	r24, 0x23	; 35
    2240:	31 f7       	brne	.-52     	; 0x220e <UART_receiveString+0x30>
	{
		i++;
		Str[i] = UART_receiveByte();
	}
	Str[i] = '\0';
    2242:	89 81       	ldd	r24, Y+1	; 0x01
    2244:	28 2f       	mov	r18, r24
    2246:	30 e0       	ldi	r19, 0x00	; 0
    2248:	8a 81       	ldd	r24, Y+2	; 0x02
    224a:	9b 81       	ldd	r25, Y+3	; 0x03
    224c:	fc 01       	movw	r30, r24
    224e:	e2 0f       	add	r30, r18
    2250:	f3 1f       	adc	r31, r19
    2252:	10 82       	st	Z, r1
}
    2254:	0f 90       	pop	r0
    2256:	0f 90       	pop	r0
    2258:	0f 90       	pop	r0
    225a:	cf 91       	pop	r28
    225c:	df 91       	pop	r29
    225e:	1f 91       	pop	r17
    2260:	0f 91       	pop	r16
    2262:	08 95       	ret

00002264 <__udivmodsi4>:
    2264:	a1 e2       	ldi	r26, 0x21	; 33
    2266:	1a 2e       	mov	r1, r26
    2268:	aa 1b       	sub	r26, r26
    226a:	bb 1b       	sub	r27, r27
    226c:	fd 01       	movw	r30, r26
    226e:	0d c0       	rjmp	.+26     	; 0x228a <__udivmodsi4_ep>

00002270 <__udivmodsi4_loop>:
    2270:	aa 1f       	adc	r26, r26
    2272:	bb 1f       	adc	r27, r27
    2274:	ee 1f       	adc	r30, r30
    2276:	ff 1f       	adc	r31, r31
    2278:	a2 17       	cp	r26, r18
    227a:	b3 07       	cpc	r27, r19
    227c:	e4 07       	cpc	r30, r20
    227e:	f5 07       	cpc	r31, r21
    2280:	20 f0       	brcs	.+8      	; 0x228a <__udivmodsi4_ep>
    2282:	a2 1b       	sub	r26, r18
    2284:	b3 0b       	sbc	r27, r19
    2286:	e4 0b       	sbc	r30, r20
    2288:	f5 0b       	sbc	r31, r21

0000228a <__udivmodsi4_ep>:
    228a:	66 1f       	adc	r22, r22
    228c:	77 1f       	adc	r23, r23
    228e:	88 1f       	adc	r24, r24
    2290:	99 1f       	adc	r25, r25
    2292:	1a 94       	dec	r1
    2294:	69 f7       	brne	.-38     	; 0x2270 <__udivmodsi4_loop>
    2296:	60 95       	com	r22
    2298:	70 95       	com	r23
    229a:	80 95       	com	r24
    229c:	90 95       	com	r25
    229e:	9b 01       	movw	r18, r22
    22a0:	ac 01       	movw	r20, r24
    22a2:	bd 01       	movw	r22, r26
    22a4:	cf 01       	movw	r24, r30
    22a6:	08 95       	ret

000022a8 <__prologue_saves__>:
    22a8:	2f 92       	push	r2
    22aa:	3f 92       	push	r3
    22ac:	4f 92       	push	r4
    22ae:	5f 92       	push	r5
    22b0:	6f 92       	push	r6
    22b2:	7f 92       	push	r7
    22b4:	8f 92       	push	r8
    22b6:	9f 92       	push	r9
    22b8:	af 92       	push	r10
    22ba:	bf 92       	push	r11
    22bc:	cf 92       	push	r12
    22be:	df 92       	push	r13
    22c0:	ef 92       	push	r14
    22c2:	ff 92       	push	r15
    22c4:	0f 93       	push	r16
    22c6:	1f 93       	push	r17
    22c8:	cf 93       	push	r28
    22ca:	df 93       	push	r29
    22cc:	cd b7       	in	r28, 0x3d	; 61
    22ce:	de b7       	in	r29, 0x3e	; 62
    22d0:	ca 1b       	sub	r28, r26
    22d2:	db 0b       	sbc	r29, r27
    22d4:	0f b6       	in	r0, 0x3f	; 63
    22d6:	f8 94       	cli
    22d8:	de bf       	out	0x3e, r29	; 62
    22da:	0f be       	out	0x3f, r0	; 63
    22dc:	cd bf       	out	0x3d, r28	; 61
    22de:	09 94       	ijmp

000022e0 <__epilogue_restores__>:
    22e0:	2a 88       	ldd	r2, Y+18	; 0x12
    22e2:	39 88       	ldd	r3, Y+17	; 0x11
    22e4:	48 88       	ldd	r4, Y+16	; 0x10
    22e6:	5f 84       	ldd	r5, Y+15	; 0x0f
    22e8:	6e 84       	ldd	r6, Y+14	; 0x0e
    22ea:	7d 84       	ldd	r7, Y+13	; 0x0d
    22ec:	8c 84       	ldd	r8, Y+12	; 0x0c
    22ee:	9b 84       	ldd	r9, Y+11	; 0x0b
    22f0:	aa 84       	ldd	r10, Y+10	; 0x0a
    22f2:	b9 84       	ldd	r11, Y+9	; 0x09
    22f4:	c8 84       	ldd	r12, Y+8	; 0x08
    22f6:	df 80       	ldd	r13, Y+7	; 0x07
    22f8:	ee 80       	ldd	r14, Y+6	; 0x06
    22fa:	fd 80       	ldd	r15, Y+5	; 0x05
    22fc:	0c 81       	ldd	r16, Y+4	; 0x04
    22fe:	1b 81       	ldd	r17, Y+3	; 0x03
    2300:	aa 81       	ldd	r26, Y+2	; 0x02
    2302:	b9 81       	ldd	r27, Y+1	; 0x01
    2304:	ce 0f       	add	r28, r30
    2306:	d1 1d       	adc	r29, r1
    2308:	0f b6       	in	r0, 0x3f	; 63
    230a:	f8 94       	cli
    230c:	de bf       	out	0x3e, r29	; 62
    230e:	0f be       	out	0x3f, r0	; 63
    2310:	cd bf       	out	0x3d, r28	; 61
    2312:	ed 01       	movw	r28, r26
    2314:	08 95       	ret

00002316 <_exit>:
    2316:	f8 94       	cli

00002318 <__stop_program>:
    2318:	ff cf       	rjmp	.-2      	; 0x2318 <__stop_program>
